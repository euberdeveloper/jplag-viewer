id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000019/submissions/05826385_Sociologia_120307016/Sociologia2.java",,""
2,RECORDDECLARATION,"Graph",Sociologia2.java(3:1-89:2),"class Graph {
    class Node {
	int index;              // mark node as visited by assigning it a visit number
	int lowlink;            // low-link index reaching the node (initially equal to index)
	LinkedList<Node> edges; // successors of current node
	
	Node() {
	    index= -1;
	    lowlink= -1;
	    edges= new LinkedList<Node>();
	}
    }
    Node graph[];      // graph is a vector of Nodes
    int numNodes;      // number of nodes
    int index;         // global counter for visited nodes
    int ctrScc;        // ctr of SCCs with size >= 4
    int ctrNos;        // ctr of nodes not included in SCCs sized >= 4
    LinkedList<Node> stack; // used to save nodes in a SCC and to verify that we have an SCC

    // Graph constructor -- n nodes 
    Graph(int n) {
	graph=     new Node[n];
	for (int i=0; i<n; i++) 
	    graph[i]= new Node();
	index=     0;
	ctrScc=    0;
	ctrNos=    0;
	stack=    new LinkedList<Node>();
	numNodes = n;
    }

    void addConnection(int a, int b) {
	// subtract 1 to index from 0 till numNodes-1
	graph[a-1].edges.addLast(graph[b-1]);
    }
    
    void tarjan() {
	// these were already initialized at graph creation
	//index= 0;
	//stack= new LinkedList<Integer>();
	//ctrScc= 0;
	//ctrNos= 0;

	for (Node v : graph) {
	    if (v.index==-1)
		dfs(v);
	}
    }

    void dfs(Node v) {
	int ctr;

	// mark v as visited by recording the depth index
	v.index=   index;
	v.lowlink= index;
	index++;
	stack.addFirst(v);
	
	// visit successors of v if not yet visited
	for (Node w : v.edges) {
	    if (w.index==-1) {
		dfs(w);
		v.lowlink= Math.min(v.lowlink, w.lowlink);
	    }
	    else if (stack.contains(w))  // if w is the stack, belongs to current SCC
		v.lowlink= Math.min(v.lowlink, w.index); // consider minimum depth index
	}
	if (v.lowlink==v.index) { // SCC found, v is its root
	    ctr= 1;               // to count for v
	    Node w;
	    //System.out.printf(""SCC: %d "", v.index);
	    while ((w=stack.removeFirst())!=v) {
		ctr++;
		//	System.out.printf(""%d "", w.index);
	    }
	    // update counters for Sociologia problem
	    if (ctr>=4) {
		ctrScc++;
		ctrNos += ctr;
	    }
	}
    }
    void printResult(int nc) {
	System.out.printf(""Caso #%d\n"",nc+1);
	System.out.printf(""%d %d\n"",ctrScc,numNodes-ctrNos);
    }
}"
3,RECORDDECLARATION,"Sociologia2",Sociologia2.java(92:1-117:2),"class Sociologia2 {
    public static void main(String args[]) {
	Scanner stdin= new Scanner(System.in);
	int c, ncases, n, connections;
	int a, b;
	Graph graph;

	ncases = stdin.nextInt();    // Number of cases
	for (c=0; c<ncases; c++) {
	    n= stdin.nextInt();      // Number of nodes
	    graph = new Graph(n);    // Create a new graph object 
	    for (int j= 0; j<n; j++) {
		a= stdin.nextInt();  // current node
		connections = stdin.nextInt(); // Number of links (successors)
		for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}
	    }
	    // call Tarjan algorithm
	    graph.tarjan();
	    // print the result for case c
	    graph.printResult(c);
	}	
    }
}"
4,INCLUDEDECLARATION,"java.util",,""
5,FIELDDECLARATION,"this",,""
6,FIELDDECLARATION,"graph",Sociologia2.java(15:5-15:18),"graph"
7,FIELDDECLARATION,"numNodes",Sociologia2.java(16:5-16:18),"numNodes"
8,FIELDDECLARATION,"index",Sociologia2.java(17:5-17:15),"index"
9,FIELDDECLARATION,"ctrScc",Sociologia2.java(18:5-18:16),"ctrScc"
10,FIELDDECLARATION,"ctrNos",Sociologia2.java(19:5-19:16),"ctrNos"
11,FIELDDECLARATION,"stack",Sociologia2.java(20:5-20:28),"stack"
12,METHODDECLARATION,"addConnection",Sociologia2.java(34:5-37:6),"void addConnection(int a, int b) {
	// subtract 1 to index from 0 till numNodes-1
	graph[a-1].edges.addLast(graph[b-1]);
    }"
13,METHODDECLARATION,"tarjan",Sociologia2.java(39:5-50:6),"void tarjan() {
	// these were already initialized at graph creation
	//index= 0;
	//stack= new LinkedList<Integer>();
	//ctrScc= 0;
	//ctrNos= 0;

	for (Node v : graph) {
	    if (v.index==-1)
		dfs(v);
	}
    }"
14,METHODDECLARATION,"dfs",Sociologia2.java(52:5-84:6),"void dfs(Node v) {
	int ctr;

	// mark v as visited by recording the depth index
	v.index=   index;
	v.lowlink= index;
	index++;
	stack.addFirst(v);
	
	// visit successors of v if not yet visited
	for (Node w : v.edges) {
	    if (w.index==-1) {
		dfs(w);
		v.lowlink= Math.min(v.lowlink, w.lowlink);
	    }
	    else if (stack.contains(w))  // if w is the stack, belongs to current SCC
		v.lowlink= Math.min(v.lowlink, w.index); // consider minimum depth index
	}
	if (v.lowlink==v.index) { // SCC found, v is its root
	    ctr= 1;               // to count for v
	    Node w;
	    //System.out.printf(""SCC: %d "", v.index);
	    while ((w=stack.removeFirst())!=v) {
		ctr++;
		//	System.out.printf(""%d "", w.index);
	    }
	    // update counters for Sociologia problem
	    if (ctr>=4) {
		ctrScc++;
		ctrNos += ctr;
	    }
	}
    }"
15,METHODDECLARATION,"printResult",Sociologia2.java(85:5-88:6),"void printResult(int nc) {
	System.out.printf(""Caso #%d\n"",nc+1);
	System.out.printf(""%d %d\n"",ctrScc,numNodes-ctrNos);
    }"
16,CONSTRUCTORDECLARATION,"Graph",Sociologia2.java(23:5-32:6),"Graph(int n) {
	graph=     new Node[n];
	for (int i=0; i<n; i++) 
	    graph[i]= new Node();
	index=     0;
	ctrScc=    0;
	ctrNos=    0;
	stack=    new LinkedList<Node>();
	numNodes = n;
    }"
17,RECORDDECLARATION,"Graph.Node",Sociologia2.java(4:5-14:6),"class Node {
	int index;              // mark node as visited by assigning it a visit number
	int lowlink;            // low-link index reaching the node (initially equal to index)
	LinkedList<Node> edges; // successors of current node
	
	Node() {
	    index= -1;
	    lowlink= -1;
	    edges= new LinkedList<Node>();
	}
    }"
18,FIELDDECLARATION,"this",,""
19,FIELDDECLARATION,"index",Sociologia2.java(5:2-5:12),"index"
20,FIELDDECLARATION,"lowlink",Sociologia2.java(6:2-6:14),"lowlink"
21,FIELDDECLARATION,"edges",Sociologia2.java(7:2-7:25),"edges"
22,CONSTRUCTORDECLARATION,"Node",Sociologia2.java(9:2-13:3),"Node() {
	    index= -1;
	    lowlink= -1;
	    edges= new LinkedList<Node>();
	}"
23,COMPOUNDSTATEMENT,"",Sociologia2.java(9:9-13:3),"{
	    index= -1;
	    lowlink= -1;
	    edges= new LinkedList<Node>();
	}"
24,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(10:6-10:11),"this"
25,RETURNSTATEMENT,"",,""
26,BINARYOPERATOR,"=",Sociologia2.java(10:6-10:16),"index= -1;"
27,BINARYOPERATOR,"=",Sociologia2.java(11:6-11:18),"lowlink= -1;"
28,BINARYOPERATOR,"=",Sociologia2.java(12:6-12:36),"edges= new LinkedList<Node>();"
29,MEMBEREXPRESSION,"lowlink",Sociologia2.java(11:6-11:13),"lowlink"
30,UNARYOPERATOR,"-",Sociologia2.java(11:15-11:17),"-1"
31,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(12:6-12:11),"this"
32,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(11:6-11:13),"this"
33,LITERAL,"",Sociologia2.java(11:16-11:17),"1"
34,MEMBEREXPRESSION,"edges",Sociologia2.java(12:6-12:11),"edges"
35,NEWEXPRESSION,"",Sociologia2.java(12:13-12:35),"new LinkedList<Node>()"
36,CONSTRUCTEXPRESSION,"",Sociologia2.java(12:13-12:35),"new LinkedList<Node>()"
37,MEMBEREXPRESSION,"index",Sociologia2.java(10:6-10:11),"index"
38,UNARYOPERATOR,"-",Sociologia2.java(10:13-10:15),"-1"
39,LITERAL,"",Sociologia2.java(10:14-10:15),"1"
40,VARIABLEDECLARATION,"this",,""
41,COMPOUNDSTATEMENT,"",Sociologia2.java(34:38-37:6),"{
	// subtract 1 to index from 0 till numNodes-1
	graph[a-1].edges.addLast(graph[b-1]);
    }"
42,PARAMVARIABLEDECLARATION,"a",Sociologia2.java(34:24-34:29),"int a"
43,PARAMVARIABLEDECLARATION,"b",Sociologia2.java(34:31-34:36),"int b"
44,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(36:2-36:7),"this"
45,RETURNSTATEMENT,"",,""
46,MEMBERCALLEXPRESSION,"addLast",Sociologia2.java(36:2-36:39),"graph[a-1].edges.addLast(graph[b-1]);"
47,DECLAREDREFERENCEEXPRESSION,"addLast",Sociologia2.java(36:19-36:26),"addLast"
48,ARRAYSUBSCRIPTIONEXPRESSION,"",Sociologia2.java(36:27-36:37),"graph[b-1]"
49,MEMBEREXPRESSION,"edges",Sociologia2.java(36:2-36:18),"graph[a-1].edges"
50,ARRAYSUBSCRIPTIONEXPRESSION,"",Sociologia2.java(36:2-36:12),"graph[a-1]"
51,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(36:27-36:32),"this"
52,MEMBEREXPRESSION,"graph",Sociologia2.java(36:2-36:7),"graph"
53,BINARYOPERATOR,"-",Sociologia2.java(36:8-36:11),"a-1"
54,DECLAREDREFERENCEEXPRESSION,"a",Sociologia2.java(36:8-36:9),"a"
55,LITERAL,"",Sociologia2.java(36:10-36:11),"1"
56,MEMBEREXPRESSION,"graph",Sociologia2.java(36:27-36:32),"graph"
57,BINARYOPERATOR,"-",Sociologia2.java(36:33-36:36),"b-1"
58,DECLAREDREFERENCEEXPRESSION,"b",Sociologia2.java(36:33-36:34),"b"
59,LITERAL,"",Sociologia2.java(36:35-36:36),"1"
60,VARIABLEDECLARATION,"this",,""
61,COMPOUNDSTATEMENT,"",Sociologia2.java(85:30-88:6),"{
	System.out.printf(""Caso #%d\n"",nc+1);
	System.out.printf(""%d %d\n"",ctrScc,numNodes-ctrNos);
    }"
62,PARAMVARIABLEDECLARATION,"nc",Sociologia2.java(85:22-85:28),"int nc"
63,DECLAREDREFERENCEEXPRESSION,"System",Sociologia2.java(86:2-86:8),"System"
64,RETURNSTATEMENT,"",,""
65,MEMBERCALLEXPRESSION,"printf",Sociologia2.java(86:2-86:39),"System.out.printf(""Caso #%d\n"",nc+1);"
66,MEMBERCALLEXPRESSION,"printf",Sociologia2.java(87:2-87:54),"System.out.printf(""%d %d\n"",ctrScc,numNodes-ctrNos);"
67,DECLAREDREFERENCEEXPRESSION,"printf",Sociologia2.java(86:13-86:19),"printf"
68,DECLAREDREFERENCEEXPRESSION,"System",Sociologia2.java(87:2-87:8),"System"
69,BINARYOPERATOR,"+",Sociologia2.java(86:33-86:37),"nc+1"
70,LITERAL,"",Sociologia2.java(86:20-86:32),"""Caso #%d\n"""
71,DECLAREDREFERENCEEXPRESSION,"nc",Sociologia2.java(86:33-86:35),"nc"
72,MEMBEREXPRESSION,"out",Sociologia2.java(86:2-86:12),"System.out"
73,LITERAL,"",Sociologia2.java(86:36-86:37),"1"
74,DECLAREDREFERENCEEXPRESSION,"printf",Sociologia2.java(87:13-87:19),"printf"
75,BINARYOPERATOR,"-",Sociologia2.java(87:37-87:52),"numNodes-ctrNos"
76,MEMBEREXPRESSION,"numNodes",Sociologia2.java(87:37-87:45),"numNodes"
77,MEMBEREXPRESSION,"ctrNos",Sociologia2.java(87:46-87:52),"ctrNos"
78,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(87:46-87:52),"this"
79,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(87:37-87:45),"this"
80,MEMBEREXPRESSION,"ctrScc",Sociologia2.java(87:30-87:36),"ctrScc"
81,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(87:30-87:36),"this"
82,LITERAL,"",Sociologia2.java(87:20-87:29),"""%d %d\n"""
83,MEMBEREXPRESSION,"out",Sociologia2.java(87:2-87:12),"System.out"
84,VARIABLEDECLARATION,"this",,""
85,COMPOUNDSTATEMENT,"",Sociologia2.java(52:22-84:6),"{
	int ctr;

	// mark v as visited by recording the depth index
	v.index=   index;
	v.lowlink= index;
	index++;
	stack.addFirst(v);
	
	// visit successors of v if not yet visited
	for (Node w : v.edges) {
	    if (w.index==-1) {
		dfs(w);
		v.lowlink= Math.min(v.lowlink, w.lowlink);
	    }
	    else if (stack.contains(w))  // if w is the stack, belongs to current SCC
		v.lowlink= Math.min(v.lowlink, w.index); // consider minimum depth index
	}
	if (v.lowlink==v.index) { // SCC found, v is its root
	    ctr= 1;               // to count for v
	    Node w;
	    //System.out.printf(""SCC: %d "", v.index);
	    while ((w=stack.removeFirst())!=v) {
		ctr++;
		//	System.out.printf(""%d "", w.index);
	    }
	    // update counters for Sociologia problem
	    if (ctr>=4) {
		ctrScc++;
		ctrNos += ctr;
	    }
	}
    }"
86,PARAMVARIABLEDECLARATION,"v",Sociologia2.java(52:14-52:20),"Node v"
87,UNINITIALIZEDVALUE,"Uninitialized Value",,""
88,RETURNSTATEMENT,"",,""
89,DECLARATIONSTATEMENT,"",Sociologia2.java(53:2-53:10),"int ctr;"
90,BINARYOPERATOR,"=",Sociologia2.java(56:2-56:19),"v.index=   index;"
91,BINARYOPERATOR,"=",Sociologia2.java(57:2-57:19),"v.lowlink= index;"
92,UNARYOPERATOR,"++",Sociologia2.java(58:2-58:10),"index++;"
93,MEMBERCALLEXPRESSION,"addFirst",Sociologia2.java(59:2-59:20),"stack.addFirst(v);"
94,FOREACHSTATEMENT,"",Sociologia2.java(62:2-69:3),"for (Node w : v.edges) {
	    if (w.index==-1) {
		dfs(w);
		v.lowlink= Math.min(v.lowlink, w.lowlink);
	    }
	    else if (stack.contains(w))  // if w is the stack, belongs to current SCC
		v.lowlink= Math.min(v.lowlink, w.index); // consider minimum depth index
	}"
95,IFSTATEMENT,"",Sociologia2.java(70:2-83:3),"if (v.lowlink==v.index) { // SCC found, v is its root
	    ctr= 1;               // to count for v
	    Node w;
	    //System.out.printf(""SCC: %d "", v.index);
	    while ((w=stack.removeFirst())!=v) {
		ctr++;
		//	System.out.printf(""%d "", w.index);
	    }
	    // update counters for Sociologia problem
	    if (ctr>=4) {
		ctrScc++;
		ctrNos += ctr;
	    }
	}"
96,VARIABLEDECLARATION,"ctr",Sociologia2.java(53:6-53:9),"ctr"
97,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(56:2-56:3),"v"
98,MEMBEREXPRESSION,"index",Sociologia2.java(56:2-56:9),"v.index"
99,MEMBEREXPRESSION,"index",Sociologia2.java(56:13-56:18),"index"
100,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(57:2-57:3),"v"
101,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(56:13-56:18),"this"
102,MEMBEREXPRESSION,"lowlink",Sociologia2.java(57:2-57:11),"v.lowlink"
103,MEMBEREXPRESSION,"index",Sociologia2.java(57:13-57:18),"index"
104,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(58:2-58:7),"this"
105,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(57:13-57:18),"this"
106,DECLAREDREFERENCEEXPRESSION,"addFirst",Sociologia2.java(59:8-59:16),"addFirst"
107,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(62:16-62:17),"v"
108,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(59:17-59:18),"v"
109,MEMBEREXPRESSION,"stack",Sociologia2.java(59:2-59:7),"stack"
110,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(59:2-59:7),"this"
111,MEMBEREXPRESSION,"index",Sociologia2.java(58:2-58:7),"index"
112,DECLARATIONSTATEMENT,"",Sociologia2.java(62:7-62:13),"Node w"
113,MEMBEREXPRESSION,"edges",Sociologia2.java(62:16-62:23),"v.edges"
114,COMPOUNDSTATEMENT,"",Sociologia2.java(62:25-69:3),"{
	    if (w.index==-1) {
		dfs(w);
		v.lowlink= Math.min(v.lowlink, w.lowlink);
	    }
	    else if (stack.contains(w))  // if w is the stack, belongs to current SCC
		v.lowlink= Math.min(v.lowlink, w.index); // consider minimum depth index
	}"
115,VARIABLEDECLARATION,"w",Sociologia2.java(62:12-62:13),"w"
116,DECLAREDREFERENCEEXPRESSION,"w",Sociologia2.java(63:10-63:11),"w"
117,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(70:6-70:7),"v"
118,UNINITIALIZEDVALUE,"Uninitialized Value",,""
119,IFSTATEMENT,"",Sociologia2.java(63:6-68:43),"if (w.index==-1) {
		dfs(w);
		v.lowlink= Math.min(v.lowlink, w.lowlink);
	    }
	    else if (stack.contains(w))  // if w is the stack, belongs to current SCC
		v.lowlink= Math.min(v.lowlink, w.index);"
120,COMPOUNDSTATEMENT,"",Sociologia2.java(63:23-66:7),"{
		dfs(w);
		v.lowlink= Math.min(v.lowlink, w.lowlink);
	    }"
121,BINARYOPERATOR,"=",Sociologia2.java(68:3-68:43),"v.lowlink= Math.min(v.lowlink, w.index);"
122,IFSTATEMENT,"",Sociologia2.java(67:11-68:43),"if (stack.contains(w))  // if w is the stack, belongs to current SCC
		v.lowlink= Math.min(v.lowlink, w.index);"
123,BINARYOPERATOR,"==",Sociologia2.java(63:10-63:21),"w.index==-1"
124,DECLAREDREFERENCEEXPRESSION,"w",Sociologia2.java(64:7-64:8),"w"
125,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(67:15-67:20),"this"
126,MEMBEREXPRESSION,"index",Sociologia2.java(63:10-63:17),"w.index"
127,UNARYOPERATOR,"-",Sociologia2.java(63:19-63:21),"-1"
128,LITERAL,"",Sociologia2.java(63:20-63:21),"1"
129,CALLEXPRESSION,"dfs",Sociologia2.java(64:3-64:10),"dfs(w);"
130,BINARYOPERATOR,"=",Sociologia2.java(65:3-65:45),"v.lowlink= Math.min(v.lowlink, w.lowlink);"
131,MEMBEREXPRESSION,"lowlink",Sociologia2.java(65:3-65:12),"v.lowlink"
132,STATICCALLEXPRESSION,"min",Sociologia2.java(65:14-65:44),"Math.min(v.lowlink, w.lowlink)"
133,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(65:3-65:4),"v"
134,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(65:23-65:24),"v"
135,MEMBEREXPRESSION,"lowlink",Sociologia2.java(65:34-65:43),"w.lowlink"
136,MEMBEREXPRESSION,"lowlink",Sociologia2.java(65:23-65:32),"v.lowlink"
137,DECLAREDREFERENCEEXPRESSION,"w",Sociologia2.java(65:34-65:35),"w"
138,METHODDECLARATION,"dfs",,""
139,PARAMVARIABLEDECLARATION,"graph.node0",,""
140,MEMBERCALLEXPRESSION,"contains",Sociologia2.java(67:15-67:32),"stack.contains(w)"
141,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(68:3-68:4),"v"
142,MEMBEREXPRESSION,"lowlink",Sociologia2.java(68:3-68:12),"v.lowlink"
143,STATICCALLEXPRESSION,"min",Sociologia2.java(68:14-68:42),"Math.min(v.lowlink, w.index)"
144,MEMBEREXPRESSION,"index",Sociologia2.java(68:34-68:41),"w.index"
145,DECLAREDREFERENCEEXPRESSION,"w",Sociologia2.java(68:34-68:35),"w"
146,MEMBEREXPRESSION,"lowlink",Sociologia2.java(68:23-68:32),"v.lowlink"
147,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(68:23-68:24),"v"
148,DECLAREDREFERENCEEXPRESSION,"contains",Sociologia2.java(67:21-67:29),"contains"
149,DECLAREDREFERENCEEXPRESSION,"w",Sociologia2.java(67:30-67:31),"w"
150,MEMBEREXPRESSION,"stack",Sociologia2.java(67:15-67:20),"stack"
151,COMPOUNDSTATEMENT,"",Sociologia2.java(70:26-83:3),"{ // SCC found, v is its root
	    ctr= 1;               // to count for v
	    Node w;
	    //System.out.printf(""SCC: %d "", v.index);
	    while ((w=stack.removeFirst())!=v) {
		ctr++;
		//	System.out.printf(""%d "", w.index);
	    }
	    // update counters for Sociologia problem
	    if (ctr>=4) {
		ctrScc++;
		ctrNos += ctr;
	    }
	}"
152,BINARYOPERATOR,"==",Sociologia2.java(70:6-70:24),"v.lowlink==v.index"
153,DECLAREDREFERENCEEXPRESSION,"ctr",Sociologia2.java(71:6-71:9),"ctr"
154,BINARYOPERATOR,"=",Sociologia2.java(71:6-71:13),"ctr= 1;"
155,DECLARATIONSTATEMENT,"",Sociologia2.java(72:6-72:13),"Node w;"
156,WHILESTATEMENT,"",Sociologia2.java(74:6-77:7),"while ((w=stack.removeFirst())!=v) {
		ctr++;
		//	System.out.printf(""%d "", w.index);
	    }"
157,IFSTATEMENT,"",Sociologia2.java(79:6-82:7),"if (ctr>=4) {
		ctrScc++;
		ctrNos += ctr;
	    }"
158,VARIABLEDECLARATION,"w",Sociologia2.java(72:11-72:12),"w"
159,COMPOUNDSTATEMENT,"",Sociologia2.java(79:18-82:7),"{
		ctrScc++;
		ctrNos += ctr;
	    }"
160,BINARYOPERATOR,">=",Sociologia2.java(79:10-79:16),"ctr>=4"
161,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(80:3-80:9),"this"
162,UNARYOPERATOR,"++",Sociologia2.java(80:3-80:12),"ctrScc++;"
163,BINARYOPERATOR,"+=",Sociologia2.java(81:3-81:17),"ctrNos += ctr;"
164,MEMBEREXPRESSION,"ctrNos",Sociologia2.java(81:3-81:9),"ctrNos"
165,DECLAREDREFERENCEEXPRESSION,"ctr",Sociologia2.java(81:13-81:16),"ctr"
166,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(81:3-81:9),"this"
167,MEMBEREXPRESSION,"ctrScc",Sociologia2.java(80:3-80:9),"ctrScc"
168,DECLAREDREFERENCEEXPRESSION,"ctr",Sociologia2.java(79:10-79:13),"ctr"
169,LITERAL,"",Sociologia2.java(79:15-79:16),"4"
170,BINARYOPERATOR,"!=",Sociologia2.java(74:13-74:39),"(w=stack.removeFirst())!=v"
171,COMPOUNDSTATEMENT,"",Sociologia2.java(74:41-77:7),"{
		ctr++;
		//	System.out.printf(""%d "", w.index);
	    }"
172,DECLAREDREFERENCEEXPRESSION,"ctr",Sociologia2.java(75:3-75:6),"ctr"
173,UNARYOPERATOR,"++",Sociologia2.java(75:3-75:9),"ctr++;"
174,DECLAREDREFERENCEEXPRESSION,"w",Sociologia2.java(74:14-74:15),"w"
175,BINARYOPERATOR,"=",Sociologia2.java(74:14-74:35),"w=stack.removeFirst()"
176,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(74:38-74:39),"v"
177,MEMBERCALLEXPRESSION,"removeFirst",Sociologia2.java(74:16-74:35),"stack.removeFirst()"
178,DECLAREDREFERENCEEXPRESSION,"removeFirst",Sociologia2.java(74:22-74:33),"removeFirst"
179,MEMBEREXPRESSION,"stack",Sociologia2.java(74:16-74:21),"stack"
180,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(74:16-74:21),"this"
181,LITERAL,"",Sociologia2.java(71:11-71:12),"1"
182,UNINITIALIZEDVALUE,"Uninitialized Value",,""
183,MEMBEREXPRESSION,"lowlink",Sociologia2.java(70:6-70:15),"v.lowlink"
184,MEMBEREXPRESSION,"index",Sociologia2.java(70:17-70:24),"v.index"
185,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(70:17-70:18),"v"
186,COMPOUNDSTATEMENT,"",Sociologia2.java(23:18-32:6),"{
	graph=     new Node[n];
	for (int i=0; i<n; i++) 
	    graph[i]= new Node();
	index=     0;
	ctrScc=    0;
	ctrNos=    0;
	stack=    new LinkedList<Node>();
	numNodes = n;
    }"
187,PARAMVARIABLEDECLARATION,"n",Sociologia2.java(23:11-23:16),"int n"
188,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(24:2-24:7),"this"
189,RETURNSTATEMENT,"",,""
190,BINARYOPERATOR,"=",Sociologia2.java(24:2-24:25),"graph=     new Node[n];"
191,FORSTATEMENT,"",Sociologia2.java(25:2-26:27),"for (int i=0; i<n; i++) 
	    graph[i]= new Node();"
192,BINARYOPERATOR,"=",Sociologia2.java(27:2-27:15),"index=     0;"
193,BINARYOPERATOR,"=",Sociologia2.java(28:2-28:15),"ctrScc=    0;"
194,BINARYOPERATOR,"=",Sociologia2.java(29:2-29:15),"ctrNos=    0;"
195,BINARYOPERATOR,"=",Sociologia2.java(30:2-30:35),"stack=    new LinkedList<Node>();"
196,BINARYOPERATOR,"=",Sociologia2.java(31:2-31:15),"numNodes = n;"
197,MEMBEREXPRESSION,"numNodes",Sociologia2.java(31:2-31:10),"numNodes"
198,DECLAREDREFERENCEEXPRESSION,"n",Sociologia2.java(31:13-31:14),"n"
199,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(31:2-31:10),"this"
200,MEMBEREXPRESSION,"graph",Sociologia2.java(24:2-24:7),"graph"
201,ARRAYCREATIONEXPRESSION,"",Sociologia2.java(24:13-24:24),"new Node[n]"
202,LITERAL,"",Sociologia2.java(25:13-25:14),"0"
203,DECLAREDREFERENCEEXPRESSION,"n",Sociologia2.java(24:22-24:23),"n"
204,MEMBEREXPRESSION,"index",Sociologia2.java(27:2-27:7),"index"
205,LITERAL,"",Sociologia2.java(27:13-27:14),"0"
206,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(28:2-28:8),"this"
207,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(27:2-27:7),"this"
208,MEMBEREXPRESSION,"ctrScc",Sociologia2.java(28:2-28:8),"ctrScc"
209,LITERAL,"",Sociologia2.java(28:13-28:14),"0"
210,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(29:2-29:8),"this"
211,MEMBEREXPRESSION,"stack",Sociologia2.java(30:2-30:7),"stack"
212,NEWEXPRESSION,"",Sociologia2.java(30:12-30:34),"new LinkedList<Node>()"
213,CONSTRUCTEXPRESSION,"",Sociologia2.java(30:12-30:34),"new LinkedList<Node>()"
214,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(30:2-30:7),"this"
215,BINARYOPERATOR,"=",Sociologia2.java(26:6-26:27),"graph[i]= new Node();"
216,DECLARATIONSTATEMENT,"",Sociologia2.java(25:7-25:14),"int i=0"
217,BINARYOPERATOR,"<",Sociologia2.java(25:16-25:19),"i<n"
218,UNARYOPERATOR,"++",Sociologia2.java(25:21-25:24),"i++"
219,VARIABLEDECLARATION,"i",Sociologia2.java(25:11-25:14),"i=0"
220,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(26:6-26:11),"this"
221,ARRAYSUBSCRIPTIONEXPRESSION,"",Sociologia2.java(26:6-26:14),"graph[i]"
222,NEWEXPRESSION,"",Sociologia2.java(26:16-26:26),"new Node()"
223,DECLAREDREFERENCEEXPRESSION,"i",Sociologia2.java(25:21-25:22),"i"
224,CONSTRUCTEXPRESSION,"",Sociologia2.java(26:16-26:26),"new Node()"
225,CONSTRUCTORDECLARATION,"Node",Encomenda.java(139:2-141:3),"Node() {
	    edges = new LinkedList<Edge>();
	}"
226,MEMBEREXPRESSION,"graph",Sociologia2.java(26:6-26:11),"graph"
227,DECLAREDREFERENCEEXPRESSION,"i",Sociologia2.java(26:12-26:13),"i"
228,DECLAREDREFERENCEEXPRESSION,"i",Sociologia2.java(25:16-25:17),"i"
229,DECLAREDREFERENCEEXPRESSION,"n",Sociologia2.java(25:18-25:19),"n"
230,MEMBEREXPRESSION,"ctrNos",Sociologia2.java(29:2-29:8),"ctrNos"
231,LITERAL,"",Sociologia2.java(29:13-29:14),"0"
232,VARIABLEDECLARATION,"this",,""
233,COMPOUNDSTATEMENT,"",Sociologia2.java(39:19-50:6),"{
	// these were already initialized at graph creation
	//index= 0;
	//stack= new LinkedList<Integer>();
	//ctrScc= 0;
	//ctrNos= 0;

	for (Node v : graph) {
	    if (v.index==-1)
		dfs(v);
	}
    }"
234,DECLAREDREFERENCEEXPRESSION,"this",Sociologia2.java(46:16-46:21),"this"
235,RETURNSTATEMENT,"",,""
236,FOREACHSTATEMENT,"",Sociologia2.java(46:2-49:3),"for (Node v : graph) {
	    if (v.index==-1)
		dfs(v);
	}"
237,DECLARATIONSTATEMENT,"",Sociologia2.java(46:7-46:13),"Node v"
238,MEMBEREXPRESSION,"graph",Sociologia2.java(46:16-46:21),"graph"
239,COMPOUNDSTATEMENT,"",Sociologia2.java(46:23-49:3),"{
	    if (v.index==-1)
		dfs(v);
	}"
240,VARIABLEDECLARATION,"v",Sociologia2.java(46:12-46:13),"v"
241,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(47:10-47:11),"v"
242,IFSTATEMENT,"",Sociologia2.java(47:6-48:10),"if (v.index==-1)
		dfs(v);"
243,CALLEXPRESSION,"dfs",Sociologia2.java(48:3-48:10),"dfs(v);"
244,BINARYOPERATOR,"==",Sociologia2.java(47:10-47:21),"v.index==-1"
245,DECLAREDREFERENCEEXPRESSION,"v",Sociologia2.java(48:7-48:8),"v"
246,MEMBEREXPRESSION,"index",Sociologia2.java(47:10-47:17),"v.index"
247,UNARYOPERATOR,"-",Sociologia2.java(47:19-47:21),"-1"
248,LITERAL,"",Sociologia2.java(47:20-47:21),"1"
249,UNINITIALIZEDVALUE,"Uninitialized Value",,""
250,FIELDDECLARATION,"this",,""
251,METHODDECLARATION,"main",Sociologia2.java(93:5-116:6),"public static void main(String args[]) {
	Scanner stdin= new Scanner(System.in);
	int c, ncases, n, connections;
	int a, b;
	Graph graph;

	ncases = stdin.nextInt();    // Number of cases
	for (c=0; c<ncases; c++) {
	    n= stdin.nextInt();      // Number of nodes
	    graph = new Graph(n);    // Create a new graph object 
	    for (int j= 0; j<n; j++) {
		a= stdin.nextInt();  // current node
		connections = stdin.nextInt(); // Number of links (successors)
		for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}
	    }
	    // call Tarjan algorithm
	    graph.tarjan();
	    // print the result for case c
	    graph.printResult(c);
	}	
    }"
252,CONSTRUCTORDECLARATION,"Sociologia2",,""
253,VARIABLEDECLARATION,"this",,""
254,COMPOUNDSTATEMENT,"",Sociologia2.java(93:44-116:6),"{
	Scanner stdin= new Scanner(System.in);
	int c, ncases, n, connections;
	int a, b;
	Graph graph;

	ncases = stdin.nextInt();    // Number of cases
	for (c=0; c<ncases; c++) {
	    n= stdin.nextInt();      // Number of nodes
	    graph = new Graph(n);    // Create a new graph object 
	    for (int j= 0; j<n; j++) {
		a= stdin.nextInt();  // current node
		connections = stdin.nextInt(); // Number of links (successors)
		for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}
	    }
	    // call Tarjan algorithm
	    graph.tarjan();
	    // print the result for case c
	    graph.printResult(c);
	}	
    }"
255,PARAMVARIABLEDECLARATION,"args",Sociologia2.java(93:29-93:42),"String args[]"
256,DECLAREDREFERENCEEXPRESSION,"System",Sociologia2.java(94:29-94:35),"System"
257,RETURNSTATEMENT,"",,""
258,DECLARATIONSTATEMENT,"",Sociologia2.java(94:2-94:40),"Scanner stdin= new Scanner(System.in);"
259,DECLARATIONSTATEMENT,"",Sociologia2.java(95:2-95:32),"int c, ncases, n, connections;"
260,DECLARATIONSTATEMENT,"",Sociologia2.java(96:2-96:11),"int a, b;"
261,DECLARATIONSTATEMENT,"",Sociologia2.java(97:2-97:14),"Graph graph;"
262,BINARYOPERATOR,"=",Sociologia2.java(99:2-99:27),"ncases = stdin.nextInt();"
263,FORSTATEMENT,"",Sociologia2.java(100:2-115:3),"for (c=0; c<ncases; c++) {
	    n= stdin.nextInt();      // Number of nodes
	    graph = new Graph(n);    // Create a new graph object 
	    for (int j= 0; j<n; j++) {
		a= stdin.nextInt();  // current node
		connections = stdin.nextInt(); // Number of links (successors)
		for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}
	    }
	    // call Tarjan algorithm
	    graph.tarjan();
	    // print the result for case c
	    graph.printResult(c);
	}"
264,VARIABLEDECLARATION,"stdin",Sociologia2.java(94:10-94:39),"stdin= new Scanner(System.in)"
265,VARIABLEDECLARATION,"c",Sociologia2.java(95:6-95:7),"c"
266,VARIABLEDECLARATION,"ncases",Sociologia2.java(95:9-95:15),"ncases"
267,VARIABLEDECLARATION,"n",Sociologia2.java(95:17-95:18),"n"
268,VARIABLEDECLARATION,"connections",Sociologia2.java(95:20-95:31),"connections"
269,VARIABLEDECLARATION,"a",Sociologia2.java(96:6-96:7),"a"
270,VARIABLEDECLARATION,"b",Sociologia2.java(96:9-96:10),"b"
271,VARIABLEDECLARATION,"graph",Sociologia2.java(97:8-97:13),"graph"
272,DECLAREDREFERENCEEXPRESSION,"ncases",Sociologia2.java(99:2-99:8),"ncases"
273,UNINITIALIZEDVALUE,"Uninitialized Value",,""
274,UNINITIALIZEDVALUE,"Uninitialized Value",,""
275,UNINITIALIZEDVALUE,"Uninitialized Value",,""
276,UNINITIALIZEDVALUE,"Uninitialized Value",,""
277,NEWEXPRESSION,"",Sociologia2.java(94:17-94:39),"new Scanner(System.in)"
278,CONSTRUCTEXPRESSION,"",Sociologia2.java(94:17-94:39),"new Scanner(System.in)"
279,MEMBEREXPRESSION,"in",Sociologia2.java(94:29-94:38),"System.in"
280,UNINITIALIZEDVALUE,"Uninitialized Value",,""
281,MEMBERCALLEXPRESSION,"nextInt",Sociologia2.java(99:11-99:26),"stdin.nextInt()"
282,DECLAREDREFERENCEEXPRESSION,"c",Sociologia2.java(100:7-100:8),"c"
283,DECLAREDREFERENCEEXPRESSION,"nextInt",Sociologia2.java(99:17-99:24),"nextInt"
284,DECLAREDREFERENCEEXPRESSION,"stdin",Sociologia2.java(99:11-99:16),"stdin"
285,UNINITIALIZEDVALUE,"Uninitialized Value",,""
286,UNINITIALIZEDVALUE,"Uninitialized Value",,""
287,COMPOUNDSTATEMENT,"",Sociologia2.java(100:27-115:3),"{
	    n= stdin.nextInt();      // Number of nodes
	    graph = new Graph(n);    // Create a new graph object 
	    for (int j= 0; j<n; j++) {
		a= stdin.nextInt();  // current node
		connections = stdin.nextInt(); // Number of links (successors)
		for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}
	    }
	    // call Tarjan algorithm
	    graph.tarjan();
	    // print the result for case c
	    graph.printResult(c);
	}"
288,BINARYOPERATOR,"=",Sociologia2.java(100:7-100:10),"c=0"
289,BINARYOPERATOR,"<",Sociologia2.java(100:12-100:20),"c<ncases"
290,UNARYOPERATOR,"++",Sociologia2.java(100:22-100:25),"c++"
291,DECLAREDREFERENCEEXPRESSION,"n",Sociologia2.java(101:6-101:7),"n"
292,BINARYOPERATOR,"=",Sociologia2.java(101:6-101:25),"n= stdin.nextInt();"
293,BINARYOPERATOR,"=",Sociologia2.java(102:6-102:27),"graph = new Graph(n);"
294,FORSTATEMENT,"",Sociologia2.java(103:6-110:7),"for (int j= 0; j<n; j++) {
		a= stdin.nextInt();  // current node
		connections = stdin.nextInt(); // Number of links (successors)
		for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}
	    }"
295,MEMBERCALLEXPRESSION,"tarjan",Sociologia2.java(112:6-112:21),"graph.tarjan();"
296,MEMBERCALLEXPRESSION,"printResult",Sociologia2.java(114:6-114:27),"graph.printResult(c);"
297,DECLAREDREFERENCEEXPRESSION,"c",Sociologia2.java(100:22-100:23),"c"
298,COMPOUNDSTATEMENT,"",Sociologia2.java(103:31-110:7),"{
		a= stdin.nextInt();  // current node
		connections = stdin.nextInt(); // Number of links (successors)
		for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}
	    }"
299,DECLARATIONSTATEMENT,"",Sociologia2.java(103:11-103:19),"int j= 0"
300,BINARYOPERATOR,"<",Sociologia2.java(103:21-103:24),"j<n"
301,UNARYOPERATOR,"++",Sociologia2.java(103:26-103:29),"j++"
302,VARIABLEDECLARATION,"j",Sociologia2.java(103:15-103:19),"j= 0"
303,DECLAREDREFERENCEEXPRESSION,"a",Sociologia2.java(104:3-104:4),"a"
304,DECLAREDREFERENCEEXPRESSION,"graph",Sociologia2.java(112:6-112:11),"graph"
305,LITERAL,"",Sociologia2.java(103:18-103:19),"0"
306,DECLAREDREFERENCEEXPRESSION,"j",Sociologia2.java(103:26-103:27),"j"
307,DECLAREDREFERENCEEXPRESSION,"j",Sociologia2.java(103:21-103:22),"j"
308,BINARYOPERATOR,"=",Sociologia2.java(104:3-104:22),"a= stdin.nextInt();"
309,BINARYOPERATOR,"=",Sociologia2.java(105:3-105:33),"connections = stdin.nextInt();"
310,FORSTATEMENT,"",Sociologia2.java(106:3-109:4),"for (int i=0; i<connections; i++) {
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}"
311,DECLAREDREFERENCEEXPRESSION,"connections",Sociologia2.java(105:3-105:14),"connections"
312,MEMBERCALLEXPRESSION,"nextInt",Sociologia2.java(105:17-105:32),"stdin.nextInt()"
313,LITERAL,"",Sociologia2.java(106:14-106:15),"0"
314,DECLAREDREFERENCEEXPRESSION,"nextInt",Sociologia2.java(105:23-105:30),"nextInt"
315,DECLAREDREFERENCEEXPRESSION,"stdin",Sociologia2.java(105:17-105:22),"stdin"
316,COMPOUNDSTATEMENT,"",Sociologia2.java(106:37-109:4),"{
		    b = stdin.nextInt();      // link or successor
		    graph.addConnection(a,b); // connect a to b (directed graph)
		}"
317,DECLARATIONSTATEMENT,"",Sociologia2.java(106:8-106:15),"int i=0"
318,BINARYOPERATOR,"<",Sociologia2.java(106:17-106:30),"i<connections"
319,UNARYOPERATOR,"++",Sociologia2.java(106:32-106:35),"i++"
320,VARIABLEDECLARATION,"i",Sociologia2.java(106:12-106:15),"i=0"
321,DECLAREDREFERENCEEXPRESSION,"b",Sociologia2.java(107:7-107:8),"b"
322,BINARYOPERATOR,"=",Sociologia2.java(107:7-107:27),"b = stdin.nextInt();"
323,MEMBERCALLEXPRESSION,"addConnection",Sociologia2.java(108:7-108:32),"graph.addConnection(a,b);"
324,DECLAREDREFERENCEEXPRESSION,"i",Sociologia2.java(106:32-106:33),"i"
325,DECLAREDREFERENCEEXPRESSION,"addConnection",Sociologia2.java(108:13-108:26),"addConnection"
326,METHODDECLARATION,"addConnection",,""
327,DECLAREDREFERENCEEXPRESSION,"b",Sociologia2.java(108:29-108:30),"b"
328,PARAMVARIABLEDECLARATION,"int1",,""
329,DECLAREDREFERENCEEXPRESSION,"a",Sociologia2.java(108:27-108:28),"a"
330,PARAMVARIABLEDECLARATION,"int0",,""
331,DECLAREDREFERENCEEXPRESSION,"graph",Sociologia2.java(108:7-108:12),"graph"
332,MEMBERCALLEXPRESSION,"nextInt",Sociologia2.java(107:11-107:26),"stdin.nextInt()"
333,DECLAREDREFERENCEEXPRESSION,"stdin",Sociologia2.java(107:11-107:16),"stdin"
334,DECLAREDREFERENCEEXPRESSION,"nextInt",Sociologia2.java(107:17-107:24),"nextInt"
335,DECLAREDREFERENCEEXPRESSION,"i",Sociologia2.java(106:17-106:18),"i"
336,DECLAREDREFERENCEEXPRESSION,"connections",Sociologia2.java(106:19-106:30),"connections"
337,MEMBERCALLEXPRESSION,"nextInt",Sociologia2.java(104:6-104:21),"stdin.nextInt()"
338,DECLAREDREFERENCEEXPRESSION,"stdin",Sociologia2.java(104:6-104:11),"stdin"
339,DECLAREDREFERENCEEXPRESSION,"nextInt",Sociologia2.java(104:12-104:19),"nextInt"
340,DECLAREDREFERENCEEXPRESSION,"n",Sociologia2.java(103:23-103:24),"n"
341,DECLAREDREFERENCEEXPRESSION,"tarjan",Sociologia2.java(112:12-112:18),"tarjan"
342,METHODDECLARATION,"tarjan",,""
343,DECLAREDREFERENCEEXPRESSION,"graph",Sociologia2.java(114:6-114:11),"graph"
344,MEMBERCALLEXPRESSION,"nextInt",Sociologia2.java(101:9-101:24),"stdin.nextInt()"
345,DECLAREDREFERENCEEXPRESSION,"graph",Sociologia2.java(102:6-102:11),"graph"
346,DECLAREDREFERENCEEXPRESSION,"nextInt",Sociologia2.java(101:15-101:22),"nextInt"
347,DECLAREDREFERENCEEXPRESSION,"stdin",Sociologia2.java(101:9-101:14),"stdin"
348,NEWEXPRESSION,"",Sociologia2.java(102:14-102:26),"new Graph(n)"
349,DECLAREDREFERENCEEXPRESSION,"n",Sociologia2.java(102:24-102:25),"n"
350,CONSTRUCTEXPRESSION,"",Sociologia2.java(102:14-102:26),"new Graph(n)"
351,CONSTRUCTORDECLARATION,"Graph",Prob19.java(28:5-33:6),"Graph(int n) {
	this.n = n;
	nodes  = new Node[n+1]; // +1 se os comecam em 1 ao inves de 0
	for (int i=1; i<=n; i++)
	    nodes[i] = new Node();
    }"
352,PARAMVARIABLEDECLARATION,"n",Prob19.java(28:11-28:16),"int n"
353,DECLAREDREFERENCEEXPRESSION,"printResult",Sociologia2.java(114:12-114:23),"printResult"
354,METHODDECLARATION,"printResult",,""
355,DECLAREDREFERENCEEXPRESSION,"c",Sociologia2.java(114:24-114:25),"c"
356,PARAMVARIABLEDECLARATION,"int0",,""
357,LITERAL,"",Sociologia2.java(100:9-100:10),"0"
358,DECLAREDREFERENCEEXPRESSION,"c",Sociologia2.java(100:12-100:13),"c"
359,DECLAREDREFERENCEEXPRESSION,"ncases",Sociologia2.java(100:14-100:20),"ncases"
