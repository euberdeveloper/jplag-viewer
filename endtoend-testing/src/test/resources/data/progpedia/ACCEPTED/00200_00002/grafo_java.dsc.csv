id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000019/submissions/05756772_Sociologia_100307015/Grafo.java",,""
2,RECORDDECLARATION,"Edge",Grafo.java(3:1-9:2),"class Edge {
	int outro;

	Edge(int w) {
		outro = w;
	}
}"
3,RECORDDECLARATION,"Node",Grafo.java(11:1-20:2),"class Node {
	LinkedList<Edge> adj;
	boolean visitado;

	Node() {
		adj = new LinkedList<Edge>();
		visitado = false;
	}

}"
4,RECORDDECLARATION,"Grafo",Grafo.java(22:1-166:2),"class Grafo {
	final int V;
	int E;
	Node[] nos;
	int color[];
	//int pred[];
	int cor[];

	Grafo(int v) {
		V = v;
		E = 0;
		nos = new Node[V + 1];
		for (int i = 1; i < V + 1; i++)
			nos[i] = new Node();
		//pred = new int[V + 1];
		color = new int[V + 1];
		cor = new int[V + 1];
	}

	public void addEdge(int v, int w) {
		nos[v].adj.addFirst(new Edge(w));
		E++;
	}

	public void totxt() {
		System.out.println(""V: "" + V + "" "" + ""E: "" + E);
		for (int i = 1; i < V + 1; i++) {
			System.out.print(i + "": "");
			for (Edge e : nos[i].adj) {
				System.out.print(e.outro + ""|"");
			}
			System.out.println();
		}

	}

	LinkedList<Integer> s = new LinkedList<Integer>();

	public void DFS() {

		for (int i = 1; i < V + 1; i++) {
			color[i] = 0; // 0 white 1 gray 2 black
			//pred[i] = 0;
		}
		for (int i = 1; i < V + 1; i++) {
			if (color[i] == 0)
				VDFS(i);
		}
		// for (int i = 1; i < V + 1; i++)
		// System.out.print(pred[i] + ""_"" + i + "" "");
		// System.out.println();

		//System.out.println(s.toString());

	}

	public void VDFS(int u) {
		color[u] = 1;
		for (Edge e : nos[u].adj) {
			if (color[e.outro] == 0) {
				//pred[e.outro] = u;
				VDFS(e.outro);
			}

		}
		s.push(u);
		color[u] = 2;

	}

	public void dfs2(Grafo R, int r) {
		cor[r] = 1;

		for (Edge e : R.nos[r].adj) {
			if (cor[e.outro] == 0 && R.nos[e.outro].visitado == false) {
				dfs2(R, e.outro);
			}
		}
		path.addLast(r);
		R.nos[r].visitado = true;
		cor[r] = 2;
		
	}

	public Grafo reverse() {
		Grafo R = new Grafo(V);
		for (int v = 1; v < V + 1; v++) {
			for (Edge w : nos[v].adj) {
				R.addEdge(w.outro, v);
			}
		}
		return R;
	}
	LinkedList<Integer> path;
	public void Kosajaru(Grafo R, int ni) {
		
		int v;
		int r1=0 ,r2=0;
		while (!s.isEmpty()) {
			path = new LinkedList<Integer>();
			v = s.pop();
			dfs2(R,v);
			//System.out.println(""-""+path.toString());
			if (path.size()>=4)
				r1++;
			else
				r2=r2 + path.size();
			while (!path.isEmpty()){
				s.remove(path.removeLast());
			}
		}
		System.out.println(""Caso #""+ni);
		System.out.println(r1+"" ""+r2);
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int nc, na, id, nf, fid;

		nc = in.nextInt();
		for (int i = 0; i < nc; i++) {
			na = in.nextInt();
			Grafo G = new Grafo(na);
			for (int j = 0; j < na; j++) {
				id = in.nextInt();
				nf = in.nextInt();
				for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}
			}
			// G.totxt();
			// System.out.println(""___________________"");
			G.DFS();
			 G.Kosajaru(G.reverse(),i+1);
			// Grafo R;
			// R=G.reverse();
			// R.totxt();
			// System.out.println(""-------------"");
			// R.DFS();
		}

	}

}"
5,INCLUDEDECLARATION,"java.util",,""
6,FIELDDECLARATION,"this",,""
7,FIELDDECLARATION,"outro",Grafo.java(4:2-4:12),"outro"
8,CONSTRUCTORDECLARATION,"Edge",Grafo.java(6:2-8:3),"Edge(int w) {
		outro = w;
	}"
9,COMPOUNDSTATEMENT,"",Grafo.java(6:14-8:3),"{
		outro = w;
	}"
10,PARAMVARIABLEDECLARATION,"w",Grafo.java(6:7-6:12),"int w"
11,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(7:3-7:8),"this"
12,RETURNSTATEMENT,"",,""
13,BINARYOPERATOR,"=",Grafo.java(7:3-7:13),"outro = w;"
14,MEMBEREXPRESSION,"outro",Grafo.java(7:3-7:8),"outro"
15,DECLAREDREFERENCEEXPRESSION,"w",Grafo.java(7:11-7:12),"w"
16,FIELDDECLARATION,"this",,""
17,FIELDDECLARATION,"V",Grafo.java(23:2-23:14),"V"
18,FIELDDECLARATION,"E",Grafo.java(24:2-24:8),"E"
19,FIELDDECLARATION,"nos",Grafo.java(25:2-25:13),"nos"
20,FIELDDECLARATION,"color",Grafo.java(26:2-26:14),"color"
21,FIELDDECLARATION,"cor",Grafo.java(28:2-28:12),"cor"
22,FIELDDECLARATION,"s",Grafo.java(58:2-58:52),"s = new LinkedList<Integer>()"
23,FIELDDECLARATION,"path",Grafo.java(115:2-115:27),"path"
24,METHODDECLARATION,"addEdge",Grafo.java(41:2-44:3),"public void addEdge(int v, int w) {
		nos[v].adj.addFirst(new Edge(w));
		E++;
	}"
25,METHODDECLARATION,"totxt",Grafo.java(46:2-56:3),"public void totxt() {
		System.out.println(""V: "" + V + "" "" + ""E: "" + E);
		for (int i = 1; i < V + 1; i++) {
			System.out.print(i + "": "");
			for (Edge e : nos[i].adj) {
				System.out.print(e.outro + ""|"");
			}
			System.out.println();
		}

	}"
26,METHODDECLARATION,"DFS",Grafo.java(60:2-76:3),"public void DFS() {

		for (int i = 1; i < V + 1; i++) {
			color[i] = 0; // 0 white 1 gray 2 black
			//pred[i] = 0;
		}
		for (int i = 1; i < V + 1; i++) {
			if (color[i] == 0)
				VDFS(i);
		}
		// for (int i = 1; i < V + 1; i++)
		// System.out.print(pred[i] + ""_"" + i + "" "");
		// System.out.println();

		//System.out.println(s.toString());

	}"
27,METHODDECLARATION,"VDFS",Grafo.java(78:2-90:3),"public void VDFS(int u) {
		color[u] = 1;
		for (Edge e : nos[u].adj) {
			if (color[e.outro] == 0) {
				//pred[e.outro] = u;
				VDFS(e.outro);
			}

		}
		s.push(u);
		color[u] = 2;

	}"
28,METHODDECLARATION,"dfs2",Grafo.java(92:2-104:3),"public void dfs2(Grafo R, int r) {
		cor[r] = 1;

		for (Edge e : R.nos[r].adj) {
			if (cor[e.outro] == 0 && R.nos[e.outro].visitado == false) {
				dfs2(R, e.outro);
			}
		}
		path.addLast(r);
		R.nos[r].visitado = true;
		cor[r] = 2;
		
	}"
29,METHODDECLARATION,"reverse",Grafo.java(106:2-114:3),"public Grafo reverse() {
		Grafo R = new Grafo(V);
		for (int v = 1; v < V + 1; v++) {
			for (Edge w : nos[v].adj) {
				R.addEdge(w.outro, v);
			}
		}
		return R;
	}"
30,METHODDECLARATION,"Kosajaru",Grafo.java(116:2-135:3),"public void Kosajaru(Grafo R, int ni) {
		
		int v;
		int r1=0 ,r2=0;
		while (!s.isEmpty()) {
			path = new LinkedList<Integer>();
			v = s.pop();
			dfs2(R,v);
			//System.out.println(""-""+path.toString());
			if (path.size()>=4)
				r1++;
			else
				r2=r2 + path.size();
			while (!path.isEmpty()){
				s.remove(path.removeLast());
			}
		}
		System.out.println(""Caso #""+ni);
		System.out.println(r1+"" ""+r2);
	}"
31,METHODDECLARATION,"main",Grafo.java(137:2-164:3),"public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int nc, na, id, nf, fid;

		nc = in.nextInt();
		for (int i = 0; i < nc; i++) {
			na = in.nextInt();
			Grafo G = new Grafo(na);
			for (int j = 0; j < na; j++) {
				id = in.nextInt();
				nf = in.nextInt();
				for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}
			}
			// G.totxt();
			// System.out.println(""___________________"");
			G.DFS();
			 G.Kosajaru(G.reverse(),i+1);
			// Grafo R;
			// R=G.reverse();
			// R.totxt();
			// System.out.println(""-------------"");
			// R.DFS();
		}

	}"
32,CONSTRUCTORDECLARATION,"Grafo",Grafo.java(30:2-39:3),"Grafo(int v) {
		V = v;
		E = 0;
		nos = new Node[V + 1];
		for (int i = 1; i < V + 1; i++)
			nos[i] = new Node();
		//pred = new int[V + 1];
		color = new int[V + 1];
		cor = new int[V + 1];
	}"
33,VARIABLEDECLARATION,"this",,""
34,COMPOUNDSTATEMENT,"",Grafo.java(137:41-164:3),"{
		Scanner in = new Scanner(System.in);
		int nc, na, id, nf, fid;

		nc = in.nextInt();
		for (int i = 0; i < nc; i++) {
			na = in.nextInt();
			Grafo G = new Grafo(na);
			for (int j = 0; j < na; j++) {
				id = in.nextInt();
				nf = in.nextInt();
				for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}
			}
			// G.totxt();
			// System.out.println(""___________________"");
			G.DFS();
			 G.Kosajaru(G.reverse(),i+1);
			// Grafo R;
			// R=G.reverse();
			// R.totxt();
			// System.out.println(""-------------"");
			// R.DFS();
		}

	}"
35,PARAMVARIABLEDECLARATION,"args",Grafo.java(137:26-137:39),"String[] args"
36,DECLAREDREFERENCEEXPRESSION,"System",Grafo.java(138:28-138:34),"System"
37,RETURNSTATEMENT,"",,""
38,DECLARATIONSTATEMENT,"",Grafo.java(138:3-138:39),"Scanner in = new Scanner(System.in);"
39,DECLARATIONSTATEMENT,"",Grafo.java(139:3-139:27),"int nc, na, id, nf, fid;"
40,BINARYOPERATOR,"=",Grafo.java(141:3-141:21),"nc = in.nextInt();"
41,FORSTATEMENT,"",Grafo.java(142:3-162:4),"for (int i = 0; i < nc; i++) {
			na = in.nextInt();
			Grafo G = new Grafo(na);
			for (int j = 0; j < na; j++) {
				id = in.nextInt();
				nf = in.nextInt();
				for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}
			}
			// G.totxt();
			// System.out.println(""___________________"");
			G.DFS();
			 G.Kosajaru(G.reverse(),i+1);
			// Grafo R;
			// R=G.reverse();
			// R.totxt();
			// System.out.println(""-------------"");
			// R.DFS();
		}"
42,VARIABLEDECLARATION,"in",Grafo.java(138:11-138:38),"in = new Scanner(System.in)"
43,VARIABLEDECLARATION,"nc",Grafo.java(139:7-139:9),"nc"
44,VARIABLEDECLARATION,"na",Grafo.java(139:11-139:13),"na"
45,VARIABLEDECLARATION,"id",Grafo.java(139:15-139:17),"id"
46,VARIABLEDECLARATION,"nf",Grafo.java(139:19-139:21),"nf"
47,VARIABLEDECLARATION,"fid",Grafo.java(139:23-139:26),"fid"
48,UNINITIALIZEDVALUE,"Uninitialized Value",,""
49,UNINITIALIZEDVALUE,"Uninitialized Value",,""
50,NEWEXPRESSION,"",Grafo.java(138:16-138:38),"new Scanner(System.in)"
51,CONSTRUCTEXPRESSION,"",Grafo.java(138:16-138:38),"new Scanner(System.in)"
52,MEMBEREXPRESSION,"in",Grafo.java(138:28-138:37),"System.in"
53,UNINITIALIZEDVALUE,"Uninitialized Value",,""
54,DECLAREDREFERENCEEXPRESSION,"nc",Grafo.java(141:3-141:5),"nc"
55,MEMBERCALLEXPRESSION,"nextInt",Grafo.java(141:8-141:20),"in.nextInt()"
56,LITERAL,"",Grafo.java(142:16-142:17),"0"
57,DECLAREDREFERENCEEXPRESSION,"in",Grafo.java(141:8-141:10),"in"
58,DECLAREDREFERENCEEXPRESSION,"nextInt",Grafo.java(141:11-141:18),"nextInt"
59,UNINITIALIZEDVALUE,"Uninitialized Value",,""
60,UNINITIALIZEDVALUE,"Uninitialized Value",,""
61,COMPOUNDSTATEMENT,"",Grafo.java(142:32-162:4),"{
			na = in.nextInt();
			Grafo G = new Grafo(na);
			for (int j = 0; j < na; j++) {
				id = in.nextInt();
				nf = in.nextInt();
				for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}
			}
			// G.totxt();
			// System.out.println(""___________________"");
			G.DFS();
			 G.Kosajaru(G.reverse(),i+1);
			// Grafo R;
			// R=G.reverse();
			// R.totxt();
			// System.out.println(""-------------"");
			// R.DFS();
		}"
62,DECLARATIONSTATEMENT,"",Grafo.java(142:8-142:17),"int i = 0"
63,BINARYOPERATOR,"<",Grafo.java(142:19-142:25),"i < nc"
64,UNARYOPERATOR,"++",Grafo.java(142:27-142:30),"i++"
65,VARIABLEDECLARATION,"i",Grafo.java(142:12-142:17),"i = 0"
66,DECLAREDREFERENCEEXPRESSION,"na",Grafo.java(143:4-143:6),"na"
67,BINARYOPERATOR,"=",Grafo.java(143:4-143:22),"na = in.nextInt();"
68,DECLARATIONSTATEMENT,"",Grafo.java(144:4-144:28),"Grafo G = new Grafo(na);"
69,FORSTATEMENT,"",Grafo.java(145:4-152:5),"for (int j = 0; j < na; j++) {
				id = in.nextInt();
				nf = in.nextInt();
				for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}
			}"
70,MEMBERCALLEXPRESSION,"DFS",Grafo.java(155:4-155:12),"G.DFS();"
71,MEMBERCALLEXPRESSION,"Kosajaru",Grafo.java(156:5-156:33),"G.Kosajaru(G.reverse(),i+1);"
72,VARIABLEDECLARATION,"G",Grafo.java(144:10-144:27),"G = new Grafo(na)"
73,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(142:27-142:28),"i"
74,LITERAL,"",Grafo.java(145:17-145:18),"0"
75,DECLAREDREFERENCEEXPRESSION,"DFS",Grafo.java(155:6-155:9),"DFS"
76,METHODDECLARATION,"DFS",,""
77,DECLAREDREFERENCEEXPRESSION,"G",Grafo.java(156:5-156:6),"G"
78,DECLAREDREFERENCEEXPRESSION,"G",Grafo.java(155:4-155:5),"G"
79,COMPOUNDSTATEMENT,"",Grafo.java(145:33-152:5),"{
				id = in.nextInt();
				nf = in.nextInt();
				for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}
			}"
80,DECLARATIONSTATEMENT,"",Grafo.java(145:9-145:18),"int j = 0"
81,BINARYOPERATOR,"<",Grafo.java(145:20-145:26),"j < na"
82,UNARYOPERATOR,"++",Grafo.java(145:28-145:31),"j++"
83,VARIABLEDECLARATION,"j",Grafo.java(145:13-145:18),"j = 0"
84,DECLAREDREFERENCEEXPRESSION,"id",Grafo.java(146:5-146:7),"id"
85,DECLAREDREFERENCEEXPRESSION,"j",Grafo.java(145:20-145:21),"j"
86,DECLAREDREFERENCEEXPRESSION,"j",Grafo.java(145:28-145:29),"j"
87,BINARYOPERATOR,"=",Grafo.java(146:5-146:23),"id = in.nextInt();"
88,BINARYOPERATOR,"=",Grafo.java(147:5-147:23),"nf = in.nextInt();"
89,FORSTATEMENT,"",Grafo.java(148:5-151:6),"for (int t = 0; t < nf; t++) {
					fid = in.nextInt();
					G.addEdge(id, fid);
				}"
90,COMPOUNDSTATEMENT,"",Grafo.java(148:34-151:6),"{
					fid = in.nextInt();
					G.addEdge(id, fid);
				}"
91,DECLARATIONSTATEMENT,"",Grafo.java(148:10-148:19),"int t = 0"
92,BINARYOPERATOR,"<",Grafo.java(148:21-148:27),"t < nf"
93,UNARYOPERATOR,"++",Grafo.java(148:29-148:32),"t++"
94,VARIABLEDECLARATION,"t",Grafo.java(148:14-148:19),"t = 0"
95,DECLAREDREFERENCEEXPRESSION,"fid",Grafo.java(149:6-149:9),"fid"
96,DECLAREDREFERENCEEXPRESSION,"t",Grafo.java(148:21-148:22),"t"
97,DECLAREDREFERENCEEXPRESSION,"t",Grafo.java(148:29-148:30),"t"
98,BINARYOPERATOR,"=",Grafo.java(149:6-149:25),"fid = in.nextInt();"
99,MEMBERCALLEXPRESSION,"addEdge",Grafo.java(150:6-150:25),"G.addEdge(id, fid);"
100,MEMBERCALLEXPRESSION,"nextInt",Grafo.java(149:12-149:24),"in.nextInt()"
101,DECLAREDREFERENCEEXPRESSION,"G",Grafo.java(150:6-150:7),"G"
102,DECLAREDREFERENCEEXPRESSION,"nextInt",Grafo.java(149:15-149:22),"nextInt"
103,DECLAREDREFERENCEEXPRESSION,"in",Grafo.java(149:12-149:14),"in"
104,DECLAREDREFERENCEEXPRESSION,"addEdge",Grafo.java(150:8-150:15),"addEdge"
105,METHODDECLARATION,"addEdge",,""
106,DECLAREDREFERENCEEXPRESSION,"fid",Grafo.java(150:20-150:23),"fid"
107,PARAMVARIABLEDECLARATION,"int1",,""
108,DECLAREDREFERENCEEXPRESSION,"id",Grafo.java(150:16-150:18),"id"
109,PARAMVARIABLEDECLARATION,"int0",,""
110,LITERAL,"",Grafo.java(148:18-148:19),"0"
111,DECLAREDREFERENCEEXPRESSION,"nf",Grafo.java(148:25-148:27),"nf"
112,MEMBERCALLEXPRESSION,"nextInt",Grafo.java(146:10-146:22),"in.nextInt()"
113,DECLAREDREFERENCEEXPRESSION,"nf",Grafo.java(147:5-147:7),"nf"
114,DECLAREDREFERENCEEXPRESSION,"nextInt",Grafo.java(146:13-146:20),"nextInt"
115,DECLAREDREFERENCEEXPRESSION,"in",Grafo.java(146:10-146:12),"in"
116,MEMBERCALLEXPRESSION,"nextInt",Grafo.java(147:10-147:22),"in.nextInt()"
117,DECLAREDREFERENCEEXPRESSION,"nextInt",Grafo.java(147:13-147:20),"nextInt"
118,DECLAREDREFERENCEEXPRESSION,"in",Grafo.java(147:10-147:12),"in"
119,DECLAREDREFERENCEEXPRESSION,"na",Grafo.java(145:24-145:26),"na"
120,DECLAREDREFERENCEEXPRESSION,"Kosajaru",Grafo.java(156:7-156:15),"Kosajaru"
121,METHODDECLARATION,"Kosajaru",,""
122,BINARYOPERATOR,"+",Grafo.java(156:28-156:31),"i+1"
123,MEMBERCALLEXPRESSION,"reverse",Grafo.java(156:16-156:27),"G.reverse()"
124,DECLAREDREFERENCEEXPRESSION,"reverse",Grafo.java(156:18-156:25),"reverse"
125,METHODDECLARATION,"reverse",,""
126,PARAMVARIABLEDECLARATION,"grafo0",,""
127,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(156:28-156:29),"i"
128,DECLAREDREFERENCEEXPRESSION,"G",Grafo.java(156:16-156:17),"G"
129,LITERAL,"",Grafo.java(156:30-156:31),"1"
130,PARAMVARIABLEDECLARATION,"unknown1",,""
131,MEMBERCALLEXPRESSION,"nextInt",Grafo.java(143:9-143:21),"in.nextInt()"
132,DECLAREDREFERENCEEXPRESSION,"na",Grafo.java(144:24-144:26),"na"
133,DECLAREDREFERENCEEXPRESSION,"in",Grafo.java(143:9-143:11),"in"
134,DECLAREDREFERENCEEXPRESSION,"nextInt",Grafo.java(143:12-143:19),"nextInt"
135,NEWEXPRESSION,"",Grafo.java(144:14-144:27),"new Grafo(na)"
136,CONSTRUCTEXPRESSION,"",Grafo.java(144:14-144:27),"new Grafo(na)"
137,CONSTRUCTORDECLARATION,"Grafo",main.java(180:2-187:3),"public Grafo(int n) {
		nvs = n;
		narcos = 0;
		verts = new No[n + 1];
		for (int i = 0; i <= n; i++)
			verts[i] = new No();
		// para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
	}"
138,PARAMVARIABLEDECLARATION,"n",main.java(180:15-180:20),"int n"
139,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(142:19-142:20),"i"
140,DECLAREDREFERENCEEXPRESSION,"nc",Grafo.java(142:23-142:25),"nc"
141,NEWEXPRESSION,"",Grafo.java(58:26-58:51),"new LinkedList<Integer>()"
142,CONSTRUCTEXPRESSION,"",Grafo.java(58:26-58:51),"new LinkedList<Integer>()"
143,VARIABLEDECLARATION,"this",,""
144,COMPOUNDSTATEMENT,"",Grafo.java(46:22-56:3),"{
		System.out.println(""V: "" + V + "" "" + ""E: "" + E);
		for (int i = 1; i < V + 1; i++) {
			System.out.print(i + "": "");
			for (Edge e : nos[i].adj) {
				System.out.print(e.outro + ""|"");
			}
			System.out.println();
		}

	}"
145,DECLAREDREFERENCEEXPRESSION,"System",Grafo.java(47:3-47:9),"System"
146,RETURNSTATEMENT,"",,""
147,MEMBERCALLEXPRESSION,"println",Grafo.java(47:3-47:51),"System.out.println(""V: "" + V + "" "" + ""E: "" + E);"
148,FORSTATEMENT,"",Grafo.java(48:3-54:4),"for (int i = 1; i < V + 1; i++) {
			System.out.print(i + "": "");
			for (Edge e : nos[i].adj) {
				System.out.print(e.outro + ""|"");
			}
			System.out.println();
		}"
149,DECLAREDREFERENCEEXPRESSION,"println",Grafo.java(47:14-47:21),"println"
150,LITERAL,"",Grafo.java(48:16-48:17),"1"
151,BINARYOPERATOR,"+",Grafo.java(47:22-47:49),"""V: "" + V + "" "" + ""E: "" + E"
152,MEMBEREXPRESSION,"out",Grafo.java(47:3-47:13),"System.out"
153,LITERAL,"",Grafo.java(47:22-47:27),"""V: """
154,BINARYOPERATOR,"+",Grafo.java(47:22-47:45),"""V: "" + V + "" "" + ""E: """
155,MEMBEREXPRESSION,"E",Grafo.java(47:48-47:49),"E"
156,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(47:48-47:49),"this"
157,BINARYOPERATOR,"+",Grafo.java(47:22-47:37),"""V: "" + V + "" """
158,LITERAL,"",Grafo.java(47:40-47:45),"""E: """
159,BINARYOPERATOR,"+",Grafo.java(47:22-47:31),"""V: "" + V"
160,LITERAL,"",Grafo.java(47:34-47:37),""" """
161,MEMBEREXPRESSION,"V",Grafo.java(47:30-47:31),"V"
162,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(47:30-47:31),"this"
163,COMPOUNDSTATEMENT,"",Grafo.java(48:35-54:4),"{
			System.out.print(i + "": "");
			for (Edge e : nos[i].adj) {
				System.out.print(e.outro + ""|"");
			}
			System.out.println();
		}"
164,DECLARATIONSTATEMENT,"",Grafo.java(48:8-48:17),"int i = 1"
165,BINARYOPERATOR,"<",Grafo.java(48:19-48:28),"i < V + 1"
166,UNARYOPERATOR,"++",Grafo.java(48:30-48:33),"i++"
167,VARIABLEDECLARATION,"i",Grafo.java(48:12-48:17),"i = 1"
168,DECLAREDREFERENCEEXPRESSION,"System",Grafo.java(49:4-49:10),"System"
169,MEMBERCALLEXPRESSION,"print",Grafo.java(49:4-49:31),"System.out.print(i + "": "");"
170,FOREACHSTATEMENT,"",Grafo.java(50:4-52:5),"for (Edge e : nos[i].adj) {
				System.out.print(e.outro + ""|"");
			}"
171,MEMBERCALLEXPRESSION,"println",Grafo.java(53:4-53:25),"System.out.println();"
172,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(48:30-48:31),"i"
173,DECLAREDREFERENCEEXPRESSION,"print",Grafo.java(49:15-49:20),"print"
174,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(50:18-50:21),"this"
175,BINARYOPERATOR,"+",Grafo.java(49:21-49:29),"i + "": """
176,MEMBEREXPRESSION,"out",Grafo.java(49:4-49:14),"System.out"
177,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(49:21-49:22),"i"
178,LITERAL,"",Grafo.java(49:25-49:29),""": """
179,DECLARATIONSTATEMENT,"",Grafo.java(50:9-50:15),"Edge e"
180,MEMBEREXPRESSION,"adj",Grafo.java(50:18-50:28),"nos[i].adj"
181,COMPOUNDSTATEMENT,"",Grafo.java(50:30-52:5),"{
				System.out.print(e.outro + ""|"");
			}"
182,VARIABLEDECLARATION,"e",Grafo.java(50:14-50:15),"e"
183,DECLAREDREFERENCEEXPRESSION,"System",Grafo.java(51:5-51:11),"System"
184,DECLAREDREFERENCEEXPRESSION,"System",Grafo.java(53:4-53:10),"System"
185,UNINITIALIZEDVALUE,"Uninitialized Value",,""
186,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(50:18-50:24),"nos[i]"
187,MEMBEREXPRESSION,"nos",Grafo.java(50:18-50:21),"nos"
188,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(50:22-50:23),"i"
189,MEMBERCALLEXPRESSION,"print",Grafo.java(51:5-51:37),"System.out.print(e.outro + ""|"");"
190,DECLAREDREFERENCEEXPRESSION,"print",Grafo.java(51:16-51:21),"print"
191,BINARYOPERATOR,"+",Grafo.java(51:22-51:35),"e.outro + ""|"""
192,MEMBEREXPRESSION,"out",Grafo.java(51:5-51:15),"System.out"
193,DECLAREDREFERENCEEXPRESSION,"e",Grafo.java(51:22-51:23),"e"
194,MEMBEREXPRESSION,"outro",Grafo.java(51:22-51:29),"e.outro"
195,LITERAL,"",Grafo.java(51:32-51:35),"""|"""
196,DECLAREDREFERENCEEXPRESSION,"println",Grafo.java(53:15-53:22),"println"
197,MEMBEREXPRESSION,"out",Grafo.java(53:4-53:14),"System.out"
198,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(48:19-48:20),"i"
199,BINARYOPERATOR,"+",Grafo.java(48:23-48:28),"V + 1"
200,MEMBEREXPRESSION,"V",Grafo.java(48:23-48:24),"V"
201,LITERAL,"",Grafo.java(48:27-48:28),"1"
202,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(48:23-48:24),"this"
203,VARIABLEDECLARATION,"this",,""
204,COMPOUNDSTATEMENT,"",Grafo.java(60:20-76:3),"{

		for (int i = 1; i < V + 1; i++) {
			color[i] = 0; // 0 white 1 gray 2 black
			//pred[i] = 0;
		}
		for (int i = 1; i < V + 1; i++) {
			if (color[i] == 0)
				VDFS(i);
		}
		// for (int i = 1; i < V + 1; i++)
		// System.out.print(pred[i] + ""_"" + i + "" "");
		// System.out.println();

		//System.out.println(s.toString());

	}"
205,LITERAL,"",Grafo.java(62:16-62:17),"1"
206,RETURNSTATEMENT,"",,""
207,FORSTATEMENT,"",Grafo.java(62:3-65:4),"for (int i = 1; i < V + 1; i++) {
			color[i] = 0; // 0 white 1 gray 2 black
			//pred[i] = 0;
		}"
208,FORSTATEMENT,"",Grafo.java(66:3-69:4),"for (int i = 1; i < V + 1; i++) {
			if (color[i] == 0)
				VDFS(i);
		}"
209,COMPOUNDSTATEMENT,"",Grafo.java(62:35-65:4),"{
			color[i] = 0; // 0 white 1 gray 2 black
			//pred[i] = 0;
		}"
210,DECLARATIONSTATEMENT,"",Grafo.java(62:8-62:17),"int i = 1"
211,BINARYOPERATOR,"<",Grafo.java(62:19-62:28),"i < V + 1"
212,UNARYOPERATOR,"++",Grafo.java(62:30-62:33),"i++"
213,VARIABLEDECLARATION,"i",Grafo.java(62:12-62:17),"i = 1"
214,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(63:4-63:9),"this"
215,LITERAL,"",Grafo.java(66:16-66:17),"1"
216,BINARYOPERATOR,"=",Grafo.java(63:4-63:17),"color[i] = 0;"
217,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(62:30-62:31),"i"
218,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(63:4-63:12),"color[i]"
219,LITERAL,"",Grafo.java(63:15-63:16),"0"
220,MEMBEREXPRESSION,"color",Grafo.java(63:4-63:9),"color"
221,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(63:10-63:11),"i"
222,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(62:19-62:20),"i"
223,BINARYOPERATOR,"+",Grafo.java(62:23-62:28),"V + 1"
224,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(62:23-62:24),"this"
225,MEMBEREXPRESSION,"V",Grafo.java(62:23-62:24),"V"
226,LITERAL,"",Grafo.java(62:27-62:28),"1"
227,COMPOUNDSTATEMENT,"",Grafo.java(66:35-69:4),"{
			if (color[i] == 0)
				VDFS(i);
		}"
228,DECLARATIONSTATEMENT,"",Grafo.java(66:8-66:17),"int i = 1"
229,BINARYOPERATOR,"<",Grafo.java(66:19-66:28),"i < V + 1"
230,UNARYOPERATOR,"++",Grafo.java(66:30-66:33),"i++"
231,VARIABLEDECLARATION,"i",Grafo.java(66:12-66:17),"i = 1"
232,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(67:8-67:13),"this"
233,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(66:19-66:20),"i"
234,BINARYOPERATOR,"+",Grafo.java(66:23-66:28),"V + 1"
235,MEMBEREXPRESSION,"V",Grafo.java(66:23-66:24),"V"
236,LITERAL,"",Grafo.java(66:27-66:28),"1"
237,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(66:23-66:24),"this"
238,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(66:30-66:31),"i"
239,IFSTATEMENT,"",Grafo.java(67:4-68:13),"if (color[i] == 0)
				VDFS(i);"
240,CALLEXPRESSION,"VDFS",Grafo.java(68:5-68:13),"VDFS(i);"
241,BINARYOPERATOR,"==",Grafo.java(67:8-67:21),"color[i] == 0"
242,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(68:10-68:11),"i"
243,METHODDECLARATION,"VDFS",,""
244,PARAMVARIABLEDECLARATION,"int0",,""
245,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(67:8-67:16),"color[i]"
246,LITERAL,"",Grafo.java(67:20-67:21),"0"
247,MEMBEREXPRESSION,"color",Grafo.java(67:8-67:13),"color"
248,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(67:14-67:15),"i"
249,VARIABLEDECLARATION,"this",,""
250,COMPOUNDSTATEMENT,"",Grafo.java(116:40-135:3),"{
		
		int v;
		int r1=0 ,r2=0;
		while (!s.isEmpty()) {
			path = new LinkedList<Integer>();
			v = s.pop();
			dfs2(R,v);
			//System.out.println(""-""+path.toString());
			if (path.size()>=4)
				r1++;
			else
				r2=r2 + path.size();
			while (!path.isEmpty()){
				s.remove(path.removeLast());
			}
		}
		System.out.println(""Caso #""+ni);
		System.out.println(r1+"" ""+r2);
	}"
251,PARAMVARIABLEDECLARATION,"R",Grafo.java(116:23-116:30),"Grafo R"
252,PARAMVARIABLEDECLARATION,"ni",Grafo.java(116:32-116:38),"int ni"
253,UNINITIALIZEDVALUE,"Uninitialized Value",,""
254,RETURNSTATEMENT,"",,""
255,DECLARATIONSTATEMENT,"",Grafo.java(118:3-118:9),"int v;"
256,DECLARATIONSTATEMENT,"",Grafo.java(119:3-119:18),"int r1=0 ,r2=0;"
257,WHILESTATEMENT,"",Grafo.java(120:3-132:4),"while (!s.isEmpty()) {
			path = new LinkedList<Integer>();
			v = s.pop();
			dfs2(R,v);
			//System.out.println(""-""+path.toString());
			if (path.size()>=4)
				r1++;
			else
				r2=r2 + path.size();
			while (!path.isEmpty()){
				s.remove(path.removeLast());
			}
		}"
258,MEMBERCALLEXPRESSION,"println",Grafo.java(133:3-133:35),"System.out.println(""Caso #""+ni);"
259,MEMBERCALLEXPRESSION,"println",Grafo.java(134:3-134:33),"System.out.println(r1+"" ""+r2);"
260,VARIABLEDECLARATION,"v",Grafo.java(118:7-118:8),"v"
261,VARIABLEDECLARATION,"r1",Grafo.java(119:7-119:11),"r1=0"
262,VARIABLEDECLARATION,"r2",Grafo.java(119:13-119:17),"r2=0"
263,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(120:11-120:12),"this"
264,DECLAREDREFERENCEEXPRESSION,"println",Grafo.java(134:14-134:21),"println"
265,BINARYOPERATOR,"+",Grafo.java(134:22-134:31),"r1+"" ""+r2"
266,BINARYOPERATOR,"+",Grafo.java(134:22-134:28),"r1+"" """
267,DECLAREDREFERENCEEXPRESSION,"r2",Grafo.java(134:29-134:31),"r2"
268,DECLAREDREFERENCEEXPRESSION,"r1",Grafo.java(134:22-134:24),"r1"
269,LITERAL,"",Grafo.java(134:25-134:28),""" """
270,MEMBEREXPRESSION,"out",Grafo.java(134:3-134:13),"System.out"
271,DECLAREDREFERENCEEXPRESSION,"System",Grafo.java(134:3-134:9),"System"
272,LITERAL,"",Grafo.java(119:10-119:11),"0"
273,LITERAL,"",Grafo.java(119:16-119:17),"0"
274,DECLAREDREFERENCEEXPRESSION,"println",Grafo.java(133:14-133:21),"println"
275,BINARYOPERATOR,"+",Grafo.java(133:22-133:33),"""Caso #""+ni"
276,LITERAL,"",Grafo.java(133:22-133:30),"""Caso #"""
277,DECLAREDREFERENCEEXPRESSION,"ni",Grafo.java(133:31-133:33),"ni"
278,MEMBEREXPRESSION,"out",Grafo.java(133:3-133:13),"System.out"
279,DECLAREDREFERENCEEXPRESSION,"System",Grafo.java(133:3-133:9),"System"
280,UNARYOPERATOR,"!",Grafo.java(120:10-120:22),"!s.isEmpty()"
281,COMPOUNDSTATEMENT,"",Grafo.java(120:24-132:4),"{
			path = new LinkedList<Integer>();
			v = s.pop();
			dfs2(R,v);
			//System.out.println(""-""+path.toString());
			if (path.size()>=4)
				r1++;
			else
				r2=r2 + path.size();
			while (!path.isEmpty()){
				s.remove(path.removeLast());
			}
		}"
282,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(121:4-121:8),"this"
283,MEMBERCALLEXPRESSION,"isEmpty",Grafo.java(120:11-120:22),"s.isEmpty()"
284,DECLAREDREFERENCEEXPRESSION,"isEmpty",Grafo.java(120:13-120:20),"isEmpty"
285,MEMBEREXPRESSION,"s",Grafo.java(120:11-120:12),"s"
286,BINARYOPERATOR,"=",Grafo.java(121:4-121:37),"path = new LinkedList<Integer>();"
287,BINARYOPERATOR,"=",Grafo.java(122:4-122:16),"v = s.pop();"
288,CALLEXPRESSION,"dfs2",Grafo.java(123:4-123:14),"dfs2(R,v);"
289,IFSTATEMENT,"",Grafo.java(125:4-128:25),"if (path.size()>=4)
				r1++;
			else
				r2=r2 + path.size();"
290,WHILESTATEMENT,"",Grafo.java(129:4-131:5),"while (!path.isEmpty()){
				s.remove(path.removeLast());
			}"
291,BINARYOPERATOR,">=",Grafo.java(125:8-125:22),"path.size()>=4"
292,UNARYOPERATOR,"++",Grafo.java(126:5-126:10),"r1++;"
293,BINARYOPERATOR,"=",Grafo.java(128:5-128:25),"r2=r2 + path.size();"
294,DECLAREDREFERENCEEXPRESSION,"r1",Grafo.java(126:5-126:7),"r1"
295,DECLAREDREFERENCEEXPRESSION,"r2",Grafo.java(128:5-128:7),"r2"
296,MEMBERCALLEXPRESSION,"size",Grafo.java(125:8-125:19),"path.size()"
297,LITERAL,"",Grafo.java(125:21-125:22),"4"
298,DECLAREDREFERENCEEXPRESSION,"size",Grafo.java(125:13-125:17),"size"
299,MEMBEREXPRESSION,"path",Grafo.java(125:8-125:12),"path"
300,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(125:8-125:12),"this"
301,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(129:12-129:16),"this"
302,BINARYOPERATOR,"+",Grafo.java(128:8-128:24),"r2 + path.size()"
303,DECLAREDREFERENCEEXPRESSION,"r2",Grafo.java(128:8-128:10),"r2"
304,MEMBERCALLEXPRESSION,"size",Grafo.java(128:13-128:24),"path.size()"
305,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(128:13-128:17),"this"
306,DECLAREDREFERENCEEXPRESSION,"size",Grafo.java(128:18-128:22),"size"
307,MEMBEREXPRESSION,"path",Grafo.java(128:13-128:17),"path"
308,MEMBEREXPRESSION,"path",Grafo.java(121:4-121:8),"path"
309,NEWEXPRESSION,"",Grafo.java(121:11-121:36),"new LinkedList<Integer>()"
310,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(122:4-122:5),"v"
311,CONSTRUCTEXPRESSION,"",Grafo.java(121:11-121:36),"new LinkedList<Integer>()"
312,MEMBERCALLEXPRESSION,"pop",Grafo.java(122:8-122:15),"s.pop()"
313,DECLAREDREFERENCEEXPRESSION,"R",Grafo.java(123:9-123:10),"R"
314,DECLAREDREFERENCEEXPRESSION,"pop",Grafo.java(122:10-122:13),"pop"
315,MEMBEREXPRESSION,"s",Grafo.java(122:8-122:9),"s"
316,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(122:8-122:9),"this"
317,METHODDECLARATION,"dfs2",,""
318,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(123:11-123:12),"v"
319,PARAMVARIABLEDECLARATION,"int1",,""
320,PARAMVARIABLEDECLARATION,"grafo0",,""
321,UNARYOPERATOR,"!",Grafo.java(129:11-129:26),"!path.isEmpty()"
322,COMPOUNDSTATEMENT,"",Grafo.java(129:27-131:5),"{
				s.remove(path.removeLast());
			}"
323,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(130:5-130:6),"this"
324,MEMBERCALLEXPRESSION,"remove",Grafo.java(130:5-130:33),"s.remove(path.removeLast());"
325,DECLAREDREFERENCEEXPRESSION,"remove",Grafo.java(130:7-130:13),"remove"
326,MEMBERCALLEXPRESSION,"removeLast",Grafo.java(130:14-130:31),"path.removeLast()"
327,DECLAREDREFERENCEEXPRESSION,"removeLast",Grafo.java(130:19-130:29),"removeLast"
328,MEMBEREXPRESSION,"path",Grafo.java(130:14-130:18),"path"
329,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(130:14-130:18),"this"
330,MEMBEREXPRESSION,"s",Grafo.java(130:5-130:6),"s"
331,MEMBERCALLEXPRESSION,"isEmpty",Grafo.java(129:12-129:26),"path.isEmpty()"
332,DECLAREDREFERENCEEXPRESSION,"isEmpty",Grafo.java(129:17-129:24),"isEmpty"
333,MEMBEREXPRESSION,"path",Grafo.java(129:12-129:16),"path"
334,VARIABLEDECLARATION,"this",,""
335,COMPOUNDSTATEMENT,"",Grafo.java(41:36-44:3),"{
		nos[v].adj.addFirst(new Edge(w));
		E++;
	}"
336,PARAMVARIABLEDECLARATION,"v",Grafo.java(41:22-41:27),"int v"
337,PARAMVARIABLEDECLARATION,"w",Grafo.java(41:29-41:34),"int w"
338,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(42:3-42:6),"this"
339,RETURNSTATEMENT,"",,""
340,MEMBERCALLEXPRESSION,"addFirst",Grafo.java(42:3-42:36),"nos[v].adj.addFirst(new Edge(w));"
341,UNARYOPERATOR,"++",Grafo.java(43:3-43:7),"E++;"
342,MEMBEREXPRESSION,"E",Grafo.java(43:3-43:4),"E"
343,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(43:3-43:4),"this"
344,DECLAREDREFERENCEEXPRESSION,"addFirst",Grafo.java(42:14-42:22),"addFirst"
345,NEWEXPRESSION,"",Grafo.java(42:23-42:34),"new Edge(w)"
346,MEMBEREXPRESSION,"adj",Grafo.java(42:3-42:13),"nos[v].adj"
347,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(42:3-42:9),"nos[v]"
348,DECLAREDREFERENCEEXPRESSION,"w",Grafo.java(42:32-42:33),"w"
349,MEMBEREXPRESSION,"nos",Grafo.java(42:3-42:6),"nos"
350,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(42:7-42:8),"v"
351,CONSTRUCTEXPRESSION,"",Grafo.java(42:23-42:34),"new Edge(w)"
352,CONSTRUCTORDECLARATION,"Edge",,""
353,PARAMVARIABLEDECLARATION,"int0",,""
354,COMPOUNDSTATEMENT,"",Grafo.java(30:15-39:3),"{
		V = v;
		E = 0;
		nos = new Node[V + 1];
		for (int i = 1; i < V + 1; i++)
			nos[i] = new Node();
		//pred = new int[V + 1];
		color = new int[V + 1];
		cor = new int[V + 1];
	}"
355,PARAMVARIABLEDECLARATION,"v",Grafo.java(30:8-30:13),"int v"
356,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(31:3-31:4),"this"
357,RETURNSTATEMENT,"",,""
358,BINARYOPERATOR,"=",Grafo.java(31:3-31:9),"V = v;"
359,BINARYOPERATOR,"=",Grafo.java(32:3-32:9),"E = 0;"
360,BINARYOPERATOR,"=",Grafo.java(33:3-33:25),"nos = new Node[V + 1];"
361,FORSTATEMENT,"",Grafo.java(34:3-35:24),"for (int i = 1; i < V + 1; i++)
			nos[i] = new Node();"
362,BINARYOPERATOR,"=",Grafo.java(37:3-37:26),"color = new int[V + 1];"
363,BINARYOPERATOR,"=",Grafo.java(38:3-38:24),"cor = new int[V + 1];"
364,MEMBEREXPRESSION,"color",Grafo.java(37:3-37:8),"color"
365,ARRAYCREATIONEXPRESSION,"",Grafo.java(37:11-37:25),"new int[V + 1]"
366,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(38:3-38:6),"this"
367,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(37:3-37:8),"this"
368,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(37:19-37:20),"this"
369,BINARYOPERATOR,"+",Grafo.java(37:19-37:24),"V + 1"
370,MEMBEREXPRESSION,"V",Grafo.java(37:19-37:20),"V"
371,LITERAL,"",Grafo.java(37:23-37:24),"1"
372,MEMBEREXPRESSION,"V",Grafo.java(31:3-31:4),"V"
373,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(31:7-31:8),"v"
374,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(32:3-32:4),"this"
375,MEMBEREXPRESSION,"cor",Grafo.java(38:3-38:6),"cor"
376,ARRAYCREATIONEXPRESSION,"",Grafo.java(38:9-38:23),"new int[V + 1]"
377,BINARYOPERATOR,"+",Grafo.java(38:17-38:22),"V + 1"
378,MEMBEREXPRESSION,"V",Grafo.java(38:17-38:18),"V"
379,LITERAL,"",Grafo.java(38:21-38:22),"1"
380,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(38:17-38:18),"this"
381,MEMBEREXPRESSION,"nos",Grafo.java(33:3-33:6),"nos"
382,ARRAYCREATIONEXPRESSION,"",Grafo.java(33:9-33:24),"new Node[V + 1]"
383,LITERAL,"",Grafo.java(34:16-34:17),"1"
384,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(33:3-33:6),"this"
385,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(33:18-33:19),"this"
386,BINARYOPERATOR,"+",Grafo.java(33:18-33:23),"V + 1"
387,MEMBEREXPRESSION,"V",Grafo.java(33:18-33:19),"V"
388,LITERAL,"",Grafo.java(33:22-33:23),"1"
389,BINARYOPERATOR,"=",Grafo.java(35:4-35:24),"nos[i] = new Node();"
390,DECLARATIONSTATEMENT,"",Grafo.java(34:8-34:17),"int i = 1"
391,BINARYOPERATOR,"<",Grafo.java(34:19-34:28),"i < V + 1"
392,UNARYOPERATOR,"++",Grafo.java(34:30-34:33),"i++"
393,VARIABLEDECLARATION,"i",Grafo.java(34:12-34:17),"i = 1"
394,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(35:4-35:7),"this"
395,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(34:19-34:20),"i"
396,BINARYOPERATOR,"+",Grafo.java(34:23-34:28),"V + 1"
397,MEMBEREXPRESSION,"V",Grafo.java(34:23-34:24),"V"
398,LITERAL,"",Grafo.java(34:27-34:28),"1"
399,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(34:23-34:24),"this"
400,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(35:4-35:10),"nos[i]"
401,NEWEXPRESSION,"",Grafo.java(35:13-35:23),"new Node()"
402,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(34:30-34:31),"i"
403,MEMBEREXPRESSION,"nos",Grafo.java(35:4-35:7),"nos"
404,DECLAREDREFERENCEEXPRESSION,"i",Grafo.java(35:8-35:9),"i"
405,CONSTRUCTEXPRESSION,"",Grafo.java(35:13-35:23),"new Node()"
406,CONSTRUCTORDECLARATION,"Node",Prob19.java(10:5-16:6),"Node() {
	adj = new LinkedList<Integer>();
	visited = false;
	distance = -1;
	excentricidade = -1;
	
    }"
407,MEMBEREXPRESSION,"E",Grafo.java(32:3-32:4),"E"
408,LITERAL,"",Grafo.java(32:7-32:8),"0"
409,VARIABLEDECLARATION,"this",,""
410,COMPOUNDSTATEMENT,"",Grafo.java(92:35-104:3),"{
		cor[r] = 1;

		for (Edge e : R.nos[r].adj) {
			if (cor[e.outro] == 0 && R.nos[e.outro].visitado == false) {
				dfs2(R, e.outro);
			}
		}
		path.addLast(r);
		R.nos[r].visitado = true;
		cor[r] = 2;
		
	}"
411,PARAMVARIABLEDECLARATION,"R",Grafo.java(92:19-92:26),"Grafo R"
412,PARAMVARIABLEDECLARATION,"r",Grafo.java(92:28-92:33),"int r"
413,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(93:3-93:6),"this"
414,RETURNSTATEMENT,"",,""
415,BINARYOPERATOR,"=",Grafo.java(93:3-93:14),"cor[r] = 1;"
416,FOREACHSTATEMENT,"",Grafo.java(95:3-99:4),"for (Edge e : R.nos[r].adj) {
			if (cor[e.outro] == 0 && R.nos[e.outro].visitado == false) {
				dfs2(R, e.outro);
			}
		}"
417,MEMBERCALLEXPRESSION,"addLast",Grafo.java(100:3-100:19),"path.addLast(r);"
418,BINARYOPERATOR,"=",Grafo.java(101:3-101:28),"R.nos[r].visitado = true;"
419,BINARYOPERATOR,"=",Grafo.java(102:3-102:14),"cor[r] = 2;"
420,DECLAREDREFERENCEEXPRESSION,"addLast",Grafo.java(100:8-100:15),"addLast"
421,DECLAREDREFERENCEEXPRESSION,"R",Grafo.java(101:3-101:4),"R"
422,DECLAREDREFERENCEEXPRESSION,"r",Grafo.java(100:16-100:17),"r"
423,MEMBEREXPRESSION,"path",Grafo.java(100:3-100:7),"path"
424,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(100:3-100:7),"this"
425,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(102:3-102:9),"cor[r]"
426,LITERAL,"",Grafo.java(102:12-102:13),"2"
427,MEMBEREXPRESSION,"cor",Grafo.java(102:3-102:6),"cor"
428,DECLAREDREFERENCEEXPRESSION,"r",Grafo.java(102:7-102:8),"r"
429,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(102:3-102:6),"this"
430,MEMBEREXPRESSION,"visitado",Grafo.java(101:3-101:20),"R.nos[r].visitado"
431,LITERAL,"",Grafo.java(101:23-101:27),"true"
432,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(101:3-101:11),"R.nos[r]"
433,MEMBEREXPRESSION,"nos",Grafo.java(101:3-101:8),"R.nos"
434,DECLAREDREFERENCEEXPRESSION,"r",Grafo.java(101:9-101:10),"r"
435,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(93:3-93:9),"cor[r]"
436,LITERAL,"",Grafo.java(93:12-93:13),"1"
437,DECLAREDREFERENCEEXPRESSION,"R",Grafo.java(95:17-95:18),"R"
438,MEMBEREXPRESSION,"cor",Grafo.java(93:3-93:6),"cor"
439,DECLAREDREFERENCEEXPRESSION,"r",Grafo.java(93:7-93:8),"r"
440,DECLARATIONSTATEMENT,"",Grafo.java(95:8-95:14),"Edge e"
441,MEMBEREXPRESSION,"adj",Grafo.java(95:17-95:29),"R.nos[r].adj"
442,COMPOUNDSTATEMENT,"",Grafo.java(95:31-99:4),"{
			if (cor[e.outro] == 0 && R.nos[e.outro].visitado == false) {
				dfs2(R, e.outro);
			}
		}"
443,VARIABLEDECLARATION,"e",Grafo.java(95:13-95:14),"e"
444,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(96:8-96:11),"this"
445,IFSTATEMENT,"",Grafo.java(96:4-98:5),"if (cor[e.outro] == 0 && R.nos[e.outro].visitado == false) {
				dfs2(R, e.outro);
			}"
446,COMPOUNDSTATEMENT,"",Grafo.java(96:63-98:5),"{
				dfs2(R, e.outro);
			}"
447,BINARYOPERATOR,"&&",Grafo.java(96:8-96:61),"cor[e.outro] == 0 && R.nos[e.outro].visitado == false"
448,DECLAREDREFERENCEEXPRESSION,"R",Grafo.java(97:10-97:11),"R"
449,BINARYOPERATOR,"==",Grafo.java(96:8-96:25),"cor[e.outro] == 0"
450,BINARYOPERATOR,"==",Grafo.java(96:29-96:61),"R.nos[e.outro].visitado == false"
451,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(96:8-96:20),"cor[e.outro]"
452,LITERAL,"",Grafo.java(96:24-96:25),"0"
453,DECLAREDREFERENCEEXPRESSION,"R",Grafo.java(96:29-96:30),"R"
454,MEMBEREXPRESSION,"cor",Grafo.java(96:8-96:11),"cor"
455,MEMBEREXPRESSION,"outro",Grafo.java(96:12-96:19),"e.outro"
456,DECLAREDREFERENCEEXPRESSION,"e",Grafo.java(96:12-96:13),"e"
457,MEMBEREXPRESSION,"visitado",Grafo.java(96:29-96:52),"R.nos[e.outro].visitado"
458,LITERAL,"",Grafo.java(96:56-96:61),"false"
459,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(96:29-96:43),"R.nos[e.outro]"
460,MEMBEREXPRESSION,"nos",Grafo.java(96:29-96:34),"R.nos"
461,MEMBEREXPRESSION,"outro",Grafo.java(96:35-96:42),"e.outro"
462,DECLAREDREFERENCEEXPRESSION,"e",Grafo.java(96:35-96:36),"e"
463,CALLEXPRESSION,"dfs2",Grafo.java(97:5-97:22),"dfs2(R, e.outro);"
464,MEMBEREXPRESSION,"outro",Grafo.java(97:13-97:20),"e.outro"
465,DECLAREDREFERENCEEXPRESSION,"e",Grafo.java(97:13-97:14),"e"
466,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(95:17-95:25),"R.nos[r]"
467,UNINITIALIZEDVALUE,"Uninitialized Value",,""
468,MEMBEREXPRESSION,"nos",Grafo.java(95:17-95:22),"R.nos"
469,DECLAREDREFERENCEEXPRESSION,"r",Grafo.java(95:23-95:24),"r"
470,VARIABLEDECLARATION,"this",,""
471,COMPOUNDSTATEMENT,"",Grafo.java(106:25-114:3),"{
		Grafo R = new Grafo(V);
		for (int v = 1; v < V + 1; v++) {
			for (Edge w : nos[v].adj) {
				R.addEdge(w.outro, v);
			}
		}
		return R;
	}"
472,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(107:23-107:24),"this"
473,RETURNSTATEMENT,"",Grafo.java(113:3-113:12),"return R;"
474,DECLARATIONSTATEMENT,"",Grafo.java(107:3-107:26),"Grafo R = new Grafo(V);"
475,FORSTATEMENT,"",Grafo.java(108:3-112:4),"for (int v = 1; v < V + 1; v++) {
			for (Edge w : nos[v].adj) {
				R.addEdge(w.outro, v);
			}
		}"
476,VARIABLEDECLARATION,"R",Grafo.java(107:9-107:25),"R = new Grafo(V)"
477,NEWEXPRESSION,"",Grafo.java(107:13-107:25),"new Grafo(V)"
478,CONSTRUCTEXPRESSION,"",Grafo.java(107:13-107:25),"new Grafo(V)"
479,MEMBEREXPRESSION,"V",Grafo.java(107:23-107:24),"V"
480,LITERAL,"",Grafo.java(108:16-108:17),"1"
481,COMPOUNDSTATEMENT,"",Grafo.java(108:35-112:4),"{
			for (Edge w : nos[v].adj) {
				R.addEdge(w.outro, v);
			}
		}"
482,DECLARATIONSTATEMENT,"",Grafo.java(108:8-108:17),"int v = 1"
483,BINARYOPERATOR,"<",Grafo.java(108:19-108:28),"v < V + 1"
484,UNARYOPERATOR,"++",Grafo.java(108:30-108:33),"v++"
485,VARIABLEDECLARATION,"v",Grafo.java(108:12-108:17),"v = 1"
486,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(109:18-109:21),"this"
487,DECLAREDREFERENCEEXPRESSION,"R",Grafo.java(113:10-113:11),"R"
488,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(108:19-108:20),"v"
489,FOREACHSTATEMENT,"",Grafo.java(109:4-111:5),"for (Edge w : nos[v].adj) {
				R.addEdge(w.outro, v);
			}"
490,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(108:30-108:31),"v"
491,DECLARATIONSTATEMENT,"",Grafo.java(109:9-109:15),"Edge w"
492,MEMBEREXPRESSION,"adj",Grafo.java(109:18-109:28),"nos[v].adj"
493,COMPOUNDSTATEMENT,"",Grafo.java(109:30-111:5),"{
				R.addEdge(w.outro, v);
			}"
494,VARIABLEDECLARATION,"w",Grafo.java(109:14-109:15),"w"
495,DECLAREDREFERENCEEXPRESSION,"R",Grafo.java(110:5-110:6),"R"
496,MEMBERCALLEXPRESSION,"addEdge",Grafo.java(110:5-110:27),"R.addEdge(w.outro, v);"
497,DECLAREDREFERENCEEXPRESSION,"addEdge",Grafo.java(110:7-110:14),"addEdge"
498,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(110:24-110:25),"v"
499,MEMBEREXPRESSION,"outro",Grafo.java(110:15-110:22),"w.outro"
500,DECLAREDREFERENCEEXPRESSION,"w",Grafo.java(110:15-110:16),"w"
501,UNINITIALIZEDVALUE,"Uninitialized Value",,""
502,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(109:18-109:24),"nos[v]"
503,MEMBEREXPRESSION,"nos",Grafo.java(109:18-109:21),"nos"
504,DECLAREDREFERENCEEXPRESSION,"v",Grafo.java(109:22-109:23),"v"
505,BINARYOPERATOR,"+",Grafo.java(108:23-108:28),"V + 1"
506,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(108:23-108:24),"this"
507,MEMBEREXPRESSION,"V",Grafo.java(108:23-108:24),"V"
508,LITERAL,"",Grafo.java(108:27-108:28),"1"
509,VARIABLEDECLARATION,"this",,""
510,COMPOUNDSTATEMENT,"",Grafo.java(78:26-90:3),"{
		color[u] = 1;
		for (Edge e : nos[u].adj) {
			if (color[e.outro] == 0) {
				//pred[e.outro] = u;
				VDFS(e.outro);
			}

		}
		s.push(u);
		color[u] = 2;

	}"
511,PARAMVARIABLEDECLARATION,"u",Grafo.java(78:19-78:24),"int u"
512,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(79:3-79:8),"this"
513,RETURNSTATEMENT,"",,""
514,BINARYOPERATOR,"=",Grafo.java(79:3-79:16),"color[u] = 1;"
515,FOREACHSTATEMENT,"",Grafo.java(80:3-86:4),"for (Edge e : nos[u].adj) {
			if (color[e.outro] == 0) {
				//pred[e.outro] = u;
				VDFS(e.outro);
			}

		}"
516,MEMBERCALLEXPRESSION,"push",Grafo.java(87:3-87:13),"s.push(u);"
517,BINARYOPERATOR,"=",Grafo.java(88:3-88:16),"color[u] = 2;"
518,DECLARATIONSTATEMENT,"",Grafo.java(80:8-80:14),"Edge e"
519,MEMBEREXPRESSION,"adj",Grafo.java(80:17-80:27),"nos[u].adj"
520,COMPOUNDSTATEMENT,"",Grafo.java(80:29-86:4),"{
			if (color[e.outro] == 0) {
				//pred[e.outro] = u;
				VDFS(e.outro);
			}

		}"
521,VARIABLEDECLARATION,"e",Grafo.java(80:13-80:14),"e"
522,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(81:8-81:13),"this"
523,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(87:3-87:4),"this"
524,UNINITIALIZEDVALUE,"Uninitialized Value",,""
525,IFSTATEMENT,"",Grafo.java(81:4-84:5),"if (color[e.outro] == 0) {
				//pred[e.outro] = u;
				VDFS(e.outro);
			}"
526,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(80:17-80:20),"this"
527,COMPOUNDSTATEMENT,"",Grafo.java(81:29-84:5),"{
				//pred[e.outro] = u;
				VDFS(e.outro);
			}"
528,BINARYOPERATOR,"==",Grafo.java(81:8-81:27),"color[e.outro] == 0"
529,DECLAREDREFERENCEEXPRESSION,"e",Grafo.java(83:10-83:11),"e"
530,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(81:8-81:22),"color[e.outro]"
531,LITERAL,"",Grafo.java(81:26-81:27),"0"
532,MEMBEREXPRESSION,"color",Grafo.java(81:8-81:13),"color"
533,MEMBEREXPRESSION,"outro",Grafo.java(81:14-81:21),"e.outro"
534,DECLAREDREFERENCEEXPRESSION,"e",Grafo.java(81:14-81:15),"e"
535,CALLEXPRESSION,"VDFS",Grafo.java(83:5-83:19),"VDFS(e.outro);"
536,MEMBEREXPRESSION,"outro",Grafo.java(83:10-83:17),"e.outro"
537,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(80:17-80:23),"nos[u]"
538,MEMBEREXPRESSION,"nos",Grafo.java(80:17-80:20),"nos"
539,DECLAREDREFERENCEEXPRESSION,"u",Grafo.java(80:21-80:22),"u"
540,DECLAREDREFERENCEEXPRESSION,"push",Grafo.java(87:5-87:9),"push"
541,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(88:3-88:8),"this"
542,DECLAREDREFERENCEEXPRESSION,"u",Grafo.java(87:10-87:11),"u"
543,MEMBEREXPRESSION,"s",Grafo.java(87:3-87:4),"s"
544,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(88:3-88:11),"color[u]"
545,LITERAL,"",Grafo.java(88:14-88:15),"2"
546,MEMBEREXPRESSION,"color",Grafo.java(88:3-88:8),"color"
547,DECLAREDREFERENCEEXPRESSION,"u",Grafo.java(88:9-88:10),"u"
548,ARRAYSUBSCRIPTIONEXPRESSION,"",Grafo.java(79:3-79:11),"color[u]"
549,LITERAL,"",Grafo.java(79:14-79:15),"1"
550,MEMBEREXPRESSION,"color",Grafo.java(79:3-79:8),"color"
551,DECLAREDREFERENCEEXPRESSION,"u",Grafo.java(79:9-79:10),"u"
552,FIELDDECLARATION,"this",,""
553,FIELDDECLARATION,"adj",Grafo.java(12:2-12:23),"adj"
554,FIELDDECLARATION,"visitado",Grafo.java(13:2-13:19),"visitado"
555,CONSTRUCTORDECLARATION,"Node",Grafo.java(15:2-18:3),"Node() {
		adj = new LinkedList<Edge>();
		visitado = false;
	}"
556,COMPOUNDSTATEMENT,"",Grafo.java(15:9-18:3),"{
		adj = new LinkedList<Edge>();
		visitado = false;
	}"
557,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(16:3-16:6),"this"
558,RETURNSTATEMENT,"",,""
559,BINARYOPERATOR,"=",Grafo.java(16:3-16:32),"adj = new LinkedList<Edge>();"
560,BINARYOPERATOR,"=",Grafo.java(17:3-17:20),"visitado = false;"
561,MEMBEREXPRESSION,"adj",Grafo.java(16:3-16:6),"adj"
562,NEWEXPRESSION,"",Grafo.java(16:9-16:31),"new LinkedList<Edge>()"
563,DECLAREDREFERENCEEXPRESSION,"this",Grafo.java(17:3-17:11),"this"
564,CONSTRUCTEXPRESSION,"",Grafo.java(16:9-16:31),"new LinkedList<Edge>()"
565,MEMBEREXPRESSION,"visitado",Grafo.java(17:3-17:11),"visitado"
566,LITERAL,"",Grafo.java(17:14-17:19),"false"
