id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000019/submissions/00938732_Sociologia_080316045/Social.java",,""
2,RECORDDECLARATION,"Social",Social.java(3:1-106:2),"class Social{
    
    public static Stack<Integer> s = new Stack<Integer>();
    public static int ctr = 0;
    public static int[] flood;

    public static void printGraph(ArrayList<ArrayList<Integer>> g){
	for(int i=1; i<g.size(); i++){
	    System.out.print(i+"" -> "");
	    for(int j=0; j<g.get(i).size(); j++)
		System.out.print(g.get(i).get(j)+"" "");
	    System.out.println();
	}
    }
    
    public static void dfs(ArrayList<ArrayList<Integer>> g){
	int v[] = new int[g.size()];
	for(int i=1; i<g.size(); i++)
	    if(v[i]==0)
		runDFS(g,i,v);
    }
    
    public static void runDFS(ArrayList<ArrayList<Integer>> g, int n, int[] v){
	v[n]=1;
	for(int i=0; i<g.get(n).size(); i++)
	    if(v[g.get(n).get(i)]==0)
		runDFS(g,g.get(n).get(i),v);
	if(!s.contains(n))
	    s.push(n);
    }
    
    public static ArrayList<ArrayList<Integer>> transpose(ArrayList<ArrayList<Integer>> g){
	ArrayList<ArrayList<Integer>> s = new ArrayList<ArrayList<Integer>>();
	for(int i=0; i<g.size(); i++)
	    s.add(new ArrayList<Integer>());
	
	for(int i=0; i<g.size(); i++)
	    for(int j=0; j<g.get(i).size(); j++)
		s.get(g.get(i).get(j)).add(i);
	return s;
    }
    
    public static void solve(ArrayList<ArrayList<Integer>> g){
	flood = new int[g.size()];
	while(!s.isEmpty()){
	    int n = s.pop();
	    if(flood[n]==0){
		ctr++;	
		solve_2(g,n,flood);
	    }
	}
    }
    
    public static void solve_2(ArrayList<ArrayList<Integer>> g, int n, int[] flood){
	flood[n]=ctr;
	for(int i=0; i<g.get(n).size(); i++)
	    if(flood[g.get(n).get(i)]==0)
		solve_2(g,g.get(n).get(i),flood);
    }
    
    public static void main(String[] args){
	
	Scanner input = new Scanner(System.in);
	
	int nrcases = input.nextInt();
	for(int k=0; k<nrcases; k++){
	    System.out.println(""Caso #""+(k+1));
	    ArrayList<ArrayList<Integer>> g = new ArrayList<ArrayList<Integer>>();
	    s = new Stack<Integer>();
	    ctr = 0;
	    
	    int nrnodes = input.nextInt();
	    for(int i=0; i<nrnodes+1; i++)
		g.add(new ArrayList<Integer>());
	    
	    for(int i=0; i<nrnodes; i++){
		int node  = input.nextInt();
		int nrcons = input.nextInt();
		for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());
	    }
	    //printGraph(g);
	    dfs(g);
	    g=transpose(g);
	    solve(g);
	    
	    Arrays.sort(flood);
	    int groups = 0;
	    int pplgro = 0;

	    for(int i=1; i<flood.length; i++){
		int nrppl = 0;
		for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;
		if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}
	    }
	    System.out.println(groups+"" ""+(nrnodes-pplgro));
	}
    }
}"
3,INCLUDEDECLARATION,"java.util",,""
4,FIELDDECLARATION,"this",,""
5,FIELDDECLARATION,"s",Social.java(5:5-5:59),"s = new Stack<Integer>()"
6,FIELDDECLARATION,"ctr",Social.java(6:5-6:31),"ctr = 0"
7,FIELDDECLARATION,"flood",Social.java(7:5-7:31),"flood"
8,METHODDECLARATION,"printGraph",Social.java(9:5-16:6),"public static void printGraph(ArrayList<ArrayList<Integer>> g){
	for(int i=1; i<g.size(); i++){
	    System.out.print(i+"" -> "");
	    for(int j=0; j<g.get(i).size(); j++)
		System.out.print(g.get(i).get(j)+"" "");
	    System.out.println();
	}
    }"
9,METHODDECLARATION,"dfs",Social.java(18:5-23:6),"public static void dfs(ArrayList<ArrayList<Integer>> g){
	int v[] = new int[g.size()];
	for(int i=1; i<g.size(); i++)
	    if(v[i]==0)
		runDFS(g,i,v);
    }"
10,METHODDECLARATION,"runDFS",Social.java(25:5-32:6),"public static void runDFS(ArrayList<ArrayList<Integer>> g, int n, int[] v){
	v[n]=1;
	for(int i=0; i<g.get(n).size(); i++)
	    if(v[g.get(n).get(i)]==0)
		runDFS(g,g.get(n).get(i),v);
	if(!s.contains(n))
	    s.push(n);
    }"
11,METHODDECLARATION,"transpose",Social.java(34:5-43:6),"public static ArrayList<ArrayList<Integer>> transpose(ArrayList<ArrayList<Integer>> g){
	ArrayList<ArrayList<Integer>> s = new ArrayList<ArrayList<Integer>>();
	for(int i=0; i<g.size(); i++)
	    s.add(new ArrayList<Integer>());
	
	for(int i=0; i<g.size(); i++)
	    for(int j=0; j<g.get(i).size(); j++)
		s.get(g.get(i).get(j)).add(i);
	return s;
    }"
12,METHODDECLARATION,"solve",Social.java(45:5-54:6),"public static void solve(ArrayList<ArrayList<Integer>> g){
	flood = new int[g.size()];
	while(!s.isEmpty()){
	    int n = s.pop();
	    if(flood[n]==0){
		ctr++;	
		solve_2(g,n,flood);
	    }
	}
    }"
13,METHODDECLARATION,"solve_2",Social.java(56:5-61:6),"public static void solve_2(ArrayList<ArrayList<Integer>> g, int n, int[] flood){
	flood[n]=ctr;
	for(int i=0; i<g.get(n).size(); i++)
	    if(flood[g.get(n).get(i)]==0)
		solve_2(g,g.get(n).get(i),flood);
    }"
14,METHODDECLARATION,"main",Social.java(63:5-105:6),"public static void main(String[] args){
	
	Scanner input = new Scanner(System.in);
	
	int nrcases = input.nextInt();
	for(int k=0; k<nrcases; k++){
	    System.out.println(""Caso #""+(k+1));
	    ArrayList<ArrayList<Integer>> g = new ArrayList<ArrayList<Integer>>();
	    s = new Stack<Integer>();
	    ctr = 0;
	    
	    int nrnodes = input.nextInt();
	    for(int i=0; i<nrnodes+1; i++)
		g.add(new ArrayList<Integer>());
	    
	    for(int i=0; i<nrnodes; i++){
		int node  = input.nextInt();
		int nrcons = input.nextInt();
		for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());
	    }
	    //printGraph(g);
	    dfs(g);
	    g=transpose(g);
	    solve(g);
	    
	    Arrays.sort(flood);
	    int groups = 0;
	    int pplgro = 0;

	    for(int i=1; i<flood.length; i++){
		int nrppl = 0;
		for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;
		if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}
	    }
	    System.out.println(groups+"" ""+(nrnodes-pplgro));
	}
    }"
15,CONSTRUCTORDECLARATION,"Social",,""
16,VARIABLEDECLARATION,"this",,""
17,COMPOUNDSTATEMENT,"",Social.java(9:67-16:6),"{
	for(int i=1; i<g.size(); i++){
	    System.out.print(i+"" -> "");
	    for(int j=0; j<g.get(i).size(); j++)
		System.out.print(g.get(i).get(j)+"" "");
	    System.out.println();
	}
    }"
18,PARAMVARIABLEDECLARATION,"g",Social.java(9:35-9:66),"ArrayList<ArrayList<Integer>> g"
19,LITERAL,"",Social.java(10:12-10:13),"1"
20,RETURNSTATEMENT,"",,""
21,FORSTATEMENT,"",Social.java(10:2-15:3),"for(int i=1; i<g.size(); i++){
	    System.out.print(i+"" -> "");
	    for(int j=0; j<g.get(i).size(); j++)
		System.out.print(g.get(i).get(j)+"" "");
	    System.out.println();
	}"
22,COMPOUNDSTATEMENT,"",Social.java(10:31-15:3),"{
	    System.out.print(i+"" -> "");
	    for(int j=0; j<g.get(i).size(); j++)
		System.out.print(g.get(i).get(j)+"" "");
	    System.out.println();
	}"
23,DECLARATIONSTATEMENT,"",Social.java(10:6-10:13),"int i=1"
24,BINARYOPERATOR,"<",Social.java(10:15-10:25),"i<g.size()"
25,UNARYOPERATOR,"++",Social.java(10:27-10:30),"i++"
26,VARIABLEDECLARATION,"i",Social.java(10:10-10:13),"i=1"
27,DECLAREDREFERENCEEXPRESSION,"System",Social.java(11:6-11:12),"System"
28,MEMBERCALLEXPRESSION,"print",Social.java(11:6-11:33),"System.out.print(i+"" -> "");"
29,FORSTATEMENT,"",Social.java(12:6-13:41),"for(int j=0; j<g.get(i).size(); j++)
		System.out.print(g.get(i).get(j)+"" "");"
30,MEMBERCALLEXPRESSION,"println",Social.java(14:6-14:27),"System.out.println();"
31,DECLAREDREFERENCEEXPRESSION,"i",Social.java(10:27-10:28),"i"
32,DECLAREDREFERENCEEXPRESSION,"println",Social.java(14:17-14:24),"println"
33,MEMBEREXPRESSION,"out",Social.java(14:6-14:16),"System.out"
34,DECLAREDREFERENCEEXPRESSION,"System",Social.java(14:6-14:12),"System"
35,DECLAREDREFERENCEEXPRESSION,"print",Social.java(11:17-11:22),"print"
36,LITERAL,"",Social.java(12:16-12:17),"0"
37,BINARYOPERATOR,"+",Social.java(11:23-11:31),"i+"" -> """
38,DECLAREDREFERENCEEXPRESSION,"i",Social.java(11:23-11:24),"i"
39,LITERAL,"",Social.java(11:25-11:31),""" -> """
40,MEMBEREXPRESSION,"out",Social.java(11:6-11:16),"System.out"
41,MEMBERCALLEXPRESSION,"print",Social.java(13:3-13:41),"System.out.print(g.get(i).get(j)+"" "");"
42,DECLARATIONSTATEMENT,"",Social.java(12:10-12:17),"int j=0"
43,BINARYOPERATOR,"<",Social.java(12:19-12:36),"j<g.get(i).size()"
44,UNARYOPERATOR,"++",Social.java(12:38-12:41),"j++"
45,VARIABLEDECLARATION,"j",Social.java(12:14-12:17),"j=0"
46,DECLAREDREFERENCEEXPRESSION,"System",Social.java(13:3-13:9),"System"
47,DECLAREDREFERENCEEXPRESSION,"j",Social.java(12:19-12:20),"j"
48,DECLAREDREFERENCEEXPRESSION,"j",Social.java(12:38-12:39),"j"
49,DECLAREDREFERENCEEXPRESSION,"print",Social.java(13:14-13:19),"print"
50,BINARYOPERATOR,"+",Social.java(13:20-13:39),"g.get(i).get(j)+"" """
51,MEMBEREXPRESSION,"out",Social.java(13:3-13:13),"System.out"
52,DECLAREDREFERENCEEXPRESSION,"g",Social.java(13:20-13:21),"g"
53,MEMBERCALLEXPRESSION,"get",Social.java(13:20-13:35),"g.get(i).get(j)"
54,LITERAL,"",Social.java(13:36-13:39),""" """
55,DECLAREDREFERENCEEXPRESSION,"get",Social.java(13:29-13:32),"get"
56,DECLAREDREFERENCEEXPRESSION,"j",Social.java(13:33-13:34),"j"
57,MEMBERCALLEXPRESSION,"get",Social.java(13:20-13:28),"g.get(i)"
58,DECLAREDREFERENCEEXPRESSION,"get",Social.java(13:22-13:25),"get"
59,DECLAREDREFERENCEEXPRESSION,"i",Social.java(13:26-13:27),"i"
60,MEMBERCALLEXPRESSION,"size",Social.java(12:21-12:36),"g.get(i).size()"
61,DECLAREDREFERENCEEXPRESSION,"g",Social.java(12:21-12:22),"g"
62,DECLAREDREFERENCEEXPRESSION,"size",Social.java(12:30-12:34),"size"
63,MEMBERCALLEXPRESSION,"get",Social.java(12:21-12:29),"g.get(i)"
64,DECLAREDREFERENCEEXPRESSION,"get",Social.java(12:23-12:26),"get"
65,DECLAREDREFERENCEEXPRESSION,"i",Social.java(12:27-12:28),"i"
66,DECLAREDREFERENCEEXPRESSION,"i",Social.java(10:15-10:16),"i"
67,MEMBERCALLEXPRESSION,"size",Social.java(10:17-10:25),"g.size()"
68,DECLAREDREFERENCEEXPRESSION,"g",Social.java(10:17-10:18),"g"
69,DECLAREDREFERENCEEXPRESSION,"size",Social.java(10:19-10:23),"size"
70,NEWEXPRESSION,"",Social.java(5:38-5:58),"new Stack<Integer>()"
71,CONSTRUCTEXPRESSION,"",Social.java(5:38-5:58),"new Stack<Integer>()"
72,VARIABLEDECLARATION,"this",,""
73,COMPOUNDSTATEMENT,"",Social.java(25:79-32:6),"{
	v[n]=1;
	for(int i=0; i<g.get(n).size(); i++)
	    if(v[g.get(n).get(i)]==0)
		runDFS(g,g.get(n).get(i),v);
	if(!s.contains(n))
	    s.push(n);
    }"
74,PARAMVARIABLEDECLARATION,"g",Social.java(25:31-25:62),"ArrayList<ArrayList<Integer>> g"
75,PARAMVARIABLEDECLARATION,"n",Social.java(25:64-25:69),"int n"
76,PARAMVARIABLEDECLARATION,"v",Social.java(25:71-25:78),"int[] v"
77,DECLAREDREFERENCEEXPRESSION,"v",Social.java(26:2-26:3),"v"
78,RETURNSTATEMENT,"",,""
79,BINARYOPERATOR,"=",Social.java(26:2-26:9),"v[n]=1;"
80,FORSTATEMENT,"",Social.java(27:2-29:31),"for(int i=0; i<g.get(n).size(); i++)
	    if(v[g.get(n).get(i)]==0)
		runDFS(g,g.get(n).get(i),v);"
81,IFSTATEMENT,"",Social.java(30:2-31:16),"if(!s.contains(n))
	    s.push(n);"
82,IFSTATEMENT,"",Social.java(28:6-29:31),"if(v[g.get(n).get(i)]==0)
		runDFS(g,g.get(n).get(i),v);"
83,DECLARATIONSTATEMENT,"",Social.java(27:6-27:13),"int i=0"
84,BINARYOPERATOR,"<",Social.java(27:15-27:32),"i<g.get(n).size()"
85,UNARYOPERATOR,"++",Social.java(27:34-27:37),"i++"
86,VARIABLEDECLARATION,"i",Social.java(27:10-27:13),"i=0"
87,DECLAREDREFERENCEEXPRESSION,"v",Social.java(28:9-28:10),"v"
88,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(30:6-30:7),"Social"
89,DECLAREDREFERENCEEXPRESSION,"i",Social.java(27:34-27:35),"i"
90,DECLAREDREFERENCEEXPRESSION,"i",Social.java(27:15-27:16),"i"
91,CALLEXPRESSION,"runDFS",Social.java(29:3-29:31),"runDFS(g,g.get(n).get(i),v);"
92,MEMBERCALLEXPRESSION,"size",Social.java(27:17-27:32),"g.get(n).size()"
93,DECLAREDREFERENCEEXPRESSION,"size",Social.java(27:26-27:30),"size"
94,MEMBERCALLEXPRESSION,"get",Social.java(27:17-27:25),"g.get(n)"
95,DECLAREDREFERENCEEXPRESSION,"get",Social.java(27:19-27:22),"get"
96,DECLAREDREFERENCEEXPRESSION,"n",Social.java(27:23-27:24),"n"
97,DECLAREDREFERENCEEXPRESSION,"g",Social.java(27:17-27:18),"g"
98,BINARYOPERATOR,"==",Social.java(28:9-28:30),"v[g.get(n).get(i)]==0"
99,DECLAREDREFERENCEEXPRESSION,"g",Social.java(29:10-29:11),"g"
100,METHODDECLARATION,"runDFS",,""
101,MEMBERCALLEXPRESSION,"get",Social.java(29:12-29:27),"g.get(n).get(i)"
102,DECLAREDREFERENCEEXPRESSION,"v",Social.java(29:28-29:29),"v"
103,DECLAREDREFERENCEEXPRESSION,"get",Social.java(29:21-29:24),"get"
104,PARAMVARIABLEDECLARATION,"e1",,""
105,DECLAREDREFERENCEEXPRESSION,"i",Social.java(29:25-29:26),"i"
106,MEMBERCALLEXPRESSION,"get",Social.java(29:12-29:20),"g.get(n)"
107,DECLAREDREFERENCEEXPRESSION,"get",Social.java(29:14-29:17),"get"
108,DECLAREDREFERENCEEXPRESSION,"n",Social.java(29:18-29:19),"n"
109,DECLAREDREFERENCEEXPRESSION,"g",Social.java(29:12-29:13),"g"
110,PARAMVARIABLEDECLARATION,"java.util.arraylist0",,""
111,PARAMVARIABLEDECLARATION,"intPtr2",,""
112,ARRAYSUBSCRIPTIONEXPRESSION,"",Social.java(28:9-28:27),"v[g.get(n).get(i)]"
113,LITERAL,"",Social.java(28:29-28:30),"0"
114,MEMBERCALLEXPRESSION,"get",Social.java(28:11-28:26),"g.get(n).get(i)"
115,DECLAREDREFERENCEEXPRESSION,"g",Social.java(28:11-28:12),"g"
116,DECLAREDREFERENCEEXPRESSION,"get",Social.java(28:20-28:23),"get"
117,DECLAREDREFERENCEEXPRESSION,"i",Social.java(28:24-28:25),"i"
118,MEMBERCALLEXPRESSION,"get",Social.java(28:11-28:19),"g.get(n)"
119,DECLAREDREFERENCEEXPRESSION,"get",Social.java(28:13-28:16),"get"
120,DECLAREDREFERENCEEXPRESSION,"n",Social.java(28:17-28:18),"n"
121,LITERAL,"",Social.java(27:12-27:13),"0"
122,UNARYOPERATOR,"!",Social.java(30:5-30:19),"!s.contains(n)"
123,MEMBERCALLEXPRESSION,"push",Social.java(31:6-31:16),"s.push(n);"
124,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(31:6-31:7),"Social"
125,DECLAREDREFERENCEEXPRESSION,"push",Social.java(31:8-31:12),"push"
126,DECLAREDREFERENCEEXPRESSION,"n",Social.java(31:13-31:14),"n"
127,MEMBEREXPRESSION,"s",Social.java(31:6-31:7),"s"
128,MEMBERCALLEXPRESSION,"contains",Social.java(30:6-30:19),"s.contains(n)"
129,DECLAREDREFERENCEEXPRESSION,"contains",Social.java(30:8-30:16),"contains"
130,DECLAREDREFERENCEEXPRESSION,"n",Social.java(30:17-30:18),"n"
131,MEMBEREXPRESSION,"s",Social.java(30:6-30:7),"s"
132,ARRAYSUBSCRIPTIONEXPRESSION,"",Social.java(26:2-26:6),"v[n]"
133,LITERAL,"",Social.java(26:7-26:8),"1"
134,DECLAREDREFERENCEEXPRESSION,"n",Social.java(26:4-26:5),"n"
135,VARIABLEDECLARATION,"this",,""
136,COMPOUNDSTATEMENT,"",Social.java(63:43-105:6),"{
	
	Scanner input = new Scanner(System.in);
	
	int nrcases = input.nextInt();
	for(int k=0; k<nrcases; k++){
	    System.out.println(""Caso #""+(k+1));
	    ArrayList<ArrayList<Integer>> g = new ArrayList<ArrayList<Integer>>();
	    s = new Stack<Integer>();
	    ctr = 0;
	    
	    int nrnodes = input.nextInt();
	    for(int i=0; i<nrnodes+1; i++)
		g.add(new ArrayList<Integer>());
	    
	    for(int i=0; i<nrnodes; i++){
		int node  = input.nextInt();
		int nrcons = input.nextInt();
		for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());
	    }
	    //printGraph(g);
	    dfs(g);
	    g=transpose(g);
	    solve(g);
	    
	    Arrays.sort(flood);
	    int groups = 0;
	    int pplgro = 0;

	    for(int i=1; i<flood.length; i++){
		int nrppl = 0;
		for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;
		if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}
	    }
	    System.out.println(groups+"" ""+(nrnodes-pplgro));
	}
    }"
137,PARAMVARIABLEDECLARATION,"args",Social.java(63:29-63:42),"String[] args"
138,DECLAREDREFERENCEEXPRESSION,"System",Social.java(65:30-65:36),"System"
139,RETURNSTATEMENT,"",,""
140,DECLARATIONSTATEMENT,"",Social.java(65:2-65:41),"Scanner input = new Scanner(System.in);"
141,DECLARATIONSTATEMENT,"",Social.java(67:2-67:32),"int nrcases = input.nextInt();"
142,FORSTATEMENT,"",Social.java(68:2-104:3),"for(int k=0; k<nrcases; k++){
	    System.out.println(""Caso #""+(k+1));
	    ArrayList<ArrayList<Integer>> g = new ArrayList<ArrayList<Integer>>();
	    s = new Stack<Integer>();
	    ctr = 0;
	    
	    int nrnodes = input.nextInt();
	    for(int i=0; i<nrnodes+1; i++)
		g.add(new ArrayList<Integer>());
	    
	    for(int i=0; i<nrnodes; i++){
		int node  = input.nextInt();
		int nrcons = input.nextInt();
		for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());
	    }
	    //printGraph(g);
	    dfs(g);
	    g=transpose(g);
	    solve(g);
	    
	    Arrays.sort(flood);
	    int groups = 0;
	    int pplgro = 0;

	    for(int i=1; i<flood.length; i++){
		int nrppl = 0;
		for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;
		if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}
	    }
	    System.out.println(groups+"" ""+(nrnodes-pplgro));
	}"
143,VARIABLEDECLARATION,"input",Social.java(65:10-65:40),"input = new Scanner(System.in)"
144,VARIABLEDECLARATION,"nrcases",Social.java(67:6-67:31),"nrcases = input.nextInt()"
145,LITERAL,"",Social.java(68:12-68:13),"0"
146,DECLAREDREFERENCEEXPRESSION,"input",Social.java(67:16-67:21),"input"
147,COMPOUNDSTATEMENT,"",Social.java(68:30-104:3),"{
	    System.out.println(""Caso #""+(k+1));
	    ArrayList<ArrayList<Integer>> g = new ArrayList<ArrayList<Integer>>();
	    s = new Stack<Integer>();
	    ctr = 0;
	    
	    int nrnodes = input.nextInt();
	    for(int i=0; i<nrnodes+1; i++)
		g.add(new ArrayList<Integer>());
	    
	    for(int i=0; i<nrnodes; i++){
		int node  = input.nextInt();
		int nrcons = input.nextInt();
		for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());
	    }
	    //printGraph(g);
	    dfs(g);
	    g=transpose(g);
	    solve(g);
	    
	    Arrays.sort(flood);
	    int groups = 0;
	    int pplgro = 0;

	    for(int i=1; i<flood.length; i++){
		int nrppl = 0;
		for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;
		if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}
	    }
	    System.out.println(groups+"" ""+(nrnodes-pplgro));
	}"
148,DECLARATIONSTATEMENT,"",Social.java(68:6-68:13),"int k=0"
149,BINARYOPERATOR,"<",Social.java(68:15-68:24),"k<nrcases"
150,UNARYOPERATOR,"++",Social.java(68:26-68:29),"k++"
151,VARIABLEDECLARATION,"k",Social.java(68:10-68:13),"k=0"
152,DECLAREDREFERENCEEXPRESSION,"System",Social.java(69:6-69:12),"System"
153,MEMBERCALLEXPRESSION,"println",Social.java(69:6-69:41),"System.out.println(""Caso #""+(k+1));"
154,DECLARATIONSTATEMENT,"",Social.java(70:6-70:76),"ArrayList<ArrayList<Integer>> g = new ArrayList<ArrayList<Integer>>();"
155,BINARYOPERATOR,"=",Social.java(71:6-71:31),"s = new Stack<Integer>();"
156,BINARYOPERATOR,"=",Social.java(72:6-72:14),"ctr = 0;"
157,DECLARATIONSTATEMENT,"",Social.java(74:6-74:36),"int nrnodes = input.nextInt();"
158,FORSTATEMENT,"",Social.java(75:6-76:35),"for(int i=0; i<nrnodes+1; i++)
		g.add(new ArrayList<Integer>());"
159,FORSTATEMENT,"",Social.java(78:6-83:7),"for(int i=0; i<nrnodes; i++){
		int node  = input.nextInt();
		int nrcons = input.nextInt();
		for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());
	    }"
160,CALLEXPRESSION,"dfs",Social.java(85:6-85:13),"dfs(g);"
161,BINARYOPERATOR,"=",Social.java(86:6-86:21),"g=transpose(g);"
162,CALLEXPRESSION,"solve",Social.java(87:6-87:15),"solve(g);"
163,STATICCALLEXPRESSION,"sort",Social.java(89:6-89:25),"Arrays.sort(flood);"
164,DECLARATIONSTATEMENT,"",Social.java(90:6-90:21),"int groups = 0;"
165,DECLARATIONSTATEMENT,"",Social.java(91:6-91:21),"int pplgro = 0;"
166,FORSTATEMENT,"",Social.java(93:6-102:7),"for(int i=1; i<flood.length; i++){
		int nrppl = 0;
		for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;
		if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}
	    }"
167,MEMBERCALLEXPRESSION,"println",Social.java(103:6-103:54),"System.out.println(groups+"" ""+(nrnodes-pplgro));"
168,VARIABLEDECLARATION,"g",Social.java(70:36-70:75),"g = new ArrayList<ArrayList<Integer>>()"
169,VARIABLEDECLARATION,"nrnodes",Social.java(74:10-74:35),"nrnodes = input.nextInt()"
170,VARIABLEDECLARATION,"groups",Social.java(90:10-90:20),"groups = 0"
171,VARIABLEDECLARATION,"pplgro",Social.java(91:10-91:20),"pplgro = 0"
172,DECLAREDREFERENCEEXPRESSION,"k",Social.java(68:26-68:27),"k"
173,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(71:6-71:7),"Social"
174,DECLAREDREFERENCEEXPRESSION,"g",Social.java(86:6-86:7),"g"
175,CALLEXPRESSION,"transpose",Social.java(86:8-86:20),"transpose(g)"
176,DECLAREDREFERENCEEXPRESSION,"g",Social.java(87:12-87:13),"g"
177,METHODDECLARATION,"transpose",Social.java(34:5-43:6),"public static ArrayList<ArrayList<Integer>> transpose(ArrayList<ArrayList<Integer>> g){
	ArrayList<ArrayList<Integer>> s = new ArrayList<ArrayList<Integer>>();
	for(int i=0; i<g.size(); i++)
	    s.add(new ArrayList<Integer>());
	
	for(int i=0; i<g.size(); i++)
	    for(int j=0; j<g.get(i).size(); j++)
		s.get(g.get(i).get(j)).add(i);
	return s;
    }"
178,DECLAREDREFERENCEEXPRESSION,"g",Social.java(86:18-86:19),"g"
179,PARAMVARIABLEDECLARATION,"g",Social.java(34:59-34:90),"ArrayList<ArrayList<Integer>> g"
180,MEMBERCALLEXPRESSION,"nextInt",Social.java(74:20-74:35),"input.nextInt()"
181,DECLAREDREFERENCEEXPRESSION,"nextInt",Social.java(74:26-74:33),"nextInt"
182,DECLAREDREFERENCEEXPRESSION,"input",Social.java(74:20-74:25),"input"
183,NEWEXPRESSION,"",Social.java(70:40-70:75),"new ArrayList<ArrayList<Integer>>()"
184,CONSTRUCTEXPRESSION,"",Social.java(70:40-70:75),"new ArrayList<ArrayList<Integer>>()"
185,LITERAL,"",Social.java(91:19-91:20),"0"
186,MEMBEREXPRESSION,"ctr",Social.java(72:6-72:9),"ctr"
187,LITERAL,"",Social.java(72:12-72:13),"0"
188,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(72:6-72:9),"Social"
189,MEMBERCALLEXPRESSION,"add",Social.java(76:3-76:35),"g.add(new ArrayList<Integer>());"
190,DECLARATIONSTATEMENT,"",Social.java(75:10-75:17),"int i=0"
191,BINARYOPERATOR,"<",Social.java(75:19-75:30),"i<nrnodes+1"
192,UNARYOPERATOR,"++",Social.java(75:32-75:35),"i++"
193,VARIABLEDECLARATION,"i",Social.java(75:14-75:17),"i=0"
194,DECLAREDREFERENCEEXPRESSION,"g",Social.java(76:3-76:4),"g"
195,LITERAL,"",Social.java(78:16-78:17),"0"
196,LITERAL,"",Social.java(75:16-75:17),"0"
197,DECLAREDREFERENCEEXPRESSION,"i",Social.java(75:19-75:20),"i"
198,DECLAREDREFERENCEEXPRESSION,"add",Social.java(76:5-76:8),"add"
199,DECLAREDREFERENCEEXPRESSION,"i",Social.java(75:32-75:33),"i"
200,NEWEXPRESSION,"",Social.java(76:9-76:33),"new ArrayList<Integer>()"
201,CONSTRUCTEXPRESSION,"",Social.java(76:9-76:33),"new ArrayList<Integer>()"
202,BINARYOPERATOR,"+",Social.java(75:21-75:30),"nrnodes+1"
203,DECLAREDREFERENCEEXPRESSION,"nrnodes",Social.java(75:21-75:28),"nrnodes"
204,LITERAL,"",Social.java(75:29-75:30),"1"
205,COMPOUNDSTATEMENT,"",Social.java(93:39-102:7),"{
		int nrppl = 0;
		for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;
		if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}
	    }"
206,DECLARATIONSTATEMENT,"",Social.java(93:10-93:17),"int i=1"
207,BINARYOPERATOR,"<",Social.java(93:19-93:33),"i<flood.length"
208,UNARYOPERATOR,"++",Social.java(93:35-93:38),"i++"
209,VARIABLEDECLARATION,"i",Social.java(93:14-93:17),"i=1"
210,LITERAL,"",Social.java(94:15-94:16),"0"
211,DECLAREDREFERENCEEXPRESSION,"System",Social.java(103:6-103:12),"System"
212,DECLAREDREFERENCEEXPRESSION,"i",Social.java(93:19-93:20),"i"
213,MEMBEREXPRESSION,"length",Social.java(93:21-93:33),"flood.length"
214,DECLAREDREFERENCEEXPRESSION,"flood",Social.java(93:21-93:26),"flood"
215,DECLAREDREFERENCEEXPRESSION,"i",Social.java(93:35-93:36),"i"
216,DECLARATIONSTATEMENT,"",Social.java(94:3-94:17),"int nrppl = 0;"
217,FORSTATEMENT,"",Social.java(95:3-97:12),"for(int j=0; j<flood.length; j++)
		    if(flood[j]==i)
			nrppl++;"
218,IFSTATEMENT,"",Social.java(98:3-101:4),"if(nrppl>=4){
		    groups++;
		    pplgro+=nrppl;
		}"
219,VARIABLEDECLARATION,"nrppl",Social.java(94:7-94:16),"nrppl = 0"
220,COMPOUNDSTATEMENT,"",Social.java(98:15-101:4),"{
		    groups++;
		    pplgro+=nrppl;
		}"
221,LITERAL,"",Social.java(95:13-95:14),"0"
222,IFSTATEMENT,"",Social.java(96:7-97:12),"if(flood[j]==i)
			nrppl++;"
223,DECLARATIONSTATEMENT,"",Social.java(95:7-95:14),"int j=0"
224,BINARYOPERATOR,"<",Social.java(95:16-95:30),"j<flood.length"
225,UNARYOPERATOR,"++",Social.java(95:32-95:35),"j++"
226,VARIABLEDECLARATION,"j",Social.java(95:11-95:14),"j=0"
227,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(96:10-96:15),"Social"
228,DECLAREDREFERENCEEXPRESSION,"nrppl",Social.java(98:6-98:11),"nrppl"
229,DECLAREDREFERENCEEXPRESSION,"j",Social.java(95:32-95:33),"j"
230,DECLAREDREFERENCEEXPRESSION,"j",Social.java(95:16-95:17),"j"
231,UNARYOPERATOR,"++",Social.java(97:4-97:12),"nrppl++;"
232,BINARYOPERATOR,"==",Social.java(96:10-96:21),"flood[j]==i"
233,DECLAREDREFERENCEEXPRESSION,"nrppl",Social.java(97:4-97:9),"nrppl"
234,ARRAYSUBSCRIPTIONEXPRESSION,"",Social.java(96:10-96:18),"flood[j]"
235,DECLAREDREFERENCEEXPRESSION,"i",Social.java(96:20-96:21),"i"
236,MEMBEREXPRESSION,"flood",Social.java(96:10-96:15),"flood"
237,DECLAREDREFERENCEEXPRESSION,"j",Social.java(96:16-96:17),"j"
238,MEMBEREXPRESSION,"length",Social.java(95:18-95:30),"flood.length"
239,DECLAREDREFERENCEEXPRESSION,"flood",Social.java(95:18-95:23),"flood"
240,BINARYOPERATOR,">=",Social.java(98:6-98:14),"nrppl>=4"
241,DECLAREDREFERENCEEXPRESSION,"groups",Social.java(99:7-99:13),"groups"
242,LITERAL,"",Social.java(98:13-98:14),"4"
243,UNARYOPERATOR,"++",Social.java(99:7-99:16),"groups++;"
244,BINARYOPERATOR,"+=",Social.java(100:7-100:21),"pplgro+=nrppl;"
245,DECLAREDREFERENCEEXPRESSION,"pplgro",Social.java(100:7-100:13),"pplgro"
246,DECLAREDREFERENCEEXPRESSION,"nrppl",Social.java(100:15-100:20),"nrppl"
247,LITERAL,"",Social.java(93:16-93:17),"1"
248,LITERAL,"",Social.java(90:19-90:20),"0"
249,METHODDECLARATION,"solve",Social.java(45:5-54:6),"public static void solve(ArrayList<ArrayList<Integer>> g){
	flood = new int[g.size()];
	while(!s.isEmpty()){
	    int n = s.pop();
	    if(flood[n]==0){
		ctr++;	
		solve_2(g,n,flood);
	    }
	}
    }"
250,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(89:18-89:23),"Social"
251,PARAMVARIABLEDECLARATION,"g",Social.java(45:30-45:61),"ArrayList<ArrayList<Integer>> g"
252,METHODDECLARATION,"dfs",Social.java(18:5-23:6),"public static void dfs(ArrayList<ArrayList<Integer>> g){
	int v[] = new int[g.size()];
	for(int i=1; i<g.size(); i++)
	    if(v[i]==0)
		runDFS(g,i,v);
    }"
253,DECLAREDREFERENCEEXPRESSION,"g",Social.java(85:10-85:11),"g"
254,PARAMVARIABLEDECLARATION,"g",Social.java(18:28-18:59),"ArrayList<ArrayList<Integer>> g"
255,DECLAREDREFERENCEEXPRESSION,"println",Social.java(103:17-103:24),"println"
256,BINARYOPERATOR,"+",Social.java(103:25-103:52),"groups+"" ""+(nrnodes-pplgro)"
257,MEMBEREXPRESSION,"out",Social.java(103:6-103:16),"System.out"
258,DECLAREDREFERENCEEXPRESSION,"groups",Social.java(103:25-103:31),"groups"
259,BINARYOPERATOR,"+",Social.java(103:25-103:35),"groups+"" """
260,BINARYOPERATOR,"-",Social.java(103:37-103:51),"nrnodes-pplgro"
261,DECLAREDREFERENCEEXPRESSION,"nrnodes",Social.java(103:37-103:44),"nrnodes"
262,DECLAREDREFERENCEEXPRESSION,"pplgro",Social.java(103:45-103:51),"pplgro"
263,LITERAL,"",Social.java(103:32-103:35),""" """
264,COMPOUNDSTATEMENT,"",Social.java(78:34-83:7),"{
		int node  = input.nextInt();
		int nrcons = input.nextInt();
		for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());
	    }"
265,DECLARATIONSTATEMENT,"",Social.java(78:10-78:17),"int i=0"
266,BINARYOPERATOR,"<",Social.java(78:19-78:28),"i<nrnodes"
267,UNARYOPERATOR,"++",Social.java(78:30-78:33),"i++"
268,VARIABLEDECLARATION,"i",Social.java(78:14-78:17),"i=0"
269,DECLAREDREFERENCEEXPRESSION,"input",Social.java(79:15-79:20),"input"
270,DECLAREDREFERENCEEXPRESSION,"i",Social.java(78:19-78:20),"i"
271,DECLAREDREFERENCEEXPRESSION,"nrnodes",Social.java(78:21-78:28),"nrnodes"
272,DECLAREDREFERENCEEXPRESSION,"i",Social.java(78:30-78:31),"i"
273,DECLARATIONSTATEMENT,"",Social.java(79:3-79:31),"int node  = input.nextInt();"
274,DECLARATIONSTATEMENT,"",Social.java(80:3-80:32),"int nrcons = input.nextInt();"
275,FORSTATEMENT,"",Social.java(81:3-82:40),"for(int j=0; j<nrcons; j++)
		    g.get(node).add(input.nextInt());"
276,VARIABLEDECLARATION,"node",Social.java(79:7-79:30),"node  = input.nextInt()"
277,VARIABLEDECLARATION,"nrcons",Social.java(80:7-80:31),"nrcons = input.nextInt()"
278,MEMBERCALLEXPRESSION,"nextInt",Social.java(79:15-79:30),"input.nextInt()"
279,DECLAREDREFERENCEEXPRESSION,"nextInt",Social.java(79:21-79:28),"nextInt"
280,DECLAREDREFERENCEEXPRESSION,"input",Social.java(80:16-80:21),"input"
281,LITERAL,"",Social.java(81:13-81:14),"0"
282,MEMBERCALLEXPRESSION,"nextInt",Social.java(80:16-80:31),"input.nextInt()"
283,DECLAREDREFERENCEEXPRESSION,"nextInt",Social.java(80:22-80:29),"nextInt"
284,MEMBERCALLEXPRESSION,"add",Social.java(82:7-82:40),"g.get(node).add(input.nextInt());"
285,DECLARATIONSTATEMENT,"",Social.java(81:7-81:14),"int j=0"
286,BINARYOPERATOR,"<",Social.java(81:16-81:24),"j<nrcons"
287,UNARYOPERATOR,"++",Social.java(81:26-81:29),"j++"
288,VARIABLEDECLARATION,"j",Social.java(81:11-81:14),"j=0"
289,DECLAREDREFERENCEEXPRESSION,"g",Social.java(82:7-82:8),"g"
290,DECLAREDREFERENCEEXPRESSION,"j",Social.java(81:16-81:17),"j"
291,DECLAREDREFERENCEEXPRESSION,"j",Social.java(81:26-81:27),"j"
292,DECLAREDREFERENCEEXPRESSION,"add",Social.java(82:19-82:22),"add"
293,MEMBERCALLEXPRESSION,"nextInt",Social.java(82:23-82:38),"input.nextInt()"
294,MEMBERCALLEXPRESSION,"get",Social.java(82:7-82:18),"g.get(node)"
295,DECLAREDREFERENCEEXPRESSION,"get",Social.java(82:9-82:12),"get"
296,DECLAREDREFERENCEEXPRESSION,"input",Social.java(82:23-82:28),"input"
297,DECLAREDREFERENCEEXPRESSION,"node",Social.java(82:13-82:17),"node"
298,DECLAREDREFERENCEEXPRESSION,"nextInt",Social.java(82:29-82:36),"nextInt"
299,DECLAREDREFERENCEEXPRESSION,"nrcons",Social.java(81:18-81:24),"nrcons"
300,MEMBEREXPRESSION,"flood",Social.java(89:18-89:23),"flood"
301,DECLAREDREFERENCEEXPRESSION,"println",Social.java(69:17-69:24),"println"
302,BINARYOPERATOR,"+",Social.java(69:25-69:39),"""Caso #""+(k+1)"
303,LITERAL,"",Social.java(69:25-69:33),"""Caso #"""
304,BINARYOPERATOR,"+",Social.java(69:35-69:38),"k+1"
305,DECLAREDREFERENCEEXPRESSION,"k",Social.java(69:35-69:36),"k"
306,LITERAL,"",Social.java(69:37-69:38),"1"
307,MEMBEREXPRESSION,"out",Social.java(69:6-69:16),"System.out"
308,MEMBEREXPRESSION,"s",Social.java(71:6-71:7),"s"
309,NEWEXPRESSION,"",Social.java(71:10-71:30),"new Stack<Integer>()"
310,CONSTRUCTEXPRESSION,"",Social.java(71:10-71:30),"new Stack<Integer>()"
311,DECLAREDREFERENCEEXPRESSION,"k",Social.java(68:15-68:16),"k"
312,DECLAREDREFERENCEEXPRESSION,"nrcases",Social.java(68:17-68:24),"nrcases"
313,NEWEXPRESSION,"",Social.java(65:18-65:40),"new Scanner(System.in)"
314,CONSTRUCTEXPRESSION,"",Social.java(65:18-65:40),"new Scanner(System.in)"
315,MEMBEREXPRESSION,"in",Social.java(65:30-65:39),"System.in"
316,MEMBERCALLEXPRESSION,"nextInt",Social.java(67:16-67:31),"input.nextInt()"
317,DECLAREDREFERENCEEXPRESSION,"nextInt",Social.java(67:22-67:29),"nextInt"
318,VARIABLEDECLARATION,"this",,""
319,COMPOUNDSTATEMENT,"",Social.java(34:91-43:6),"{
	ArrayList<ArrayList<Integer>> s = new ArrayList<ArrayList<Integer>>();
	for(int i=0; i<g.size(); i++)
	    s.add(new ArrayList<Integer>());
	
	for(int i=0; i<g.size(); i++)
	    for(int j=0; j<g.get(i).size(); j++)
		s.get(g.get(i).get(j)).add(i);
	return s;
    }"
320,PARAMVARIABLEDECLARATION,"g",Social.java(34:59-34:90),"ArrayList<ArrayList<Integer>> g"
321,CONSTRUCTEXPRESSION,"",Social.java(35:36-35:71),"new ArrayList<ArrayList<Integer>>()"
322,RETURNSTATEMENT,"",Social.java(42:2-42:11),"return s;"
323,DECLARATIONSTATEMENT,"",Social.java(35:2-35:72),"ArrayList<ArrayList<Integer>> s = new ArrayList<ArrayList<Integer>>();"
324,FORSTATEMENT,"",Social.java(36:2-37:38),"for(int i=0; i<g.size(); i++)
	    s.add(new ArrayList<Integer>());"
325,FORSTATEMENT,"",Social.java(39:2-41:33),"for(int i=0; i<g.size(); i++)
	    for(int j=0; j<g.get(i).size(); j++)
		s.get(g.get(i).get(j)).add(i);"
326,VARIABLEDECLARATION,"s",Social.java(35:32-35:71),"s = new ArrayList<ArrayList<Integer>>()"
327,DECLAREDREFERENCEEXPRESSION,"s",Social.java(42:9-42:10),"s"
328,LITERAL,"",Social.java(36:12-36:13),"0"
329,NEWEXPRESSION,"",Social.java(35:36-35:71),"new ArrayList<ArrayList<Integer>>()"
330,FORSTATEMENT,"",Social.java(40:6-41:33),"for(int j=0; j<g.get(i).size(); j++)
		s.get(g.get(i).get(j)).add(i);"
331,DECLARATIONSTATEMENT,"",Social.java(39:6-39:13),"int i=0"
332,BINARYOPERATOR,"<",Social.java(39:15-39:25),"i<g.size()"
333,UNARYOPERATOR,"++",Social.java(39:27-39:30),"i++"
334,VARIABLEDECLARATION,"i",Social.java(39:10-39:13),"i=0"
335,LITERAL,"",Social.java(40:16-40:17),"0"
336,DECLAREDREFERENCEEXPRESSION,"i",Social.java(39:15-39:16),"i"
337,MEMBERCALLEXPRESSION,"size",Social.java(39:17-39:25),"g.size()"
338,DECLAREDREFERENCEEXPRESSION,"g",Social.java(39:17-39:18),"g"
339,DECLAREDREFERENCEEXPRESSION,"size",Social.java(39:19-39:23),"size"
340,LITERAL,"",Social.java(39:12-39:13),"0"
341,MEMBERCALLEXPRESSION,"add",Social.java(41:3-41:33),"s.get(g.get(i).get(j)).add(i);"
342,DECLARATIONSTATEMENT,"",Social.java(40:10-40:17),"int j=0"
343,BINARYOPERATOR,"<",Social.java(40:19-40:36),"j<g.get(i).size()"
344,UNARYOPERATOR,"++",Social.java(40:38-40:41),"j++"
345,VARIABLEDECLARATION,"j",Social.java(40:14-40:17),"j=0"
346,DECLAREDREFERENCEEXPRESSION,"s",Social.java(41:3-41:4),"s"
347,DECLAREDREFERENCEEXPRESSION,"i",Social.java(39:27-39:28),"i"
348,DECLAREDREFERENCEEXPRESSION,"j",Social.java(40:19-40:20),"j"
349,MEMBERCALLEXPRESSION,"size",Social.java(40:21-40:36),"g.get(i).size()"
350,DECLAREDREFERENCEEXPRESSION,"g",Social.java(40:21-40:22),"g"
351,DECLAREDREFERENCEEXPRESSION,"size",Social.java(40:30-40:34),"size"
352,MEMBERCALLEXPRESSION,"get",Social.java(40:21-40:29),"g.get(i)"
353,DECLAREDREFERENCEEXPRESSION,"get",Social.java(40:23-40:26),"get"
354,DECLAREDREFERENCEEXPRESSION,"i",Social.java(40:27-40:28),"i"
355,DECLAREDREFERENCEEXPRESSION,"add",Social.java(41:26-41:29),"add"
356,DECLAREDREFERENCEEXPRESSION,"j",Social.java(40:38-40:39),"j"
357,DECLAREDREFERENCEEXPRESSION,"i",Social.java(41:30-41:31),"i"
358,MEMBERCALLEXPRESSION,"get",Social.java(41:3-41:25),"s.get(g.get(i).get(j))"
359,DECLAREDREFERENCEEXPRESSION,"get",Social.java(41:5-41:8),"get"
360,MEMBERCALLEXPRESSION,"get",Social.java(41:9-41:24),"g.get(i).get(j)"
361,DECLAREDREFERENCEEXPRESSION,"get",Social.java(41:18-41:21),"get"
362,DECLAREDREFERENCEEXPRESSION,"j",Social.java(41:22-41:23),"j"
363,MEMBERCALLEXPRESSION,"get",Social.java(41:9-41:17),"g.get(i)"
364,DECLAREDREFERENCEEXPRESSION,"get",Social.java(41:11-41:14),"get"
365,DECLAREDREFERENCEEXPRESSION,"i",Social.java(41:15-41:16),"i"
366,DECLAREDREFERENCEEXPRESSION,"g",Social.java(41:9-41:10),"g"
367,MEMBERCALLEXPRESSION,"add",Social.java(37:6-37:38),"s.add(new ArrayList<Integer>());"
368,DECLARATIONSTATEMENT,"",Social.java(36:6-36:13),"int i=0"
369,BINARYOPERATOR,"<",Social.java(36:15-36:25),"i<g.size()"
370,UNARYOPERATOR,"++",Social.java(36:27-36:30),"i++"
371,VARIABLEDECLARATION,"i",Social.java(36:10-36:13),"i=0"
372,DECLAREDREFERENCEEXPRESSION,"s",Social.java(37:6-37:7),"s"
373,DECLAREDREFERENCEEXPRESSION,"add",Social.java(37:8-37:11),"add"
374,DECLAREDREFERENCEEXPRESSION,"i",Social.java(36:27-36:28),"i"
375,NEWEXPRESSION,"",Social.java(37:12-37:36),"new ArrayList<Integer>()"
376,CONSTRUCTEXPRESSION,"",Social.java(37:12-37:36),"new ArrayList<Integer>()"
377,DECLAREDREFERENCEEXPRESSION,"i",Social.java(36:15-36:16),"i"
378,MEMBERCALLEXPRESSION,"size",Social.java(36:17-36:25),"g.size()"
379,DECLAREDREFERENCEEXPRESSION,"size",Social.java(36:19-36:23),"size"
380,DECLAREDREFERENCEEXPRESSION,"g",Social.java(36:17-36:18),"g"
381,LITERAL,"",Social.java(6:29-6:30),"0"
382,VARIABLEDECLARATION,"this",,""
383,COMPOUNDSTATEMENT,"",Social.java(56:84-61:6),"{
	flood[n]=ctr;
	for(int i=0; i<g.get(n).size(); i++)
	    if(flood[g.get(n).get(i)]==0)
		solve_2(g,g.get(n).get(i),flood);
    }"
384,PARAMVARIABLEDECLARATION,"g",Social.java(56:32-56:63),"ArrayList<ArrayList<Integer>> g"
385,PARAMVARIABLEDECLARATION,"n",Social.java(56:65-56:70),"int n"
386,PARAMVARIABLEDECLARATION,"flood",Social.java(56:72-56:83),"int[] flood"
387,DECLAREDREFERENCEEXPRESSION,"flood",Social.java(57:2-57:7),"flood"
388,RETURNSTATEMENT,"",,""
389,BINARYOPERATOR,"=",Social.java(57:2-57:15),"flood[n]=ctr;"
390,FORSTATEMENT,"",Social.java(58:2-60:36),"for(int i=0; i<g.get(n).size(); i++)
	    if(flood[g.get(n).get(i)]==0)
		solve_2(g,g.get(n).get(i),flood);"
391,ARRAYSUBSCRIPTIONEXPRESSION,"",Social.java(57:2-57:10),"flood[n]"
392,MEMBEREXPRESSION,"ctr",Social.java(57:11-57:14),"ctr"
393,LITERAL,"",Social.java(58:12-58:13),"0"
394,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(57:11-57:14),"Social"
395,DECLAREDREFERENCEEXPRESSION,"n",Social.java(57:8-57:9),"n"
396,IFSTATEMENT,"",Social.java(59:6-60:36),"if(flood[g.get(n).get(i)]==0)
		solve_2(g,g.get(n).get(i),flood);"
397,DECLARATIONSTATEMENT,"",Social.java(58:6-58:13),"int i=0"
398,BINARYOPERATOR,"<",Social.java(58:15-58:32),"i<g.get(n).size()"
399,UNARYOPERATOR,"++",Social.java(58:34-58:37),"i++"
400,VARIABLEDECLARATION,"i",Social.java(58:10-58:13),"i=0"
401,DECLAREDREFERENCEEXPRESSION,"flood",Social.java(59:9-59:14),"flood"
402,DECLAREDREFERENCEEXPRESSION,"i",Social.java(58:15-58:16),"i"
403,DECLAREDREFERENCEEXPRESSION,"i",Social.java(58:34-58:35),"i"
404,CALLEXPRESSION,"solve_2",Social.java(60:3-60:36),"solve_2(g,g.get(n).get(i),flood);"
405,BINARYOPERATOR,"==",Social.java(59:9-59:34),"flood[g.get(n).get(i)]==0"
406,DECLAREDREFERENCEEXPRESSION,"g",Social.java(60:11-60:12),"g"
407,METHODDECLARATION,"solve_2",,""
408,MEMBERCALLEXPRESSION,"get",Social.java(60:13-60:28),"g.get(n).get(i)"
409,DECLAREDREFERENCEEXPRESSION,"flood",Social.java(60:29-60:34),"flood"
410,DECLAREDREFERENCEEXPRESSION,"get",Social.java(60:22-60:25),"get"
411,PARAMVARIABLEDECLARATION,"e1",,""
412,DECLAREDREFERENCEEXPRESSION,"i",Social.java(60:26-60:27),"i"
413,MEMBERCALLEXPRESSION,"get",Social.java(60:13-60:21),"g.get(n)"
414,DECLAREDREFERENCEEXPRESSION,"get",Social.java(60:15-60:18),"get"
415,DECLAREDREFERENCEEXPRESSION,"n",Social.java(60:19-60:20),"n"
416,DECLAREDREFERENCEEXPRESSION,"g",Social.java(60:13-60:14),"g"
417,PARAMVARIABLEDECLARATION,"java.util.arraylist0",,""
418,PARAMVARIABLEDECLARATION,"intPtr2",,""
419,ARRAYSUBSCRIPTIONEXPRESSION,"",Social.java(59:9-59:31),"flood[g.get(n).get(i)]"
420,LITERAL,"",Social.java(59:33-59:34),"0"
421,MEMBERCALLEXPRESSION,"get",Social.java(59:15-59:30),"g.get(n).get(i)"
422,DECLAREDREFERENCEEXPRESSION,"g",Social.java(59:15-59:16),"g"
423,DECLAREDREFERENCEEXPRESSION,"get",Social.java(59:24-59:27),"get"
424,DECLAREDREFERENCEEXPRESSION,"i",Social.java(59:28-59:29),"i"
425,MEMBERCALLEXPRESSION,"get",Social.java(59:15-59:23),"g.get(n)"
426,DECLAREDREFERENCEEXPRESSION,"get",Social.java(59:17-59:20),"get"
427,DECLAREDREFERENCEEXPRESSION,"n",Social.java(59:21-59:22),"n"
428,MEMBERCALLEXPRESSION,"size",Social.java(58:17-58:32),"g.get(n).size()"
429,DECLAREDREFERENCEEXPRESSION,"size",Social.java(58:26-58:30),"size"
430,MEMBERCALLEXPRESSION,"get",Social.java(58:17-58:25),"g.get(n)"
431,DECLAREDREFERENCEEXPRESSION,"get",Social.java(58:19-58:22),"get"
432,DECLAREDREFERENCEEXPRESSION,"n",Social.java(58:23-58:24),"n"
433,DECLAREDREFERENCEEXPRESSION,"g",Social.java(58:17-58:18),"g"
434,VARIABLEDECLARATION,"this",,""
435,COMPOUNDSTATEMENT,"",Social.java(45:62-54:6),"{
	flood = new int[g.size()];
	while(!s.isEmpty()){
	    int n = s.pop();
	    if(flood[n]==0){
		ctr++;	
		solve_2(g,n,flood);
	    }
	}
    }"
436,PARAMVARIABLEDECLARATION,"g",Social.java(45:30-45:61),"ArrayList<ArrayList<Integer>> g"
437,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(46:2-46:7),"Social"
438,RETURNSTATEMENT,"",,""
439,BINARYOPERATOR,"=",Social.java(46:2-46:28),"flood = new int[g.size()];"
440,WHILESTATEMENT,"",Social.java(47:2-53:3),"while(!s.isEmpty()){
	    int n = s.pop();
	    if(flood[n]==0){
		ctr++;	
		solve_2(g,n,flood);
	    }
	}"
441,MEMBEREXPRESSION,"flood",Social.java(46:2-46:7),"flood"
442,ARRAYCREATIONEXPRESSION,"",Social.java(46:10-46:27),"new int[g.size()]"
443,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(47:9-47:10),"Social"
444,DECLAREDREFERENCEEXPRESSION,"g",Social.java(46:18-46:19),"g"
445,MEMBERCALLEXPRESSION,"size",Social.java(46:18-46:26),"g.size()"
446,DECLAREDREFERENCEEXPRESSION,"size",Social.java(46:20-46:24),"size"
447,UNARYOPERATOR,"!",Social.java(47:8-47:20),"!s.isEmpty()"
448,COMPOUNDSTATEMENT,"",Social.java(47:21-53:3),"{
	    int n = s.pop();
	    if(flood[n]==0){
		ctr++;	
		solve_2(g,n,flood);
	    }
	}"
449,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(48:14-48:15),"Social"
450,MEMBERCALLEXPRESSION,"isEmpty",Social.java(47:9-47:20),"s.isEmpty()"
451,DECLAREDREFERENCEEXPRESSION,"isEmpty",Social.java(47:11-47:18),"isEmpty"
452,MEMBEREXPRESSION,"s",Social.java(47:9-47:10),"s"
453,DECLARATIONSTATEMENT,"",Social.java(48:6-48:22),"int n = s.pop();"
454,IFSTATEMENT,"",Social.java(49:6-52:7),"if(flood[n]==0){
		ctr++;	
		solve_2(g,n,flood);
	    }"
455,VARIABLEDECLARATION,"n",Social.java(48:10-48:21),"n = s.pop()"
456,COMPOUNDSTATEMENT,"",Social.java(49:21-52:7),"{
		ctr++;	
		solve_2(g,n,flood);
	    }"
457,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(49:9-49:14),"Social"
458,BINARYOPERATOR,"==",Social.java(49:9-49:20),"flood[n]==0"
459,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(50:3-50:6),"Social"
460,ARRAYSUBSCRIPTIONEXPRESSION,"",Social.java(49:9-49:17),"flood[n]"
461,LITERAL,"",Social.java(49:19-49:20),"0"
462,MEMBEREXPRESSION,"flood",Social.java(49:9-49:14),"flood"
463,DECLAREDREFERENCEEXPRESSION,"n",Social.java(49:15-49:16),"n"
464,UNARYOPERATOR,"++",Social.java(50:3-50:9),"ctr++;"
465,CALLEXPRESSION,"solve_2",Social.java(51:3-51:22),"solve_2(g,n,flood);"
466,METHODDECLARATION,"solve_2",Social.java(56:5-61:6),"public static void solve_2(ArrayList<ArrayList<Integer>> g, int n, int[] flood){
	flood[n]=ctr;
	for(int i=0; i<g.get(n).size(); i++)
	    if(flood[g.get(n).get(i)]==0)
		solve_2(g,g.get(n).get(i),flood);
    }"
467,DECLAREDREFERENCEEXPRESSION,"g",Social.java(51:11-51:12),"g"
468,DECLAREDREFERENCEEXPRESSION,"n",Social.java(51:13-51:14),"n"
469,MEMBEREXPRESSION,"flood",Social.java(51:15-51:20),"flood"
470,DECLAREDREFERENCEEXPRESSION,"Social",Social.java(51:15-51:20),"Social"
471,PARAMVARIABLEDECLARATION,"flood",Social.java(56:72-56:83),"int[] flood"
472,PARAMVARIABLEDECLARATION,"g",Social.java(56:32-56:63),"ArrayList<ArrayList<Integer>> g"
473,PARAMVARIABLEDECLARATION,"n",Social.java(56:65-56:70),"int n"
474,MEMBEREXPRESSION,"ctr",Social.java(50:3-50:6),"ctr"
475,MEMBERCALLEXPRESSION,"pop",Social.java(48:14-48:21),"s.pop()"
476,DECLAREDREFERENCEEXPRESSION,"pop",Social.java(48:16-48:19),"pop"
477,MEMBEREXPRESSION,"s",Social.java(48:14-48:15),"s"
478,VARIABLEDECLARATION,"this",,""
479,COMPOUNDSTATEMENT,"",Social.java(18:60-23:6),"{
	int v[] = new int[g.size()];
	for(int i=1; i<g.size(); i++)
	    if(v[i]==0)
		runDFS(g,i,v);
    }"
480,PARAMVARIABLEDECLARATION,"g",Social.java(18:28-18:59),"ArrayList<ArrayList<Integer>> g"
481,DECLAREDREFERENCEEXPRESSION,"g",Social.java(19:20-19:21),"g"
482,RETURNSTATEMENT,"",,""
483,DECLARATIONSTATEMENT,"",Social.java(19:2-19:30),"int v[] = new int[g.size()];"
484,FORSTATEMENT,"",Social.java(20:2-22:17),"for(int i=1; i<g.size(); i++)
	    if(v[i]==0)
		runDFS(g,i,v);"
485,VARIABLEDECLARATION,"v",Social.java(19:6-19:29),"v[] = new int[g.size()]"
486,ARRAYCREATIONEXPRESSION,"",Social.java(19:12-19:29),"new int[g.size()]"
487,MEMBERCALLEXPRESSION,"size",Social.java(19:20-19:28),"g.size()"
488,DECLAREDREFERENCEEXPRESSION,"size",Social.java(19:22-19:26),"size"
489,LITERAL,"",Social.java(20:12-20:13),"1"
490,IFSTATEMENT,"",Social.java(21:6-22:17),"if(v[i]==0)
		runDFS(g,i,v);"
491,DECLARATIONSTATEMENT,"",Social.java(20:6-20:13),"int i=1"
492,BINARYOPERATOR,"<",Social.java(20:15-20:25),"i<g.size()"
493,UNARYOPERATOR,"++",Social.java(20:27-20:30),"i++"
494,VARIABLEDECLARATION,"i",Social.java(20:10-20:13),"i=1"
495,DECLAREDREFERENCEEXPRESSION,"v",Social.java(21:9-21:10),"v"
496,BINARYOPERATOR,"==",Social.java(21:9-21:16),"v[i]==0"
497,CALLEXPRESSION,"runDFS",Social.java(22:3-22:17),"runDFS(g,i,v);"
498,DECLAREDREFERENCEEXPRESSION,"g",Social.java(22:10-22:11),"g"
499,DECLAREDREFERENCEEXPRESSION,"i",Social.java(20:27-20:28),"i"
500,ARRAYSUBSCRIPTIONEXPRESSION,"",Social.java(21:9-21:13),"v[i]"
501,LITERAL,"",Social.java(21:15-21:16),"0"
502,DECLAREDREFERENCEEXPRESSION,"i",Social.java(21:11-21:12),"i"
503,METHODDECLARATION,"runDFS",Social.java(25:5-32:6),"public static void runDFS(ArrayList<ArrayList<Integer>> g, int n, int[] v){
	v[n]=1;
	for(int i=0; i<g.get(n).size(); i++)
	    if(v[g.get(n).get(i)]==0)
		runDFS(g,g.get(n).get(i),v);
	if(!s.contains(n))
	    s.push(n);
    }"
504,DECLAREDREFERENCEEXPRESSION,"i",Social.java(22:12-22:13),"i"
505,DECLAREDREFERENCEEXPRESSION,"v",Social.java(22:14-22:15),"v"
506,PARAMVARIABLEDECLARATION,"n",Social.java(25:64-25:69),"int n"
507,PARAMVARIABLEDECLARATION,"g",Social.java(25:31-25:62),"ArrayList<ArrayList<Integer>> g"
508,PARAMVARIABLEDECLARATION,"v",Social.java(25:71-25:78),"int[] v"
509,DECLAREDREFERENCEEXPRESSION,"i",Social.java(20:15-20:16),"i"
510,MEMBERCALLEXPRESSION,"size",Social.java(20:17-20:25),"g.size()"
511,DECLAREDREFERENCEEXPRESSION,"g",Social.java(20:17-20:18),"g"
512,DECLAREDREFERENCEEXPRESSION,"size",Social.java(20:19-20:23),"size"
