id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000019/submissions/05742497_Sociologia_up201204689/Socio.java",,""
2,RECORDDECLARATION,"Arco",Socio.java(12:1-28:2),"class Arco {
    int no_final;
    int valor;
    
    Arco(int fim, int v){
	no_final = fim;
	valor = v;
    }

    int extremo_final() {
	return no_final;
    }

    int valor_arco() {
	return valor;
    }
}"
3,RECORDDECLARATION,"No",Socio.java(31:1-38:2),"class No {
    //int label;
    LinkedList<Arco> adjs;

    No() {
	adjs = new LinkedList<Arco>();
    }
}"
4,RECORDDECLARATION,"Grafo",Socio.java(41:1-76:2),"class Grafo {
    No verts[];
    int nvs, narcos;
			
    public Grafo(int n) {
	nvs = n;
	narcos = 0;
	verts  = new No[n+1];
	for (int i = 0 ; i <= n ; i++)
	    verts[i] = new No();
        // para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
    }
    
    public int num_vertices(){
	return nvs;
    }

    public int num_arcos(){
	return narcos;
    }

    public LinkedList<Arco> adjs_no(int i) {
	return verts[i].adjs;
    }
    
    public void insert_new_arc(int i, int j, int valor_ij){
	verts[i].adjs.addFirst(new Arco(j,valor_ij));
        narcos++;
    }

    public Arco find_arc(int i, int j){
	for (Arco adj: adjs_no(i))
	    if (adj.extremo_final() == j) return adj;
	return null;
    }
}"
5,RECORDDECLARATION,"Socio",Socio.java(77:1-144:2),"class Socio{
    //pesquisa em profundidade
    public static void DFS(int j) {
		if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafo.verts[j].adjs) 
				DFS(arco.no_final);
			// adicionar a pilha
			pilha.addLast(j);
		}
	}
    public static void DFS2(int j) {
		if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafoTrans.verts[j].adjs) {
				DFS2(arco.no_final);
			}
			n++;
		}
	}
    public static int n;
    
    public static boolean visitado[];
    
    public static LinkedList<Integer> pilha = new LinkedList<Integer>();
    
    public static Grafo grafo;
    
    public static Grafo grafoTrans;
    
    public static void main(String args[]){
        Scanner in=new Scanner(System.in);
        int ncen=in.nextInt();
        for(int i=0; i<ncen; i++){
            int nIsolados=0,nGrupos=0;
            int nAlunos=in.nextInt();
            visitado=new boolean[nAlunos+1];
            grafo=new Grafo(nAlunos);
            grafoTrans=new Grafo(nAlunos);
            
            for(int j=0; j<nAlunos; j++){
                int idAluno=in.nextInt();
                int nRel=in.nextInt();
                int idNovo;
                for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }
            }
            Arrays.fill(visitado,false);
            for(int j=1; j<nAlunos+1;j++)DFS(j);
            
            Arrays.fill(visitado,false);
            
            while(pilha.size()!=0) {
				int j = pilha.removeLast();
				n = 0;
				if(!visitado[j]) DFS2(j);
				if(n>3) nGrupos++; else if(n>0) nIsolados += n;
			}
            System.out.println(""Caso #"" + (i+1));
            System.out.println(nGrupos +"" ""+ nIsolados);
		}   
    }
}"
6,INCLUDEDECLARATION,"java.io",,""
7,INCLUDEDECLARATION,"java.util",,""
8,INCLUDEDECLARATION,"java.util.LinkedList",,""
9,FIELDDECLARATION,"this",,""
10,FIELDDECLARATION,"verts",Socio.java(42:5-42:16),"verts"
11,FIELDDECLARATION,"nvs",Socio.java(43:5-43:21),"nvs"
12,METHODDECLARATION,"num_vertices",Socio.java(54:5-56:6),"public int num_vertices(){
	return nvs;
    }"
13,METHODDECLARATION,"num_arcos",Socio.java(58:5-60:6),"public int num_arcos(){
	return narcos;
    }"
14,METHODDECLARATION,"adjs_no",Socio.java(62:5-64:6),"public LinkedList<Arco> adjs_no(int i) {
	return verts[i].adjs;
    }"
15,METHODDECLARATION,"insert_new_arc",Socio.java(66:5-69:6),"public void insert_new_arc(int i, int j, int valor_ij){
	verts[i].adjs.addFirst(new Arco(j,valor_ij));
        narcos++;
    }"
16,METHODDECLARATION,"find_arc",Socio.java(71:5-75:6),"public Arco find_arc(int i, int j){
	for (Arco adj: adjs_no(i))
	    if (adj.extremo_final() == j) return adj;
	return null;
    }"
17,CONSTRUCTORDECLARATION,"Grafo",Socio.java(45:5-52:6),"public Grafo(int n) {
	nvs = n;
	narcos = 0;
	verts  = new No[n+1];
	for (int i = 0 ; i <= n ; i++)
	    verts[i] = new No();
        // para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
    }"
18,VARIABLEDECLARATION,"this",,""
19,COMPOUNDSTATEMENT,"",Socio.java(58:27-60:6),"{
	return narcos;
    }"
20,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(59:9-59:15),"this"
21,RETURNSTATEMENT,"",Socio.java(59:2-59:16),"return narcos;"
22,MEMBEREXPRESSION,"narcos",Socio.java(59:9-59:15),"narcos"
23,COMPOUNDSTATEMENT,"",Socio.java(45:25-52:6),"{
	nvs = n;
	narcos = 0;
	verts  = new No[n+1];
	for (int i = 0 ; i <= n ; i++)
	    verts[i] = new No();
        // para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
    }"
24,PARAMVARIABLEDECLARATION,"n",Socio.java(45:18-45:23),"int n"
25,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(46:2-46:5),"this"
26,RETURNSTATEMENT,"",,""
27,BINARYOPERATOR,"=",Socio.java(46:2-46:10),"nvs = n;"
28,BINARYOPERATOR,"=",Socio.java(47:2-47:13),"narcos = 0;"
29,BINARYOPERATOR,"=",Socio.java(48:2-48:23),"verts  = new No[n+1];"
30,FORSTATEMENT,"",Socio.java(49:2-50:26),"for (int i = 0 ; i <= n ; i++)
	    verts[i] = new No();"
31,MEMBEREXPRESSION,"verts",Socio.java(48:2-48:7),"verts"
32,ARRAYCREATIONEXPRESSION,"",Socio.java(48:11-48:22),"new No[n+1]"
33,LITERAL,"",Socio.java(49:15-49:16),"0"
34,BINARYOPERATOR,"+",Socio.java(48:18-48:21),"n+1"
35,DECLAREDREFERENCEEXPRESSION,"n",Socio.java(48:18-48:19),"n"
36,LITERAL,"",Socio.java(48:20-48:21),"1"
37,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(48:2-48:7),"this"
38,BINARYOPERATOR,"=",Socio.java(50:6-50:26),"verts[i] = new No();"
39,DECLARATIONSTATEMENT,"",Socio.java(49:7-49:16),"int i = 0"
40,BINARYOPERATOR,"<=",Socio.java(49:19-49:25),"i <= n"
41,UNARYOPERATOR,"++",Socio.java(49:28-49:31),"i++"
42,VARIABLEDECLARATION,"i",Socio.java(49:11-49:16),"i = 0"
43,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(50:6-50:11),"this"
44,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(49:28-49:29),"i"
45,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(49:19-49:20),"i"
46,DECLAREDREFERENCEEXPRESSION,"n",Socio.java(49:24-49:25),"n"
47,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(50:6-50:14),"verts[i]"
48,NEWEXPRESSION,"",Socio.java(50:17-50:25),"new No()"
49,CONSTRUCTEXPRESSION,"",Socio.java(50:17-50:25),"new No()"
50,CONSTRUCTORDECLARATION,"No",main.java(171:2-173:3),"No() {
		adjs = new LinkedList<Arco>();
	}"
51,MEMBEREXPRESSION,"verts",Socio.java(50:6-50:11),"verts"
52,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(50:12-50:13),"i"
53,MEMBEREXPRESSION,"nvs",Socio.java(46:2-46:5),"nvs"
54,DECLAREDREFERENCEEXPRESSION,"n",Socio.java(46:8-46:9),"n"
55,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(47:2-47:8),"this"
56,MEMBEREXPRESSION,"narcos",Socio.java(47:2-47:8),"narcos"
57,LITERAL,"",Socio.java(47:11-47:12),"0"
58,VARIABLEDECLARATION,"this",,""
59,COMPOUNDSTATEMENT,"",Socio.java(62:44-64:6),"{
	return verts[i].adjs;
    }"
60,PARAMVARIABLEDECLARATION,"i",Socio.java(62:37-62:42),"int i"
61,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(63:9-63:14),"this"
62,RETURNSTATEMENT,"",Socio.java(63:2-63:23),"return verts[i].adjs;"
63,MEMBEREXPRESSION,"adjs",Socio.java(63:9-63:22),"verts[i].adjs"
64,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(63:9-63:17),"verts[i]"
65,MEMBEREXPRESSION,"verts",Socio.java(63:9-63:14),"verts"
66,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(63:15-63:16),"i"
67,VARIABLEDECLARATION,"this",,""
68,COMPOUNDSTATEMENT,"",Socio.java(54:30-56:6),"{
	return nvs;
    }"
69,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(55:9-55:12),"this"
70,RETURNSTATEMENT,"",Socio.java(55:2-55:13),"return nvs;"
71,MEMBEREXPRESSION,"nvs",Socio.java(55:9-55:12),"nvs"
72,VARIABLEDECLARATION,"this",,""
73,COMPOUNDSTATEMENT,"",Socio.java(66:59-69:6),"{
	verts[i].adjs.addFirst(new Arco(j,valor_ij));
        narcos++;
    }"
74,PARAMVARIABLEDECLARATION,"i",Socio.java(66:32-66:37),"int i"
75,PARAMVARIABLEDECLARATION,"j",Socio.java(66:39-66:44),"int j"
76,PARAMVARIABLEDECLARATION,"valor_ij",Socio.java(66:46-66:58),"int valor_ij"
77,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(67:2-67:7),"this"
78,RETURNSTATEMENT,"",,""
79,MEMBERCALLEXPRESSION,"addFirst",Socio.java(67:2-67:47),"verts[i].adjs.addFirst(new Arco(j,valor_ij));"
80,UNARYOPERATOR,"++",Socio.java(68:9-68:18),"narcos++;"
81,MEMBEREXPRESSION,"narcos",Socio.java(68:9-68:15),"narcos"
82,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(68:9-68:15),"this"
83,DECLAREDREFERENCEEXPRESSION,"addFirst",Socio.java(67:16-67:24),"addFirst"
84,NEWEXPRESSION,"",Socio.java(67:25-67:45),"new Arco(j,valor_ij)"
85,CONSTRUCTEXPRESSION,"",Socio.java(67:25-67:45),"new Arco(j,valor_ij)"
86,CONSTRUCTORDECLARATION,"Arco",main.java(153:2-156:3),"Arco(int fim, int v) {
		no_final = fim;
		valor = v;
	}"
87,DECLAREDREFERENCEEXPRESSION,"valor_ij",Socio.java(67:36-67:44),"valor_ij"
88,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(67:34-67:35),"j"
89,PARAMVARIABLEDECLARATION,"fim",main.java(153:7-153:14),"int fim"
90,MEMBEREXPRESSION,"adjs",Socio.java(67:2-67:15),"verts[i].adjs"
91,PARAMVARIABLEDECLARATION,"v",main.java(153:16-153:21),"int v"
92,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(67:2-67:10),"verts[i]"
93,MEMBEREXPRESSION,"verts",Socio.java(67:2-67:7),"verts"
94,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(67:8-67:9),"i"
95,VARIABLEDECLARATION,"this",,""
96,COMPOUNDSTATEMENT,"",Socio.java(71:39-75:6),"{
	for (Arco adj: adjs_no(i))
	    if (adj.extremo_final() == j) return adj;
	return null;
    }"
97,PARAMVARIABLEDECLARATION,"i",Socio.java(71:26-71:31),"int i"
98,PARAMVARIABLEDECLARATION,"j",Socio.java(71:33-71:38),"int j"
99,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(72:25-72:26),"i"
100,RETURNSTATEMENT,"",Socio.java(74:2-74:14),"return null;"
101,FOREACHSTATEMENT,"",Socio.java(72:2-73:47),"for (Arco adj: adjs_no(i))
	    if (adj.extremo_final() == j) return adj;"
102,LITERAL,"",Socio.java(74:9-74:13),"null"
103,DECLARATIONSTATEMENT,"",Socio.java(72:7-72:15),"Arco adj"
104,CALLEXPRESSION,"adjs_no",Socio.java(72:17-72:27),"adjs_no(i)"
105,IFSTATEMENT,"",Socio.java(73:6-73:47),"if (adj.extremo_final() == j) return adj;"
106,VARIABLEDECLARATION,"adj",Socio.java(72:12-72:15),"adj"
107,DECLAREDREFERENCEEXPRESSION,"adj",Socio.java(73:10-73:13),"adj"
108,BINARYOPERATOR,"==",Socio.java(73:10-73:34),"adj.extremo_final() == j"
109,RETURNSTATEMENT,"",Socio.java(73:36-73:47),"return adj;"
110,DECLAREDREFERENCEEXPRESSION,"adj",Socio.java(73:43-73:46),"adj"
111,MEMBERCALLEXPRESSION,"extremo_final",Socio.java(73:10-73:29),"adj.extremo_final()"
112,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(73:33-73:34),"j"
113,DECLAREDREFERENCEEXPRESSION,"extremo_final",Socio.java(73:14-73:27),"extremo_final"
114,METHODDECLARATION,"extremo_final",main.java(158:2-160:3),"int extremo_final() {
		return no_final;
	}"
115,METHODDECLARATION,"adjs_no",main.java(197:2-199:3),"public LinkedList<Arco> adjs_no(int i) {
		return verts[i].adjs;
	}"
116,UNINITIALIZEDVALUE,"Uninitialized Value",,""
117,PARAMVARIABLEDECLARATION,"i",main.java(197:34-197:39),"int i"
118,FIELDDECLARATION,"this",,""
119,FIELDDECLARATION,"no_final",Socio.java(13:5-13:18),"no_final"
120,FIELDDECLARATION,"valor",Socio.java(14:5-14:15),"valor"
121,METHODDECLARATION,"extremo_final",Socio.java(21:5-23:6),"int extremo_final() {
	return no_final;
    }"
122,METHODDECLARATION,"valor_arco",Socio.java(25:5-27:6),"int valor_arco() {
	return valor;
    }"
123,CONSTRUCTORDECLARATION,"Arco",Socio.java(16:5-19:6),"Arco(int fim, int v){
	no_final = fim;
	valor = v;
    }"
124,VARIABLEDECLARATION,"this",,""
125,COMPOUNDSTATEMENT,"",Socio.java(25:22-27:6),"{
	return valor;
    }"
126,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(26:9-26:14),"this"
127,RETURNSTATEMENT,"",Socio.java(26:2-26:15),"return valor;"
128,MEMBEREXPRESSION,"valor",Socio.java(26:9-26:14),"valor"
129,COMPOUNDSTATEMENT,"",Socio.java(16:25-19:6),"{
	no_final = fim;
	valor = v;
    }"
130,PARAMVARIABLEDECLARATION,"fim",Socio.java(16:10-16:17),"int fim"
131,PARAMVARIABLEDECLARATION,"v",Socio.java(16:19-16:24),"int v"
132,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(17:2-17:10),"this"
133,RETURNSTATEMENT,"",,""
134,BINARYOPERATOR,"=",Socio.java(17:2-17:17),"no_final = fim;"
135,BINARYOPERATOR,"=",Socio.java(18:2-18:12),"valor = v;"
136,MEMBEREXPRESSION,"valor",Socio.java(18:2-18:7),"valor"
137,DECLAREDREFERENCEEXPRESSION,"v",Socio.java(18:10-18:11),"v"
138,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(18:2-18:7),"this"
139,MEMBEREXPRESSION,"no_final",Socio.java(17:2-17:10),"no_final"
140,DECLAREDREFERENCEEXPRESSION,"fim",Socio.java(17:13-17:16),"fim"
141,VARIABLEDECLARATION,"this",,""
142,COMPOUNDSTATEMENT,"",Socio.java(21:25-23:6),"{
	return no_final;
    }"
143,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(22:9-22:17),"this"
144,RETURNSTATEMENT,"",Socio.java(22:2-22:18),"return no_final;"
145,MEMBEREXPRESSION,"no_final",Socio.java(22:9-22:17),"no_final"
146,FIELDDECLARATION,"this",,""
147,FIELDDECLARATION,"adjs",Socio.java(33:5-33:27),"adjs"
148,CONSTRUCTORDECLARATION,"No",Socio.java(35:5-37:6),"No() {
	adjs = new LinkedList<Arco>();
    }"
149,COMPOUNDSTATEMENT,"",Socio.java(35:10-37:6),"{
	adjs = new LinkedList<Arco>();
    }"
150,DECLAREDREFERENCEEXPRESSION,"this",Socio.java(36:2-36:6),"this"
151,RETURNSTATEMENT,"",,""
152,BINARYOPERATOR,"=",Socio.java(36:2-36:32),"adjs = new LinkedList<Arco>();"
153,MEMBEREXPRESSION,"adjs",Socio.java(36:2-36:6),"adjs"
154,NEWEXPRESSION,"",Socio.java(36:9-36:31),"new LinkedList<Arco>()"
155,CONSTRUCTEXPRESSION,"",Socio.java(36:9-36:31),"new LinkedList<Arco>()"
156,FIELDDECLARATION,"this",,""
157,FIELDDECLARATION,"n",Socio.java(99:5-99:25),"n"
158,FIELDDECLARATION,"visitado",Socio.java(101:5-101:38),"visitado"
159,FIELDDECLARATION,"pilha",Socio.java(103:5-103:73),"pilha = new LinkedList<Integer>()"
160,FIELDDECLARATION,"grafo",Socio.java(105:5-105:31),"grafo"
161,FIELDDECLARATION,"grafoTrans",Socio.java(107:5-107:36),"grafoTrans"
162,METHODDECLARATION,"DFS",Socio.java(79:5-88:3),"public static void DFS(int j) {
		if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafo.verts[j].adjs) 
				DFS(arco.no_final);
			// adicionar a pilha
			pilha.addLast(j);
		}
	}"
163,METHODDECLARATION,"DFS2",Socio.java(89:5-98:3),"public static void DFS2(int j) {
		if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafoTrans.verts[j].adjs) {
				DFS2(arco.no_final);
			}
			n++;
		}
	}"
164,METHODDECLARATION,"main",Socio.java(109:5-143:6),"public static void main(String args[]){
        Scanner in=new Scanner(System.in);
        int ncen=in.nextInt();
        for(int i=0; i<ncen; i++){
            int nIsolados=0,nGrupos=0;
            int nAlunos=in.nextInt();
            visitado=new boolean[nAlunos+1];
            grafo=new Grafo(nAlunos);
            grafoTrans=new Grafo(nAlunos);
            
            for(int j=0; j<nAlunos; j++){
                int idAluno=in.nextInt();
                int nRel=in.nextInt();
                int idNovo;
                for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }
            }
            Arrays.fill(visitado,false);
            for(int j=1; j<nAlunos+1;j++)DFS(j);
            
            Arrays.fill(visitado,false);
            
            while(pilha.size()!=0) {
				int j = pilha.removeLast();
				n = 0;
				if(!visitado[j]) DFS2(j);
				if(n>3) nGrupos++; else if(n>0) nIsolados += n;
			}
            System.out.println(""Caso #"" + (i+1));
            System.out.println(nGrupos +"" ""+ nIsolados);
		}   
    }"
165,CONSTRUCTORDECLARATION,"Socio",,""
166,NEWEXPRESSION,"",Socio.java(103:47-103:72),"new LinkedList<Integer>()"
167,CONSTRUCTEXPRESSION,"",Socio.java(103:47-103:72),"new LinkedList<Integer>()"
168,VARIABLEDECLARATION,"this",,""
169,COMPOUNDSTATEMENT,"",Socio.java(89:36-98:3),"{
		if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafoTrans.verts[j].adjs) {
				DFS2(arco.no_final);
			}
			n++;
		}
	}"
170,PARAMVARIABLEDECLARATION,"j",Socio.java(89:29-89:34),"int j"
171,CALLEXPRESSION,"DFS2",Socio.java(137:22-137:30),"DFS2(j);"
172,CALLEXPRESSION,"DFS2",Socio.java(94:5-94:25),"DFS2(arco.no_final);"
173,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(90:7-90:15),"Socio"
174,RETURNSTATEMENT,"",,""
175,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(137:27-137:28),"j"
176,MEMBEREXPRESSION,"no_final",Socio.java(94:10-94:23),"arco.no_final"
177,IFSTATEMENT,"",Socio.java(90:3-97:4),"if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafoTrans.verts[j].adjs) {
				DFS2(arco.no_final);
			}
			n++;
		}"
178,UNARYOPERATOR,"!",Socio.java(90:6-90:18),"!visitado[j]"
179,COMPOUNDSTATEMENT,"",Socio.java(90:20-97:4),"{
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafoTrans.verts[j].adjs) {
				DFS2(arco.no_final);
			}
			n++;
		}"
180,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(91:4-91:12),"Socio"
181,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(90:7-90:18),"visitado[j]"
182,MEMBEREXPRESSION,"visitado",Socio.java(90:7-90:15),"visitado"
183,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(90:16-90:17),"j"
184,BINARYOPERATOR,"=",Socio.java(91:4-91:23),"visitado[j] = true;"
185,FOREACHSTATEMENT,"",Socio.java(93:4-95:5),"for(Arco arco: grafoTrans.verts[j].adjs) {
				DFS2(arco.no_final);
			}"
186,UNARYOPERATOR,"++",Socio.java(96:4-96:8),"n++;"
187,MEMBEREXPRESSION,"n",Socio.java(96:4-96:5),"n"
188,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(96:4-96:5),"Socio"
189,DECLARATIONSTATEMENT,"",Socio.java(93:8-93:17),"Arco arco"
190,MEMBEREXPRESSION,"adjs",Socio.java(93:19-93:43),"grafoTrans.verts[j].adjs"
191,COMPOUNDSTATEMENT,"",Socio.java(93:45-95:5),"{
				DFS2(arco.no_final);
			}"
192,VARIABLEDECLARATION,"arco",Socio.java(93:13-93:17),"arco"
193,DECLAREDREFERENCEEXPRESSION,"arco",Socio.java(94:10-94:14),"arco"
194,DECLAREDREFERENCEEXPRESSION,"grafoTrans",Socio.java(93:19-93:29),"grafoTrans"
195,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(93:19-93:38),"grafoTrans.verts[j]"
196,UNINITIALIZEDVALUE,"Uninitialized Value",,""
197,MEMBEREXPRESSION,"verts",Socio.java(93:19-93:35),"grafoTrans.verts"
198,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(93:36-93:37),"j"
199,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(91:4-91:15),"visitado[j]"
200,LITERAL,"",Socio.java(91:18-91:22),"true"
201,MEMBEREXPRESSION,"visitado",Socio.java(91:4-91:12),"visitado"
202,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(91:13-91:14),"j"
203,VARIABLEDECLARATION,"this",,""
204,COMPOUNDSTATEMENT,"",Socio.java(109:43-143:6),"{
        Scanner in=new Scanner(System.in);
        int ncen=in.nextInt();
        for(int i=0; i<ncen; i++){
            int nIsolados=0,nGrupos=0;
            int nAlunos=in.nextInt();
            visitado=new boolean[nAlunos+1];
            grafo=new Grafo(nAlunos);
            grafoTrans=new Grafo(nAlunos);
            
            for(int j=0; j<nAlunos; j++){
                int idAluno=in.nextInt();
                int nRel=in.nextInt();
                int idNovo;
                for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }
            }
            Arrays.fill(visitado,false);
            for(int j=1; j<nAlunos+1;j++)DFS(j);
            
            Arrays.fill(visitado,false);
            
            while(pilha.size()!=0) {
				int j = pilha.removeLast();
				n = 0;
				if(!visitado[j]) DFS2(j);
				if(n>3) nGrupos++; else if(n>0) nIsolados += n;
			}
            System.out.println(""Caso #"" + (i+1));
            System.out.println(nGrupos +"" ""+ nIsolados);
		}   
    }"
205,PARAMVARIABLEDECLARATION,"args",Socio.java(109:29-109:42),"String args[]"
206,DECLAREDREFERENCEEXPRESSION,"System",Socio.java(110:32-110:38),"System"
207,RETURNSTATEMENT,"",,""
208,DECLARATIONSTATEMENT,"",Socio.java(110:9-110:43),"Scanner in=new Scanner(System.in);"
209,DECLARATIONSTATEMENT,"",Socio.java(111:9-111:31),"int ncen=in.nextInt();"
210,FORSTATEMENT,"",Socio.java(112:9-142:4),"for(int i=0; i<ncen; i++){
            int nIsolados=0,nGrupos=0;
            int nAlunos=in.nextInt();
            visitado=new boolean[nAlunos+1];
            grafo=new Grafo(nAlunos);
            grafoTrans=new Grafo(nAlunos);
            
            for(int j=0; j<nAlunos; j++){
                int idAluno=in.nextInt();
                int nRel=in.nextInt();
                int idNovo;
                for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }
            }
            Arrays.fill(visitado,false);
            for(int j=1; j<nAlunos+1;j++)DFS(j);
            
            Arrays.fill(visitado,false);
            
            while(pilha.size()!=0) {
				int j = pilha.removeLast();
				n = 0;
				if(!visitado[j]) DFS2(j);
				if(n>3) nGrupos++; else if(n>0) nIsolados += n;
			}
            System.out.println(""Caso #"" + (i+1));
            System.out.println(nGrupos +"" ""+ nIsolados);
		}"
211,VARIABLEDECLARATION,"in",Socio.java(110:17-110:42),"in=new Scanner(System.in)"
212,VARIABLEDECLARATION,"ncen",Socio.java(111:13-111:30),"ncen=in.nextInt()"
213,LITERAL,"",Socio.java(112:19-112:20),"0"
214,DECLAREDREFERENCEEXPRESSION,"in",Socio.java(111:18-111:20),"in"
215,COMPOUNDSTATEMENT,"",Socio.java(112:34-142:4),"{
            int nIsolados=0,nGrupos=0;
            int nAlunos=in.nextInt();
            visitado=new boolean[nAlunos+1];
            grafo=new Grafo(nAlunos);
            grafoTrans=new Grafo(nAlunos);
            
            for(int j=0; j<nAlunos; j++){
                int idAluno=in.nextInt();
                int nRel=in.nextInt();
                int idNovo;
                for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }
            }
            Arrays.fill(visitado,false);
            for(int j=1; j<nAlunos+1;j++)DFS(j);
            
            Arrays.fill(visitado,false);
            
            while(pilha.size()!=0) {
				int j = pilha.removeLast();
				n = 0;
				if(!visitado[j]) DFS2(j);
				if(n>3) nGrupos++; else if(n>0) nIsolados += n;
			}
            System.out.println(""Caso #"" + (i+1));
            System.out.println(nGrupos +"" ""+ nIsolados);
		}"
216,DECLARATIONSTATEMENT,"",Socio.java(112:13-112:20),"int i=0"
217,BINARYOPERATOR,"<",Socio.java(112:22-112:28),"i<ncen"
218,UNARYOPERATOR,"++",Socio.java(112:30-112:33),"i++"
219,VARIABLEDECLARATION,"i",Socio.java(112:17-112:20),"i=0"
220,LITERAL,"",Socio.java(113:27-113:28),"0"
221,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(112:22-112:23),"i"
222,DECLAREDREFERENCEEXPRESSION,"ncen",Socio.java(112:24-112:28),"ncen"
223,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(112:30-112:31),"i"
224,DECLARATIONSTATEMENT,"",Socio.java(113:13-113:39),"int nIsolados=0,nGrupos=0;"
225,DECLARATIONSTATEMENT,"",Socio.java(114:13-114:38),"int nAlunos=in.nextInt();"
226,BINARYOPERATOR,"=",Socio.java(115:13-115:45),"visitado=new boolean[nAlunos+1];"
227,BINARYOPERATOR,"=",Socio.java(116:13-116:38),"grafo=new Grafo(nAlunos);"
228,BINARYOPERATOR,"=",Socio.java(117:13-117:43),"grafoTrans=new Grafo(nAlunos);"
229,FORSTATEMENT,"",Socio.java(119:13-128:14),"for(int j=0; j<nAlunos; j++){
                int idAluno=in.nextInt();
                int nRel=in.nextInt();
                int idNovo;
                for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }
            }"
230,STATICCALLEXPRESSION,"fill",Socio.java(129:13-129:41),"Arrays.fill(visitado,false);"
231,FORSTATEMENT,"",Socio.java(130:13-130:49),"for(int j=1; j<nAlunos+1;j++)DFS(j);"
232,STATICCALLEXPRESSION,"fill",Socio.java(132:13-132:41),"Arrays.fill(visitado,false);"
233,WHILESTATEMENT,"",Socio.java(134:13-139:5),"while(pilha.size()!=0) {
				int j = pilha.removeLast();
				n = 0;
				if(!visitado[j]) DFS2(j);
				if(n>3) nGrupos++; else if(n>0) nIsolados += n;
			}"
234,MEMBERCALLEXPRESSION,"println",Socio.java(140:13-140:50),"System.out.println(""Caso #"" + (i+1));"
235,MEMBERCALLEXPRESSION,"println",Socio.java(141:13-141:57),"System.out.println(nGrupos +"" ""+ nIsolados);"
236,VARIABLEDECLARATION,"nIsolados",Socio.java(113:17-113:28),"nIsolados=0"
237,VARIABLEDECLARATION,"nGrupos",Socio.java(113:29-113:38),"nGrupos=0"
238,VARIABLEDECLARATION,"nAlunos",Socio.java(114:17-114:37),"nAlunos=in.nextInt()"
239,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(134:19-134:24),"Socio"
240,LITERAL,"",Socio.java(132:34-132:39),"false"
241,MEMBEREXPRESSION,"visitado",Socio.java(132:25-132:33),"visitado"
242,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(132:25-132:33),"Socio"
243,LITERAL,"",Socio.java(113:37-113:38),"0"
244,MEMBERCALLEXPRESSION,"nextInt",Socio.java(114:25-114:37),"in.nextInt()"
245,DECLAREDREFERENCEEXPRESSION,"nextInt",Socio.java(114:28-114:35),"nextInt"
246,DECLAREDREFERENCEEXPRESSION,"in",Socio.java(114:25-114:27),"in"
247,CALLEXPRESSION,"DFS",Socio.java(130:42-130:49),"DFS(j);"
248,DECLARATIONSTATEMENT,"",Socio.java(130:17-130:24),"int j=1"
249,BINARYOPERATOR,"<",Socio.java(130:26-130:37),"j<nAlunos+1"
250,UNARYOPERATOR,"++",Socio.java(130:38-130:41),"j++"
251,VARIABLEDECLARATION,"j",Socio.java(130:21-130:24),"j=1"
252,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(130:46-130:47),"j"
253,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(130:38-130:39),"j"
254,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(130:26-130:27),"j"
255,PARAMVARIABLEDECLARATION,"j",Socio.java(79:28-79:33),"int j"
256,LITERAL,"",Socio.java(130:23-130:24),"1"
257,BINARYOPERATOR,"+",Socio.java(130:28-130:37),"nAlunos+1"
258,DECLAREDREFERENCEEXPRESSION,"nAlunos",Socio.java(130:28-130:35),"nAlunos"
259,LITERAL,"",Socio.java(130:36-130:37),"1"
260,LITERAL,"",Socio.java(129:34-129:39),"false"
261,MEMBEREXPRESSION,"visitado",Socio.java(129:25-129:33),"visitado"
262,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(129:25-129:33),"Socio"
263,MEMBEREXPRESSION,"grafoTrans",Socio.java(117:13-117:23),"grafoTrans"
264,NEWEXPRESSION,"",Socio.java(117:24-117:42),"new Grafo(nAlunos)"
265,LITERAL,"",Socio.java(119:23-119:24),"0"
266,CONSTRUCTEXPRESSION,"",Socio.java(117:24-117:42),"new Grafo(nAlunos)"
267,CONSTRUCTORDECLARATION,"Grafo",main.java(180:2-187:3),"public Grafo(int n) {
		nvs = n;
		narcos = 0;
		verts = new No[n + 1];
		for (int i = 0; i <= n; i++)
			verts[i] = new No();
		// para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
	}"
268,DECLAREDREFERENCEEXPRESSION,"nAlunos",Socio.java(117:34-117:41),"nAlunos"
269,PARAMVARIABLEDECLARATION,"n",main.java(180:15-180:20),"int n"
270,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(117:13-117:23),"Socio"
271,DECLAREDREFERENCEEXPRESSION,"println",Socio.java(141:24-141:31),"println"
272,BINARYOPERATOR,"+",Socio.java(141:32-141:55),"nGrupos +"" ""+ nIsolados"
273,BINARYOPERATOR,"+",Socio.java(141:32-141:44),"nGrupos +"" """
274,DECLAREDREFERENCEEXPRESSION,"nIsolados",Socio.java(141:46-141:55),"nIsolados"
275,DECLAREDREFERENCEEXPRESSION,"nGrupos",Socio.java(141:32-141:39),"nGrupos"
276,LITERAL,"",Socio.java(141:41-141:44),""" """
277,MEMBEREXPRESSION,"out",Socio.java(141:13-141:23),"System.out"
278,DECLAREDREFERENCEEXPRESSION,"System",Socio.java(141:13-141:19),"System"
279,MEMBEREXPRESSION,"grafo",Socio.java(116:13-116:18),"grafo"
280,NEWEXPRESSION,"",Socio.java(116:19-116:37),"new Grafo(nAlunos)"
281,CONSTRUCTEXPRESSION,"",Socio.java(116:19-116:37),"new Grafo(nAlunos)"
282,DECLAREDREFERENCEEXPRESSION,"nAlunos",Socio.java(116:29-116:36),"nAlunos"
283,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(116:13-116:18),"Socio"
284,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(115:13-115:21),"Socio"
285,BINARYOPERATOR,"!=",Socio.java(134:19-134:34),"pilha.size()!=0"
286,COMPOUNDSTATEMENT,"",Socio.java(134:36-139:5),"{
				int j = pilha.removeLast();
				n = 0;
				if(!visitado[j]) DFS2(j);
				if(n>3) nGrupos++; else if(n>0) nIsolados += n;
			}"
287,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(135:13-135:18),"Socio"
288,DECLAREDREFERENCEEXPRESSION,"System",Socio.java(140:13-140:19),"System"
289,DECLARATIONSTATEMENT,"",Socio.java(135:5-135:32),"int j = pilha.removeLast();"
290,BINARYOPERATOR,"=",Socio.java(136:5-136:11),"n = 0;"
291,IFSTATEMENT,"",Socio.java(137:5-137:30),"if(!visitado[j]) DFS2(j);"
292,IFSTATEMENT,"",Socio.java(138:5-138:52),"if(n>3) nGrupos++; else if(n>0) nIsolados += n;"
293,VARIABLEDECLARATION,"j",Socio.java(135:9-135:31),"j = pilha.removeLast()"
294,UNARYOPERATOR,"++",Socio.java(138:13-138:23),"nGrupos++;"
295,BINARYOPERATOR,"+=",Socio.java(138:37-138:52),"nIsolados += n;"
296,IFSTATEMENT,"",Socio.java(138:29-138:52),"if(n>0) nIsolados += n;"
297,UNARYOPERATOR,"!",Socio.java(137:8-137:20),"!visitado[j]"
298,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(138:8-138:9),"Socio"
299,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(137:9-137:20),"visitado[j]"
300,MEMBEREXPRESSION,"visitado",Socio.java(137:9-137:17),"visitado"
301,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(137:18-137:19),"j"
302,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(137:9-137:17),"Socio"
303,BINARYOPERATOR,">",Socio.java(138:8-138:11),"n>3"
304,DECLAREDREFERENCEEXPRESSION,"nGrupos",Socio.java(138:13-138:20),"nGrupos"
305,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(138:32-138:33),"Socio"
306,MEMBEREXPRESSION,"n",Socio.java(138:8-138:9),"n"
307,LITERAL,"",Socio.java(138:10-138:11),"3"
308,BINARYOPERATOR,">",Socio.java(138:32-138:35),"n>0"
309,DECLAREDREFERENCEEXPRESSION,"nIsolados",Socio.java(138:37-138:46),"nIsolados"
310,MEMBEREXPRESSION,"n",Socio.java(138:32-138:33),"n"
311,LITERAL,"",Socio.java(138:34-138:35),"0"
312,MEMBEREXPRESSION,"n",Socio.java(138:50-138:51),"n"
313,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(138:50-138:51),"Socio"
314,MEMBERCALLEXPRESSION,"removeLast",Socio.java(135:13-135:31),"pilha.removeLast()"
315,DECLAREDREFERENCEEXPRESSION,"removeLast",Socio.java(135:19-135:29),"removeLast"
316,MEMBEREXPRESSION,"pilha",Socio.java(135:13-135:18),"pilha"
317,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(136:5-136:6),"Socio"
318,MEMBEREXPRESSION,"n",Socio.java(136:5-136:6),"n"
319,LITERAL,"",Socio.java(136:9-136:10),"0"
320,MEMBERCALLEXPRESSION,"size",Socio.java(134:19-134:31),"pilha.size()"
321,LITERAL,"",Socio.java(134:33-134:34),"0"
322,DECLAREDREFERENCEEXPRESSION,"size",Socio.java(134:25-134:29),"size"
323,MEMBEREXPRESSION,"pilha",Socio.java(134:19-134:24),"pilha"
324,COMPOUNDSTATEMENT,"",Socio.java(119:41-128:14),"{
                int idAluno=in.nextInt();
                int nRel=in.nextInt();
                int idNovo;
                for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }
            }"
325,DECLARATIONSTATEMENT,"",Socio.java(119:17-119:24),"int j=0"
326,BINARYOPERATOR,"<",Socio.java(119:26-119:35),"j<nAlunos"
327,UNARYOPERATOR,"++",Socio.java(119:37-119:40),"j++"
328,VARIABLEDECLARATION,"j",Socio.java(119:21-119:24),"j=0"
329,DECLAREDREFERENCEEXPRESSION,"in",Socio.java(120:29-120:31),"in"
330,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(119:26-119:27),"j"
331,DECLAREDREFERENCEEXPRESSION,"nAlunos",Socio.java(119:28-119:35),"nAlunos"
332,DECLARATIONSTATEMENT,"",Socio.java(120:17-120:42),"int idAluno=in.nextInt();"
333,DECLARATIONSTATEMENT,"",Socio.java(121:17-121:39),"int nRel=in.nextInt();"
334,DECLARATIONSTATEMENT,"",Socio.java(122:17-122:28),"int idNovo;"
335,FORSTATEMENT,"",Socio.java(123:17-127:18),"for(int k=0; k<nRel;k++){
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }"
336,VARIABLEDECLARATION,"idAluno",Socio.java(120:21-120:41),"idAluno=in.nextInt()"
337,VARIABLEDECLARATION,"nRel",Socio.java(121:21-121:38),"nRel=in.nextInt()"
338,VARIABLEDECLARATION,"idNovo",Socio.java(122:21-122:27),"idNovo"
339,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(119:37-119:38),"j"
340,DECLAREDREFERENCEEXPRESSION,"in",Socio.java(121:26-121:28),"in"
341,COMPOUNDSTATEMENT,"",Socio.java(123:41-127:18),"{
                    idNovo=in.nextInt();
                    grafo.insert_new_arc(idAluno,idNovo,0);
                    grafoTrans.insert_new_arc(idNovo,idAluno,0);
                }"
342,DECLARATIONSTATEMENT,"",Socio.java(123:21-123:28),"int k=0"
343,BINARYOPERATOR,"<",Socio.java(123:30-123:36),"k<nRel"
344,UNARYOPERATOR,"++",Socio.java(123:37-123:40),"k++"
345,VARIABLEDECLARATION,"k",Socio.java(123:25-123:28),"k=0"
346,DECLAREDREFERENCEEXPRESSION,"idNovo",Socio.java(124:21-124:27),"idNovo"
347,DECLAREDREFERENCEEXPRESSION,"k",Socio.java(123:37-123:38),"k"
348,DECLAREDREFERENCEEXPRESSION,"k",Socio.java(123:30-123:31),"k"
349,LITERAL,"",Socio.java(123:27-123:28),"0"
350,DECLAREDREFERENCEEXPRESSION,"nRel",Socio.java(123:32-123:36),"nRel"
351,BINARYOPERATOR,"=",Socio.java(124:21-124:41),"idNovo=in.nextInt();"
352,MEMBERCALLEXPRESSION,"insert_new_arc",Socio.java(125:21-125:60),"grafo.insert_new_arc(idAluno,idNovo,0);"
353,MEMBERCALLEXPRESSION,"insert_new_arc",Socio.java(126:21-126:65),"grafoTrans.insert_new_arc(idNovo,idAluno,0);"
354,DECLAREDREFERENCEEXPRESSION,"insert_new_arc",Socio.java(126:32-126:46),"insert_new_arc"
355,METHODDECLARATION,"insert_new_arc",main.java(201:2-204:3),"public void insert_new_arc(int i, int j, int valor_ij) {
		verts[i].adjs.addFirst(new Arco(j, valor_ij));
		narcos++;
	}"
356,LITERAL,"",Socio.java(126:62-126:63),"0"
357,MEMBEREXPRESSION,"grafoTrans",Socio.java(126:21-126:31),"grafoTrans"
358,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(126:21-126:31),"Socio"
359,DECLAREDREFERENCEEXPRESSION,"idNovo",Socio.java(126:47-126:53),"idNovo"
360,DECLAREDREFERENCEEXPRESSION,"idAluno",Socio.java(126:54-126:61),"idAluno"
361,PARAMVARIABLEDECLARATION,"j",main.java(201:36-201:41),"int j"
362,PARAMVARIABLEDECLARATION,"i",main.java(201:29-201:34),"int i"
363,PARAMVARIABLEDECLARATION,"valor_ij",main.java(201:43-201:55),"int valor_ij"
364,DECLAREDREFERENCEEXPRESSION,"insert_new_arc",Socio.java(125:27-125:41),"insert_new_arc"
365,LITERAL,"",Socio.java(125:57-125:58),"0"
366,DECLAREDREFERENCEEXPRESSION,"idNovo",Socio.java(125:50-125:56),"idNovo"
367,DECLAREDREFERENCEEXPRESSION,"idAluno",Socio.java(125:42-125:49),"idAluno"
368,MEMBEREXPRESSION,"grafo",Socio.java(125:21-125:26),"grafo"
369,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(125:21-125:26),"Socio"
370,MEMBERCALLEXPRESSION,"nextInt",Socio.java(124:28-124:40),"in.nextInt()"
371,DECLAREDREFERENCEEXPRESSION,"nextInt",Socio.java(124:31-124:38),"nextInt"
372,DECLAREDREFERENCEEXPRESSION,"in",Socio.java(124:28-124:30),"in"
373,MEMBERCALLEXPRESSION,"nextInt",Socio.java(120:29-120:41),"in.nextInt()"
374,DECLAREDREFERENCEEXPRESSION,"nextInt",Socio.java(120:32-120:39),"nextInt"
375,UNINITIALIZEDVALUE,"Uninitialized Value",,""
376,MEMBERCALLEXPRESSION,"nextInt",Socio.java(121:26-121:38),"in.nextInt()"
377,DECLAREDREFERENCEEXPRESSION,"nextInt",Socio.java(121:29-121:36),"nextInt"
378,DECLAREDREFERENCEEXPRESSION,"println",Socio.java(140:24-140:31),"println"
379,BINARYOPERATOR,"+",Socio.java(140:32-140:48),"""Caso #"" + (i+1)"
380,LITERAL,"",Socio.java(140:32-140:40),"""Caso #"""
381,BINARYOPERATOR,"+",Socio.java(140:44-140:47),"i+1"
382,DECLAREDREFERENCEEXPRESSION,"i",Socio.java(140:44-140:45),"i"
383,LITERAL,"",Socio.java(140:46-140:47),"1"
384,MEMBEREXPRESSION,"out",Socio.java(140:13-140:23),"System.out"
385,MEMBEREXPRESSION,"visitado",Socio.java(115:13-115:21),"visitado"
386,ARRAYCREATIONEXPRESSION,"",Socio.java(115:22-115:44),"new boolean[nAlunos+1]"
387,BINARYOPERATOR,"+",Socio.java(115:34-115:43),"nAlunos+1"
388,DECLAREDREFERENCEEXPRESSION,"nAlunos",Socio.java(115:34-115:41),"nAlunos"
389,LITERAL,"",Socio.java(115:42-115:43),"1"
390,NEWEXPRESSION,"",Socio.java(110:20-110:42),"new Scanner(System.in)"
391,CONSTRUCTEXPRESSION,"",Socio.java(110:20-110:42),"new Scanner(System.in)"
392,MEMBEREXPRESSION,"in",Socio.java(110:32-110:41),"System.in"
393,MEMBERCALLEXPRESSION,"nextInt",Socio.java(111:18-111:30),"in.nextInt()"
394,DECLAREDREFERENCEEXPRESSION,"nextInt",Socio.java(111:21-111:28),"nextInt"
395,VARIABLEDECLARATION,"this",,""
396,COMPOUNDSTATEMENT,"",Socio.java(79:35-88:3),"{
		if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafo.verts[j].adjs) 
				DFS(arco.no_final);
			// adicionar a pilha
			pilha.addLast(j);
		}
	}"
397,CALLEXPRESSION,"DFS",Socio.java(84:5-84:24),"DFS(arco.no_final);"
398,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(80:7-80:15),"Socio"
399,RETURNSTATEMENT,"",,""
400,MEMBEREXPRESSION,"no_final",Socio.java(84:9-84:22),"arco.no_final"
401,IFSTATEMENT,"",Socio.java(80:3-87:4),"if(!visitado[j]) {
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafo.verts[j].adjs) 
				DFS(arco.no_final);
			// adicionar a pilha
			pilha.addLast(j);
		}"
402,UNARYOPERATOR,"!",Socio.java(80:6-80:18),"!visitado[j]"
403,COMPOUNDSTATEMENT,"",Socio.java(80:20-87:4),"{
			visitado[j] = true;
			// visitar todos os arcos adjacentes ao no visitado
			for(Arco arco: grafo.verts[j].adjs) 
				DFS(arco.no_final);
			// adicionar a pilha
			pilha.addLast(j);
		}"
404,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(81:4-81:12),"Socio"
405,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(80:7-80:18),"visitado[j]"
406,MEMBEREXPRESSION,"visitado",Socio.java(80:7-80:15),"visitado"
407,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(80:16-80:17),"j"
408,BINARYOPERATOR,"=",Socio.java(81:4-81:23),"visitado[j] = true;"
409,FOREACHSTATEMENT,"",Socio.java(83:4-84:24),"for(Arco arco: grafo.verts[j].adjs) 
				DFS(arco.no_final);"
410,MEMBERCALLEXPRESSION,"addLast",Socio.java(86:4-86:21),"pilha.addLast(j);"
411,DECLARATIONSTATEMENT,"",Socio.java(83:8-83:17),"Arco arco"
412,MEMBEREXPRESSION,"adjs",Socio.java(83:19-83:38),"grafo.verts[j].adjs"
413,VARIABLEDECLARATION,"arco",Socio.java(83:13-83:17),"arco"
414,DECLAREDREFERENCEEXPRESSION,"arco",Socio.java(84:9-84:13),"arco"
415,DECLAREDREFERENCEEXPRESSION,"Socio",Socio.java(86:4-86:9),"Socio"
416,DECLAREDREFERENCEEXPRESSION,"grafo",Socio.java(83:19-83:24),"grafo"
417,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(83:19-83:33),"grafo.verts[j]"
418,UNINITIALIZEDVALUE,"Uninitialized Value",,""
419,MEMBEREXPRESSION,"verts",Socio.java(83:19-83:30),"grafo.verts"
420,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(83:31-83:32),"j"
421,DECLAREDREFERENCEEXPRESSION,"addLast",Socio.java(86:10-86:17),"addLast"
422,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(86:18-86:19),"j"
423,MEMBEREXPRESSION,"pilha",Socio.java(86:4-86:9),"pilha"
424,ARRAYSUBSCRIPTIONEXPRESSION,"",Socio.java(81:4-81:15),"visitado[j]"
425,LITERAL,"",Socio.java(81:18-81:22),"true"
426,MEMBEREXPRESSION,"visitado",Socio.java(81:4-81:12),"visitado"
427,DECLAREDREFERENCEEXPRESSION,"j",Socio.java(81:13-81:14),"j"
