id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000019/submissions/05004073_Sociologia_up201108941/main.java",,""
2,RECORDDECLARATION,"Arco",main.java(14:1-30:2),"class Arco {
	int no_final;
	int valor;

	Arco(int fim, int v) {
		no_final = fim;
		valor = v;
	}

	int extremo_final() {
		return no_final;
	}

	int valor_arco() {
		return valor;
	}
}"
3,RECORDDECLARATION,"No",main.java(32:1-40:2),"class No {
	// int label;
	LinkedList<Arco> adjs;
	boolean visitado = false;

	No() {
		adjs = new LinkedList<Arco>();
	}
}"
4,RECORDDECLARATION,"Grafo",main.java(42:1-78:2),"class Grafo {
	No verts[];
	int nvs, narcos;

	public Grafo(int n) {
		nvs = n;
		narcos = 0;
		verts = new No[n + 1];
		for (int i = 0; i <= n; i++)
			verts[i] = new No();
		// para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
	}

	public int num_vertices() {
		return nvs;
	}

	public int num_arcos() {
		return narcos;
	}

	public LinkedList<Arco> adjs_no(int i) {
		return verts[i].adjs;
	}

	public void insert_new_arc(int i, int j, int valor_ij) {
		verts[i].adjs.addFirst(new Arco(j, valor_ij));
		narcos++;
	}

	public Arco find_arc(int i, int j) {
		for (Arco adj : adjs_no(i))
			if (adj.extremo_final() == j)
				return adj;
		return null;
	}
}"
5,RECORDDECLARATION,"main",main.java(80:1-182:2),"public class main {

	public static Stack<Integer> DFS(Grafo g) {
		Stack<Integer> s = new Stack<Integer>();
		int visitados[] = new int[g.num_vertices() + 1];
		for (int i = 1; i <= g.num_vertices(); i++) {
			visitados[i] = 0;
		}
		for (int i = 1; i <= g.num_vertices(); i++) {
			if (visitados[i] == 0)
				DFS_Visit(i, g, s, visitados);
		}
		return s;
	}

	public static void DFS_Visit(int v, Grafo g, Stack<Integer> s,
			int[] visitados) {
		visitados[v] = 1;
		for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0) {
				DFS_Visit(w, g, s, visitados);
			}
		}
		s.push(v);
	}

	public static int DFS_V_Transp(int v, Grafo g, int[] visitados) {
		int c = 1;
		visitados[v] = 1;
		for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0)
				c += DFS_V_Transp(w, g, visitados);
		}
		return c;
	}

	public static Grafo lerGrafo(Scanner stdin) {
		int nAlunos = stdin.nextInt();
		Grafo g = new Grafo(nAlunos);
		for (int j = 0; j < nAlunos; j++) {
			int aluno = stdin.nextInt();
			int nAmigos = stdin.nextInt();
			for (int k = 0; k < nAmigos; k++) {
				int amigos = stdin.nextInt();
				g.insert_new_arc(aluno, amigos, 0);

			}
		}
		return g;
	}

	public static Grafo gTransp(Grafo g) {
		Grafo gt = new Grafo(g.num_vertices());
		for (int i = 1; i <= g.num_vertices(); i++) {
			for (Arco a : g.adjs_no(i)) {
				int w = a.extremo_final();
				gt.insert_new_arc(w, i, 0);
			}
		}
		return gt;
	}

	public static void main(String[] args) {

		Scanner stdin = new Scanner(System.in);
		Stack<Integer> s = new Stack<Integer>();
		int nCenarios = 0;

		Grafo g;

		nCenarios = stdin.nextInt();
		for (int i = 0; i < nCenarios; i++) {
			g = lerGrafo(stdin);
			System.out.println(""Caso #"" + (i + 1));
			s = DFS(g);

			int dentroGrupo = 0;
			int foraGrupo = 0;

			Grafo gt = gTransp(g);

			int[] visitados = new int[gt.num_vertices() + 1];
			for (int v = 1; v <= g.num_vertices(); v++)
				visitados[v] = 0;
			while (!s.isEmpty()) {
				int v = s.pop();
				if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}
			}
			System.out.println(dentroGrupo + "" "" + foraGrupo);
		}

	}

}"
6,INCLUDEDECLARATION,"java.text.DateFormatSymbols",,""
7,INCLUDEDECLARATION,"java.util.LinkedList",,""
8,INCLUDEDECLARATION,"java.util.Scanner",,""
9,INCLUDEDECLARATION,"java.util.Stack",,""
10,FIELDDECLARATION,"this",,""
11,FIELDDECLARATION,"adjs",main.java(34:2-34:24),"adjs"
12,FIELDDECLARATION,"visitado",main.java(35:2-35:27),"visitado = false"
13,CONSTRUCTORDECLARATION,"No",main.java(37:2-39:3),"No() {
		adjs = new LinkedList<Arco>();
	}"
14,LITERAL,"",main.java(35:21-35:26),"false"
15,COMPOUNDSTATEMENT,"",main.java(37:7-39:3),"{
		adjs = new LinkedList<Arco>();
	}"
16,DECLAREDREFERENCEEXPRESSION,"this",main.java(38:3-38:7),"this"
17,RETURNSTATEMENT,"",,""
18,BINARYOPERATOR,"=",main.java(38:3-38:33),"adjs = new LinkedList<Arco>();"
19,MEMBEREXPRESSION,"adjs",main.java(38:3-38:7),"adjs"
20,NEWEXPRESSION,"",main.java(38:10-38:32),"new LinkedList<Arco>()"
21,CONSTRUCTEXPRESSION,"",main.java(38:10-38:32),"new LinkedList<Arco>()"
22,FIELDDECLARATION,"this",,""
23,METHODDECLARATION,"DFS",main.java(82:2-93:3),"public static Stack<Integer> DFS(Grafo g) {
		Stack<Integer> s = new Stack<Integer>();
		int visitados[] = new int[g.num_vertices() + 1];
		for (int i = 1; i <= g.num_vertices(); i++) {
			visitados[i] = 0;
		}
		for (int i = 1; i <= g.num_vertices(); i++) {
			if (visitados[i] == 0)
				DFS_Visit(i, g, s, visitados);
		}
		return s;
	}"
24,METHODDECLARATION,"DFS_Visit",main.java(95:2-105:3),"public static void DFS_Visit(int v, Grafo g, Stack<Integer> s,
			int[] visitados) {
		visitados[v] = 1;
		for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0) {
				DFS_Visit(w, g, s, visitados);
			}
		}
		s.push(v);
	}"
25,METHODDECLARATION,"DFS_V_Transp",main.java(107:2-116:3),"public static int DFS_V_Transp(int v, Grafo g, int[] visitados) {
		int c = 1;
		visitados[v] = 1;
		for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0)
				c += DFS_V_Transp(w, g, visitados);
		}
		return c;
	}"
26,METHODDECLARATION,"lerGrafo",main.java(118:2-131:3),"public static Grafo lerGrafo(Scanner stdin) {
		int nAlunos = stdin.nextInt();
		Grafo g = new Grafo(nAlunos);
		for (int j = 0; j < nAlunos; j++) {
			int aluno = stdin.nextInt();
			int nAmigos = stdin.nextInt();
			for (int k = 0; k < nAmigos; k++) {
				int amigos = stdin.nextInt();
				g.insert_new_arc(aluno, amigos, 0);

			}
		}
		return g;
	}"
27,METHODDECLARATION,"gTransp",main.java(133:2-142:3),"public static Grafo gTransp(Grafo g) {
		Grafo gt = new Grafo(g.num_vertices());
		for (int i = 1; i <= g.num_vertices(); i++) {
			for (Arco a : g.adjs_no(i)) {
				int w = a.extremo_final();
				gt.insert_new_arc(w, i, 0);
			}
		}
		return gt;
	}"
28,METHODDECLARATION,"main",main.java(144:2-180:3),"public static void main(String[] args) {

		Scanner stdin = new Scanner(System.in);
		Stack<Integer> s = new Stack<Integer>();
		int nCenarios = 0;

		Grafo g;

		nCenarios = stdin.nextInt();
		for (int i = 0; i < nCenarios; i++) {
			g = lerGrafo(stdin);
			System.out.println(""Caso #"" + (i + 1));
			s = DFS(g);

			int dentroGrupo = 0;
			int foraGrupo = 0;

			Grafo gt = gTransp(g);

			int[] visitados = new int[gt.num_vertices() + 1];
			for (int v = 1; v <= g.num_vertices(); v++)
				visitados[v] = 0;
			while (!s.isEmpty()) {
				int v = s.pop();
				if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}
			}
			System.out.println(dentroGrupo + "" "" + foraGrupo);
		}

	}"
29,CONSTRUCTORDECLARATION,"main",,""
30,VARIABLEDECLARATION,"this",,""
31,COMPOUNDSTATEMENT,"",main.java(96:21-105:3),"{
		visitados[v] = 1;
		for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0) {
				DFS_Visit(w, g, s, visitados);
			}
		}
		s.push(v);
	}"
32,PARAMVARIABLEDECLARATION,"v",main.java(95:31-95:36),"int v"
33,PARAMVARIABLEDECLARATION,"g",main.java(95:38-95:45),"Grafo g"
34,PARAMVARIABLEDECLARATION,"s",main.java(95:47-95:63),"Stack<Integer> s"
35,PARAMVARIABLEDECLARATION,"visitados",main.java(96:4-96:19),"int[] visitados"
36,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(97:3-97:12),"visitados"
37,RETURNSTATEMENT,"",,""
38,BINARYOPERATOR,"=",main.java(97:3-97:20),"visitados[v] = 1;"
39,FOREACHSTATEMENT,"",main.java(98:3-103:4),"for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0) {
				DFS_Visit(w, g, s, visitados);
			}
		}"
40,MEMBERCALLEXPRESSION,"push",main.java(104:3-104:13),"s.push(v);"
41,DECLARATIONSTATEMENT,"",main.java(98:8-98:14),"Arco a"
42,MEMBERCALLEXPRESSION,"adjs_no",main.java(98:17-98:29),"g.adjs_no(v)"
43,COMPOUNDSTATEMENT,"",main.java(98:31-103:4),"{
			int w = a.extremo_final();
			if (visitados[w] == 0) {
				DFS_Visit(w, g, s, visitados);
			}
		}"
44,VARIABLEDECLARATION,"a",main.java(98:13-98:14),"a"
45,DECLAREDREFERENCEEXPRESSION,"a",main.java(99:12-99:13),"a"
46,DECLAREDREFERENCEEXPRESSION,"s",main.java(104:3-104:4),"s"
47,DECLARATIONSTATEMENT,"",main.java(99:4-99:30),"int w = a.extremo_final();"
48,IFSTATEMENT,"",main.java(100:4-102:5),"if (visitados[w] == 0) {
				DFS_Visit(w, g, s, visitados);
			}"
49,VARIABLEDECLARATION,"w",main.java(99:8-99:29),"w = a.extremo_final()"
50,DECLAREDREFERENCEEXPRESSION,"g",main.java(98:17-98:18),"g"
51,COMPOUNDSTATEMENT,"",main.java(100:27-102:5),"{
				DFS_Visit(w, g, s, visitados);
			}"
52,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(100:8-100:17),"visitados"
53,MEMBERCALLEXPRESSION,"extremo_final",main.java(99:12-99:29),"a.extremo_final()"
54,DECLAREDREFERENCEEXPRESSION,"extremo_final",main.java(99:14-99:27),"extremo_final"
55,METHODDECLARATION,"extremo_final",main.java(158:2-160:3),"int extremo_final() {
		return no_final;
	}"
56,BINARYOPERATOR,"==",main.java(100:8-100:25),"visitados[w] == 0"
57,DECLAREDREFERENCEEXPRESSION,"w",main.java(101:15-101:16),"w"
58,CALLEXPRESSION,"DFS_Visit",main.java(101:5-101:35),"DFS_Visit(w, g, s, visitados);"
59,METHODDECLARATION,"DFS_Visit",,""
60,DECLAREDREFERENCEEXPRESSION,"g",main.java(101:18-101:19),"g"
61,DECLAREDREFERENCEEXPRESSION,"s",main.java(101:21-101:22),"s"
62,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(101:24-101:33),"visitados"
63,PARAMVARIABLEDECLARATION,"int0",,""
64,PARAMVARIABLEDECLARATION,"java.util.stack2",,""
65,PARAMVARIABLEDECLARATION,"grafo1",,""
66,PARAMVARIABLEDECLARATION,"intPtr3",,""
67,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(100:8-100:20),"visitados[w]"
68,LITERAL,"",main.java(100:24-100:25),"0"
69,DECLAREDREFERENCEEXPRESSION,"w",main.java(100:18-100:19),"w"
70,UNINITIALIZEDVALUE,"Uninitialized Value",,""
71,DECLAREDREFERENCEEXPRESSION,"adjs_no",main.java(98:19-98:26),"adjs_no"
72,METHODDECLARATION,"adjs_no",main.java(197:2-199:3),"public LinkedList<Arco> adjs_no(int i) {
		return verts[i].adjs;
	}"
73,DECLAREDREFERENCEEXPRESSION,"v",main.java(98:27-98:28),"v"
74,PARAMVARIABLEDECLARATION,"i",main.java(197:34-197:39),"int i"
75,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(97:3-97:15),"visitados[v]"
76,LITERAL,"",main.java(97:18-97:19),"1"
77,DECLAREDREFERENCEEXPRESSION,"v",main.java(97:13-97:14),"v"
78,DECLAREDREFERENCEEXPRESSION,"push",main.java(104:5-104:9),"push"
79,DECLAREDREFERENCEEXPRESSION,"v",main.java(104:10-104:11),"v"
80,VARIABLEDECLARATION,"this",,""
81,COMPOUNDSTATEMENT,"",main.java(144:41-180:3),"{

		Scanner stdin = new Scanner(System.in);
		Stack<Integer> s = new Stack<Integer>();
		int nCenarios = 0;

		Grafo g;

		nCenarios = stdin.nextInt();
		for (int i = 0; i < nCenarios; i++) {
			g = lerGrafo(stdin);
			System.out.println(""Caso #"" + (i + 1));
			s = DFS(g);

			int dentroGrupo = 0;
			int foraGrupo = 0;

			Grafo gt = gTransp(g);

			int[] visitados = new int[gt.num_vertices() + 1];
			for (int v = 1; v <= g.num_vertices(); v++)
				visitados[v] = 0;
			while (!s.isEmpty()) {
				int v = s.pop();
				if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}
			}
			System.out.println(dentroGrupo + "" "" + foraGrupo);
		}

	}"
82,PARAMVARIABLEDECLARATION,"args",main.java(144:26-144:39),"String[] args"
83,DECLAREDREFERENCEEXPRESSION,"System",main.java(146:31-146:37),"System"
84,RETURNSTATEMENT,"",,""
85,DECLARATIONSTATEMENT,"",main.java(146:3-146:42),"Scanner stdin = new Scanner(System.in);"
86,DECLARATIONSTATEMENT,"",main.java(147:3-147:43),"Stack<Integer> s = new Stack<Integer>();"
87,DECLARATIONSTATEMENT,"",main.java(148:3-148:21),"int nCenarios = 0;"
88,DECLARATIONSTATEMENT,"",main.java(150:3-150:11),"Grafo g;"
89,BINARYOPERATOR,"=",main.java(152:3-152:31),"nCenarios = stdin.nextInt();"
90,FORSTATEMENT,"",main.java(153:3-178:4),"for (int i = 0; i < nCenarios; i++) {
			g = lerGrafo(stdin);
			System.out.println(""Caso #"" + (i + 1));
			s = DFS(g);

			int dentroGrupo = 0;
			int foraGrupo = 0;

			Grafo gt = gTransp(g);

			int[] visitados = new int[gt.num_vertices() + 1];
			for (int v = 1; v <= g.num_vertices(); v++)
				visitados[v] = 0;
			while (!s.isEmpty()) {
				int v = s.pop();
				if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}
			}
			System.out.println(dentroGrupo + "" "" + foraGrupo);
		}"
91,VARIABLEDECLARATION,"stdin",main.java(146:11-146:41),"stdin = new Scanner(System.in)"
92,VARIABLEDECLARATION,"s",main.java(147:18-147:42),"s = new Stack<Integer>()"
93,VARIABLEDECLARATION,"nCenarios",main.java(148:7-148:20),"nCenarios = 0"
94,VARIABLEDECLARATION,"g",main.java(150:9-150:10),"g"
95,CONSTRUCTEXPRESSION,"",main.java(147:22-147:42),"new Stack<Integer>()"
96,LITERAL,"",main.java(148:19-148:20),"0"
97,NEWEXPRESSION,"",main.java(147:22-147:42),"new Stack<Integer>()"
98,DECLAREDREFERENCEEXPRESSION,"nCenarios",main.java(152:3-152:12),"nCenarios"
99,UNINITIALIZEDVALUE,"Uninitialized Value",,""
100,MEMBERCALLEXPRESSION,"nextInt",main.java(152:15-152:30),"stdin.nextInt()"
101,LITERAL,"",main.java(153:16-153:17),"0"
102,DECLAREDREFERENCEEXPRESSION,"stdin",main.java(152:15-152:20),"stdin"
103,DECLAREDREFERENCEEXPRESSION,"nextInt",main.java(152:21-152:28),"nextInt"
104,NEWEXPRESSION,"",main.java(146:19-146:41),"new Scanner(System.in)"
105,CONSTRUCTEXPRESSION,"",main.java(146:19-146:41),"new Scanner(System.in)"
106,MEMBEREXPRESSION,"in",main.java(146:31-146:40),"System.in"
107,COMPOUNDSTATEMENT,"",main.java(153:39-178:4),"{
			g = lerGrafo(stdin);
			System.out.println(""Caso #"" + (i + 1));
			s = DFS(g);

			int dentroGrupo = 0;
			int foraGrupo = 0;

			Grafo gt = gTransp(g);

			int[] visitados = new int[gt.num_vertices() + 1];
			for (int v = 1; v <= g.num_vertices(); v++)
				visitados[v] = 0;
			while (!s.isEmpty()) {
				int v = s.pop();
				if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}
			}
			System.out.println(dentroGrupo + "" "" + foraGrupo);
		}"
108,DECLARATIONSTATEMENT,"",main.java(153:8-153:17),"int i = 0"
109,BINARYOPERATOR,"<",main.java(153:19-153:32),"i < nCenarios"
110,UNARYOPERATOR,"++",main.java(153:34-153:37),"i++"
111,VARIABLEDECLARATION,"i",main.java(153:12-153:17),"i = 0"
112,DECLAREDREFERENCEEXPRESSION,"g",main.java(154:4-154:5),"g"
113,DECLAREDREFERENCEEXPRESSION,"i",main.java(153:19-153:20),"i"
114,DECLAREDREFERENCEEXPRESSION,"nCenarios",main.java(153:23-153:32),"nCenarios"
115,BINARYOPERATOR,"=",main.java(154:4-154:24),"g = lerGrafo(stdin);"
116,MEMBERCALLEXPRESSION,"println",main.java(155:4-155:43),"System.out.println(""Caso #"" + (i + 1));"
117,BINARYOPERATOR,"=",main.java(156:4-156:15),"s = DFS(g);"
118,DECLARATIONSTATEMENT,"",main.java(158:4-158:24),"int dentroGrupo = 0;"
119,DECLARATIONSTATEMENT,"",main.java(159:4-159:22),"int foraGrupo = 0;"
120,DECLARATIONSTATEMENT,"",main.java(161:4-161:26),"Grafo gt = gTransp(g);"
121,DECLARATIONSTATEMENT,"",main.java(163:4-163:53),"int[] visitados = new int[gt.num_vertices() + 1];"
122,FORSTATEMENT,"",main.java(164:4-165:22),"for (int v = 1; v <= g.num_vertices(); v++)
				visitados[v] = 0;"
123,WHILESTATEMENT,"",main.java(166:4-176:5),"while (!s.isEmpty()) {
				int v = s.pop();
				if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}
			}"
124,MEMBERCALLEXPRESSION,"println",main.java(177:4-177:54),"System.out.println(dentroGrupo + "" "" + foraGrupo);"
125,VARIABLEDECLARATION,"dentroGrupo",main.java(158:8-158:23),"dentroGrupo = 0"
126,VARIABLEDECLARATION,"foraGrupo",main.java(159:8-159:21),"foraGrupo = 0"
127,VARIABLEDECLARATION,"gt",main.java(161:10-161:25),"gt = gTransp(g)"
128,VARIABLEDECLARATION,"visitados",main.java(163:10-163:52),"visitados = new int[gt.num_vertices() + 1]"
129,DECLAREDREFERENCEEXPRESSION,"i",main.java(153:34-153:35),"i"
130,DECLAREDREFERENCEEXPRESSION,"g",main.java(161:23-161:24),"g"
131,DECLAREDREFERENCEEXPRESSION,"s",main.java(156:4-156:5),"s"
132,CALLEXPRESSION,"DFS",main.java(156:8-156:14),"DFS(g)"
133,LITERAL,"",main.java(158:22-158:23),"0"
134,METHODDECLARATION,"DFS",,""
135,DECLAREDREFERENCEEXPRESSION,"g",main.java(156:12-156:13),"g"
136,PARAMVARIABLEDECLARATION,"grafo0",,""
137,DECLAREDREFERENCEEXPRESSION,"gt",main.java(163:30-163:32),"gt"
138,LITERAL,"",main.java(159:20-159:21),"0"
139,BINARYOPERATOR,"=",main.java(165:5-165:22),"visitados[v] = 0;"
140,DECLARATIONSTATEMENT,"",main.java(164:9-164:18),"int v = 1"
141,BINARYOPERATOR,"<=",main.java(164:20-164:41),"v <= g.num_vertices()"
142,UNARYOPERATOR,"++",main.java(164:43-164:46),"v++"
143,VARIABLEDECLARATION,"v",main.java(164:13-164:18),"v = 1"
144,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(165:5-165:14),"visitados"
145,DECLAREDREFERENCEEXPRESSION,"s",main.java(166:12-166:13),"s"
146,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(165:5-165:17),"visitados[v]"
147,LITERAL,"",main.java(165:20-165:21),"0"
148,DECLAREDREFERENCEEXPRESSION,"v",main.java(164:43-164:44),"v"
149,DECLAREDREFERENCEEXPRESSION,"v",main.java(165:15-165:16),"v"
150,DECLAREDREFERENCEEXPRESSION,"v",main.java(164:20-164:21),"v"
151,MEMBERCALLEXPRESSION,"num_vertices",main.java(164:25-164:41),"g.num_vertices()"
152,DECLAREDREFERENCEEXPRESSION,"g",main.java(164:25-164:26),"g"
153,DECLAREDREFERENCEEXPRESSION,"num_vertices",main.java(164:27-164:39),"num_vertices"
154,METHODDECLARATION,"num_vertices",main.java(189:2-191:3),"public int num_vertices() {
		return nvs;
	}"
155,LITERAL,"",main.java(164:17-164:18),"1"
156,DECLAREDREFERENCEEXPRESSION,"println",main.java(155:15-155:22),"println"
157,BINARYOPERATOR,"+",main.java(155:23-155:41),"""Caso #"" + (i + 1)"
158,LITERAL,"",main.java(155:23-155:31),"""Caso #"""
159,BINARYOPERATOR,"+",main.java(155:35-155:40),"i + 1"
160,DECLAREDREFERENCEEXPRESSION,"i",main.java(155:35-155:36),"i"
161,LITERAL,"",main.java(155:39-155:40),"1"
162,MEMBEREXPRESSION,"out",main.java(155:4-155:14),"System.out"
163,DECLAREDREFERENCEEXPRESSION,"System",main.java(155:4-155:10),"System"
164,DECLAREDREFERENCEEXPRESSION,"println",main.java(177:15-177:22),"println"
165,BINARYOPERATOR,"+",main.java(177:23-177:52),"dentroGrupo + "" "" + foraGrupo"
166,MEMBEREXPRESSION,"out",main.java(177:4-177:14),"System.out"
167,DECLAREDREFERENCEEXPRESSION,"System",main.java(177:4-177:10),"System"
168,DECLAREDREFERENCEEXPRESSION,"dentroGrupo",main.java(177:23-177:34),"dentroGrupo"
169,BINARYOPERATOR,"+",main.java(177:23-177:40),"dentroGrupo + "" """
170,DECLAREDREFERENCEEXPRESSION,"foraGrupo",main.java(177:43-177:52),"foraGrupo"
171,LITERAL,"",main.java(177:37-177:40),""" """
172,ARRAYCREATIONEXPRESSION,"",main.java(163:22-163:52),"new int[gt.num_vertices() + 1]"
173,BINARYOPERATOR,"+",main.java(163:30-163:51),"gt.num_vertices() + 1"
174,MEMBERCALLEXPRESSION,"num_vertices",main.java(163:30-163:47),"gt.num_vertices()"
175,LITERAL,"",main.java(163:50-163:51),"1"
176,DECLAREDREFERENCEEXPRESSION,"num_vertices",main.java(163:33-163:45),"num_vertices"
177,CALLEXPRESSION,"gTransp",main.java(161:15-161:25),"gTransp(g)"
178,METHODDECLARATION,"gTransp",,""
179,PARAMVARIABLEDECLARATION,"grafo0",,""
180,CALLEXPRESSION,"lerGrafo",main.java(154:8-154:23),"lerGrafo(stdin)"
181,DECLAREDREFERENCEEXPRESSION,"stdin",main.java(154:17-154:22),"stdin"
182,METHODDECLARATION,"lerGrafo",,""
183,PARAMVARIABLEDECLARATION,"java.util.scanner0",,""
184,UNARYOPERATOR,"!",main.java(166:11-166:23),"!s.isEmpty()"
185,COMPOUNDSTATEMENT,"",main.java(166:25-176:5),"{
				int v = s.pop();
				if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}
			}"
186,DECLAREDREFERENCEEXPRESSION,"s",main.java(167:13-167:14),"s"
187,DECLARATIONSTATEMENT,"",main.java(167:5-167:21),"int v = s.pop();"
188,IFSTATEMENT,"",main.java(168:5-175:6),"if (visitados[v] == 0) {
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}"
189,VARIABLEDECLARATION,"v",main.java(167:9-167:20),"v = s.pop()"
190,COMPOUNDSTATEMENT,"",main.java(168:28-175:6),"{
					int c = DFS_V_Transp(v, gt, visitados);
					if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}
				}"
191,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(168:9-168:18),"visitados"
192,MEMBERCALLEXPRESSION,"pop",main.java(167:13-167:20),"s.pop()"
193,DECLAREDREFERENCEEXPRESSION,"pop",main.java(167:15-167:18),"pop"
194,BINARYOPERATOR,"==",main.java(168:9-168:26),"visitados[v] == 0"
195,DECLAREDREFERENCEEXPRESSION,"v",main.java(169:27-169:28),"v"
196,DECLARATIONSTATEMENT,"",main.java(169:6-169:45),"int c = DFS_V_Transp(v, gt, visitados);"
197,IFSTATEMENT,"",main.java(170:6-174:7),"if (c >= 4) {
						dentroGrupo++;
					} else {
						foraGrupo += c;
					}"
198,VARIABLEDECLARATION,"c",main.java(169:10-169:44),"c = DFS_V_Transp(v, gt, visitados)"
199,COMPOUNDSTATEMENT,"",main.java(170:18-172:7),"{
						dentroGrupo++;
					}"
200,COMPOUNDSTATEMENT,"",main.java(172:13-174:7),"{
						foraGrupo += c;
					}"
201,DECLAREDREFERENCEEXPRESSION,"c",main.java(170:10-170:11),"c"
202,CALLEXPRESSION,"DFS_V_Transp",main.java(169:14-169:44),"DFS_V_Transp(v, gt, visitados)"
203,METHODDECLARATION,"DFS_V_Transp",,""
204,DECLAREDREFERENCEEXPRESSION,"gt",main.java(169:30-169:32),"gt"
205,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(169:34-169:43),"visitados"
206,PARAMVARIABLEDECLARATION,"grafo1",,""
207,PARAMVARIABLEDECLARATION,"intPtr2",,""
208,PARAMVARIABLEDECLARATION,"int0",,""
209,BINARYOPERATOR,">=",main.java(170:10-170:16),"c >= 4"
210,DECLAREDREFERENCEEXPRESSION,"dentroGrupo",main.java(171:7-171:18),"dentroGrupo"
211,DECLAREDREFERENCEEXPRESSION,"foraGrupo",main.java(173:7-173:16),"foraGrupo"
212,BINARYOPERATOR,"+=",main.java(173:7-173:22),"foraGrupo += c;"
213,DECLAREDREFERENCEEXPRESSION,"c",main.java(173:20-173:21),"c"
214,UNARYOPERATOR,"++",main.java(171:7-171:21),"dentroGrupo++;"
215,LITERAL,"",main.java(170:15-170:16),"4"
216,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(168:9-168:21),"visitados[v]"
217,LITERAL,"",main.java(168:25-168:26),"0"
218,DECLAREDREFERENCEEXPRESSION,"v",main.java(168:19-168:20),"v"
219,MEMBERCALLEXPRESSION,"isEmpty",main.java(166:12-166:23),"s.isEmpty()"
220,DECLAREDREFERENCEEXPRESSION,"isEmpty",main.java(166:14-166:21),"isEmpty"
221,VARIABLEDECLARATION,"this",,""
222,COMPOUNDSTATEMENT,"",main.java(82:44-93:3),"{
		Stack<Integer> s = new Stack<Integer>();
		int visitados[] = new int[g.num_vertices() + 1];
		for (int i = 1; i <= g.num_vertices(); i++) {
			visitados[i] = 0;
		}
		for (int i = 1; i <= g.num_vertices(); i++) {
			if (visitados[i] == 0)
				DFS_Visit(i, g, s, visitados);
		}
		return s;
	}"
223,PARAMVARIABLEDECLARATION,"g",main.java(82:35-82:42),"Grafo g"
224,CONSTRUCTEXPRESSION,"",main.java(83:22-83:42),"new Stack<Integer>()"
225,RETURNSTATEMENT,"",main.java(92:3-92:12),"return s;"
226,DECLARATIONSTATEMENT,"",main.java(83:3-83:43),"Stack<Integer> s = new Stack<Integer>();"
227,DECLARATIONSTATEMENT,"",main.java(84:3-84:51),"int visitados[] = new int[g.num_vertices() + 1];"
228,FORSTATEMENT,"",main.java(85:3-87:4),"for (int i = 1; i <= g.num_vertices(); i++) {
			visitados[i] = 0;
		}"
229,FORSTATEMENT,"",main.java(88:3-91:4),"for (int i = 1; i <= g.num_vertices(); i++) {
			if (visitados[i] == 0)
				DFS_Visit(i, g, s, visitados);
		}"
230,VARIABLEDECLARATION,"s",main.java(83:18-83:42),"s = new Stack<Integer>()"
231,VARIABLEDECLARATION,"visitados",main.java(84:7-84:50),"visitados[] = new int[g.num_vertices() + 1]"
232,DECLAREDREFERENCEEXPRESSION,"s",main.java(92:10-92:11),"s"
233,COMPOUNDSTATEMENT,"",main.java(85:47-87:4),"{
			visitados[i] = 0;
		}"
234,DECLARATIONSTATEMENT,"",main.java(85:8-85:17),"int i = 1"
235,BINARYOPERATOR,"<=",main.java(85:19-85:40),"i <= g.num_vertices()"
236,UNARYOPERATOR,"++",main.java(85:42-85:45),"i++"
237,VARIABLEDECLARATION,"i",main.java(85:12-85:17),"i = 1"
238,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(86:4-86:13),"visitados"
239,LITERAL,"",main.java(88:16-88:17),"1"
240,LITERAL,"",main.java(85:16-85:17),"1"
241,DECLAREDREFERENCEEXPRESSION,"i",main.java(85:42-85:43),"i"
242,DECLAREDREFERENCEEXPRESSION,"i",main.java(85:19-85:20),"i"
243,MEMBERCALLEXPRESSION,"num_vertices",main.java(85:24-85:40),"g.num_vertices()"
244,DECLAREDREFERENCEEXPRESSION,"num_vertices",main.java(85:26-85:38),"num_vertices"
245,DECLAREDREFERENCEEXPRESSION,"g",main.java(85:24-85:25),"g"
246,BINARYOPERATOR,"=",main.java(86:4-86:21),"visitados[i] = 0;"
247,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(86:4-86:16),"visitados[i]"
248,LITERAL,"",main.java(86:19-86:20),"0"
249,DECLAREDREFERENCEEXPRESSION,"i",main.java(86:14-86:15),"i"
250,NEWEXPRESSION,"",main.java(83:22-83:42),"new Stack<Integer>()"
251,ARRAYCREATIONEXPRESSION,"",main.java(84:21-84:50),"new int[g.num_vertices() + 1]"
252,BINARYOPERATOR,"+",main.java(84:29-84:49),"g.num_vertices() + 1"
253,MEMBERCALLEXPRESSION,"num_vertices",main.java(84:29-84:45),"g.num_vertices()"
254,LITERAL,"",main.java(84:48-84:49),"1"
255,DECLAREDREFERENCEEXPRESSION,"num_vertices",main.java(84:31-84:43),"num_vertices"
256,DECLAREDREFERENCEEXPRESSION,"g",main.java(84:29-84:30),"g"
257,COMPOUNDSTATEMENT,"",main.java(88:47-91:4),"{
			if (visitados[i] == 0)
				DFS_Visit(i, g, s, visitados);
		}"
258,DECLARATIONSTATEMENT,"",main.java(88:8-88:17),"int i = 1"
259,BINARYOPERATOR,"<=",main.java(88:19-88:40),"i <= g.num_vertices()"
260,UNARYOPERATOR,"++",main.java(88:42-88:45),"i++"
261,VARIABLEDECLARATION,"i",main.java(88:12-88:17),"i = 1"
262,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(89:8-89:17),"visitados"
263,DECLAREDREFERENCEEXPRESSION,"i",main.java(88:42-88:43),"i"
264,DECLAREDREFERENCEEXPRESSION,"i",main.java(88:19-88:20),"i"
265,IFSTATEMENT,"",main.java(89:4-90:35),"if (visitados[i] == 0)
				DFS_Visit(i, g, s, visitados);"
266,CALLEXPRESSION,"DFS_Visit",main.java(90:5-90:35),"DFS_Visit(i, g, s, visitados);"
267,BINARYOPERATOR,"==",main.java(89:8-89:25),"visitados[i] == 0"
268,DECLAREDREFERENCEEXPRESSION,"i",main.java(90:15-90:16),"i"
269,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(89:8-89:20),"visitados[i]"
270,LITERAL,"",main.java(89:24-89:25),"0"
271,DECLAREDREFERENCEEXPRESSION,"i",main.java(89:18-89:19),"i"
272,DECLAREDREFERENCEEXPRESSION,"g",main.java(90:18-90:19),"g"
273,DECLAREDREFERENCEEXPRESSION,"s",main.java(90:21-90:22),"s"
274,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(90:24-90:33),"visitados"
275,MEMBERCALLEXPRESSION,"num_vertices",main.java(88:24-88:40),"g.num_vertices()"
276,DECLAREDREFERENCEEXPRESSION,"g",main.java(88:24-88:25),"g"
277,DECLAREDREFERENCEEXPRESSION,"num_vertices",main.java(88:26-88:38),"num_vertices"
278,VARIABLEDECLARATION,"this",,""
279,COMPOUNDSTATEMENT,"",main.java(118:46-131:3),"{
		int nAlunos = stdin.nextInt();
		Grafo g = new Grafo(nAlunos);
		for (int j = 0; j < nAlunos; j++) {
			int aluno = stdin.nextInt();
			int nAmigos = stdin.nextInt();
			for (int k = 0; k < nAmigos; k++) {
				int amigos = stdin.nextInt();
				g.insert_new_arc(aluno, amigos, 0);

			}
		}
		return g;
	}"
280,PARAMVARIABLEDECLARATION,"stdin",main.java(118:31-118:44),"Scanner stdin"
281,DECLAREDREFERENCEEXPRESSION,"stdin",main.java(119:17-119:22),"stdin"
282,RETURNSTATEMENT,"",main.java(130:3-130:12),"return g;"
283,DECLARATIONSTATEMENT,"",main.java(119:3-119:33),"int nAlunos = stdin.nextInt();"
284,DECLARATIONSTATEMENT,"",main.java(120:3-120:32),"Grafo g = new Grafo(nAlunos);"
285,FORSTATEMENT,"",main.java(121:3-129:4),"for (int j = 0; j < nAlunos; j++) {
			int aluno = stdin.nextInt();
			int nAmigos = stdin.nextInt();
			for (int k = 0; k < nAmigos; k++) {
				int amigos = stdin.nextInt();
				g.insert_new_arc(aluno, amigos, 0);

			}
		}"
286,VARIABLEDECLARATION,"nAlunos",main.java(119:7-119:32),"nAlunos = stdin.nextInt()"
287,VARIABLEDECLARATION,"g",main.java(120:9-120:31),"g = new Grafo(nAlunos)"
288,DECLAREDREFERENCEEXPRESSION,"g",main.java(130:10-130:11),"g"
289,DECLAREDREFERENCEEXPRESSION,"nAlunos",main.java(120:23-120:30),"nAlunos"
290,LITERAL,"",main.java(121:16-121:17),"0"
291,MEMBERCALLEXPRESSION,"nextInt",main.java(119:17-119:32),"stdin.nextInt()"
292,DECLAREDREFERENCEEXPRESSION,"nextInt",main.java(119:23-119:30),"nextInt"
293,NEWEXPRESSION,"",main.java(120:13-120:31),"new Grafo(nAlunos)"
294,CONSTRUCTEXPRESSION,"",main.java(120:13-120:31),"new Grafo(nAlunos)"
295,CONSTRUCTORDECLARATION,"Grafo",main.java(180:2-187:3),"public Grafo(int n) {
		nvs = n;
		narcos = 0;
		verts = new No[n + 1];
		for (int i = 0; i <= n; i++)
			verts[i] = new No();
		// para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
	}"
296,PARAMVARIABLEDECLARATION,"n",main.java(180:15-180:20),"int n"
297,COMPOUNDSTATEMENT,"",main.java(121:37-129:4),"{
			int aluno = stdin.nextInt();
			int nAmigos = stdin.nextInt();
			for (int k = 0; k < nAmigos; k++) {
				int amigos = stdin.nextInt();
				g.insert_new_arc(aluno, amigos, 0);

			}
		}"
298,DECLARATIONSTATEMENT,"",main.java(121:8-121:17),"int j = 0"
299,BINARYOPERATOR,"<",main.java(121:19-121:30),"j < nAlunos"
300,UNARYOPERATOR,"++",main.java(121:32-121:35),"j++"
301,VARIABLEDECLARATION,"j",main.java(121:12-121:17),"j = 0"
302,DECLAREDREFERENCEEXPRESSION,"stdin",main.java(122:16-122:21),"stdin"
303,DECLAREDREFERENCEEXPRESSION,"j",main.java(121:19-121:20),"j"
304,DECLAREDREFERENCEEXPRESSION,"nAlunos",main.java(121:23-121:30),"nAlunos"
305,DECLAREDREFERENCEEXPRESSION,"j",main.java(121:32-121:33),"j"
306,DECLARATIONSTATEMENT,"",main.java(122:4-122:32),"int aluno = stdin.nextInt();"
307,DECLARATIONSTATEMENT,"",main.java(123:4-123:34),"int nAmigos = stdin.nextInt();"
308,FORSTATEMENT,"",main.java(124:4-128:5),"for (int k = 0; k < nAmigos; k++) {
				int amigos = stdin.nextInt();
				g.insert_new_arc(aluno, amigos, 0);

			}"
309,VARIABLEDECLARATION,"aluno",main.java(122:8-122:31),"aluno = stdin.nextInt()"
310,VARIABLEDECLARATION,"nAmigos",main.java(123:8-123:33),"nAmigos = stdin.nextInt()"
311,MEMBERCALLEXPRESSION,"nextInt",main.java(123:18-123:33),"stdin.nextInt()"
312,DECLAREDREFERENCEEXPRESSION,"nextInt",main.java(123:24-123:31),"nextInt"
313,DECLAREDREFERENCEEXPRESSION,"stdin",main.java(123:18-123:23),"stdin"
314,LITERAL,"",main.java(124:17-124:18),"0"
315,MEMBERCALLEXPRESSION,"nextInt",main.java(122:16-122:31),"stdin.nextInt()"
316,DECLAREDREFERENCEEXPRESSION,"nextInt",main.java(122:22-122:29),"nextInt"
317,COMPOUNDSTATEMENT,"",main.java(124:38-128:5),"{
				int amigos = stdin.nextInt();
				g.insert_new_arc(aluno, amigos, 0);

			}"
318,DECLARATIONSTATEMENT,"",main.java(124:9-124:18),"int k = 0"
319,BINARYOPERATOR,"<",main.java(124:20-124:31),"k < nAmigos"
320,UNARYOPERATOR,"++",main.java(124:33-124:36),"k++"
321,VARIABLEDECLARATION,"k",main.java(124:13-124:18),"k = 0"
322,DECLAREDREFERENCEEXPRESSION,"stdin",main.java(125:18-125:23),"stdin"
323,DECLAREDREFERENCEEXPRESSION,"k",main.java(124:20-124:21),"k"
324,DECLARATIONSTATEMENT,"",main.java(125:5-125:34),"int amigos = stdin.nextInt();"
325,MEMBERCALLEXPRESSION,"insert_new_arc",main.java(126:5-126:40),"g.insert_new_arc(aluno, amigos, 0);"
326,VARIABLEDECLARATION,"amigos",main.java(125:9-125:33),"amigos = stdin.nextInt()"
327,DECLAREDREFERENCEEXPRESSION,"k",main.java(124:33-124:34),"k"
328,DECLAREDREFERENCEEXPRESSION,"g",main.java(126:5-126:6),"g"
329,DECLAREDREFERENCEEXPRESSION,"insert_new_arc",main.java(126:7-126:21),"insert_new_arc"
330,METHODDECLARATION,"insert_new_arc",main.java(201:2-204:3),"public void insert_new_arc(int i, int j, int valor_ij) {
		verts[i].adjs.addFirst(new Arco(j, valor_ij));
		narcos++;
	}"
331,LITERAL,"",main.java(126:37-126:38),"0"
332,DECLAREDREFERENCEEXPRESSION,"amigos",main.java(126:29-126:35),"amigos"
333,PARAMVARIABLEDECLARATION,"j",main.java(201:36-201:41),"int j"
334,DECLAREDREFERENCEEXPRESSION,"aluno",main.java(126:22-126:27),"aluno"
335,PARAMVARIABLEDECLARATION,"i",main.java(201:29-201:34),"int i"
336,PARAMVARIABLEDECLARATION,"valor_ij",main.java(201:43-201:55),"int valor_ij"
337,MEMBERCALLEXPRESSION,"nextInt",main.java(125:18-125:33),"stdin.nextInt()"
338,DECLAREDREFERENCEEXPRESSION,"nextInt",main.java(125:24-125:31),"nextInt"
339,DECLAREDREFERENCEEXPRESSION,"nAmigos",main.java(124:24-124:31),"nAmigos"
340,VARIABLEDECLARATION,"this",,""
341,COMPOUNDSTATEMENT,"",main.java(107:66-116:3),"{
		int c = 1;
		visitados[v] = 1;
		for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0)
				c += DFS_V_Transp(w, g, visitados);
		}
		return c;
	}"
342,PARAMVARIABLEDECLARATION,"v",main.java(107:33-107:38),"int v"
343,PARAMVARIABLEDECLARATION,"g",main.java(107:40-107:47),"Grafo g"
344,PARAMVARIABLEDECLARATION,"visitados",main.java(107:49-107:64),"int[] visitados"
345,LITERAL,"",main.java(108:11-108:12),"1"
346,RETURNSTATEMENT,"",main.java(115:3-115:12),"return c;"
347,DECLARATIONSTATEMENT,"",main.java(108:3-108:13),"int c = 1;"
348,BINARYOPERATOR,"=",main.java(109:3-109:20),"visitados[v] = 1;"
349,FOREACHSTATEMENT,"",main.java(110:3-114:4),"for (Arco a : g.adjs_no(v)) {
			int w = a.extremo_final();
			if (visitados[w] == 0)
				c += DFS_V_Transp(w, g, visitados);
		}"
350,VARIABLEDECLARATION,"c",main.java(108:7-108:12),"c = 1"
351,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(109:3-109:12),"visitados"
352,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(109:3-109:15),"visitados[v]"
353,LITERAL,"",main.java(109:18-109:19),"1"
354,DECLAREDREFERENCEEXPRESSION,"g",main.java(110:17-110:18),"g"
355,DECLAREDREFERENCEEXPRESSION,"v",main.java(109:13-109:14),"v"
356,DECLAREDREFERENCEEXPRESSION,"c",main.java(115:10-115:11),"c"
357,DECLARATIONSTATEMENT,"",main.java(110:8-110:14),"Arco a"
358,MEMBERCALLEXPRESSION,"adjs_no",main.java(110:17-110:29),"g.adjs_no(v)"
359,COMPOUNDSTATEMENT,"",main.java(110:31-114:4),"{
			int w = a.extremo_final();
			if (visitados[w] == 0)
				c += DFS_V_Transp(w, g, visitados);
		}"
360,VARIABLEDECLARATION,"a",main.java(110:13-110:14),"a"
361,DECLAREDREFERENCEEXPRESSION,"a",main.java(111:12-111:13),"a"
362,UNINITIALIZEDVALUE,"Uninitialized Value",,""
363,DECLARATIONSTATEMENT,"",main.java(111:4-111:30),"int w = a.extremo_final();"
364,IFSTATEMENT,"",main.java(112:4-113:40),"if (visitados[w] == 0)
				c += DFS_V_Transp(w, g, visitados);"
365,VARIABLEDECLARATION,"w",main.java(111:8-111:29),"w = a.extremo_final()"
366,BINARYOPERATOR,"+=",main.java(113:5-113:40),"c += DFS_V_Transp(w, g, visitados);"
367,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(112:8-112:17),"visitados"
368,MEMBERCALLEXPRESSION,"extremo_final",main.java(111:12-111:29),"a.extremo_final()"
369,DECLAREDREFERENCEEXPRESSION,"extremo_final",main.java(111:14-111:27),"extremo_final"
370,BINARYOPERATOR,"==",main.java(112:8-112:25),"visitados[w] == 0"
371,DECLAREDREFERENCEEXPRESSION,"c",main.java(113:5-113:6),"c"
372,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(112:8-112:20),"visitados[w]"
373,LITERAL,"",main.java(112:24-112:25),"0"
374,DECLAREDREFERENCEEXPRESSION,"w",main.java(112:18-112:19),"w"
375,CALLEXPRESSION,"DFS_V_Transp",main.java(113:10-113:39),"DFS_V_Transp(w, g, visitados)"
376,DECLAREDREFERENCEEXPRESSION,"w",main.java(113:23-113:24),"w"
377,DECLAREDREFERENCEEXPRESSION,"g",main.java(113:26-113:27),"g"
378,DECLAREDREFERENCEEXPRESSION,"visitados",main.java(113:29-113:38),"visitados"
379,DECLAREDREFERENCEEXPRESSION,"adjs_no",main.java(110:19-110:26),"adjs_no"
380,DECLAREDREFERENCEEXPRESSION,"v",main.java(110:27-110:28),"v"
381,VARIABLEDECLARATION,"this",,""
382,COMPOUNDSTATEMENT,"",main.java(133:39-142:3),"{
		Grafo gt = new Grafo(g.num_vertices());
		for (int i = 1; i <= g.num_vertices(); i++) {
			for (Arco a : g.adjs_no(i)) {
				int w = a.extremo_final();
				gt.insert_new_arc(w, i, 0);
			}
		}
		return gt;
	}"
383,PARAMVARIABLEDECLARATION,"g",main.java(133:30-133:37),"Grafo g"
384,DECLAREDREFERENCEEXPRESSION,"g",main.java(134:24-134:25),"g"
385,RETURNSTATEMENT,"",main.java(141:3-141:13),"return gt;"
386,DECLARATIONSTATEMENT,"",main.java(134:3-134:42),"Grafo gt = new Grafo(g.num_vertices());"
387,FORSTATEMENT,"",main.java(135:3-140:4),"for (int i = 1; i <= g.num_vertices(); i++) {
			for (Arco a : g.adjs_no(i)) {
				int w = a.extremo_final();
				gt.insert_new_arc(w, i, 0);
			}
		}"
388,VARIABLEDECLARATION,"gt",main.java(134:9-134:41),"gt = new Grafo(g.num_vertices())"
389,NEWEXPRESSION,"",main.java(134:14-134:41),"new Grafo(g.num_vertices())"
390,CONSTRUCTEXPRESSION,"",main.java(134:14-134:41),"new Grafo(g.num_vertices())"
391,MEMBERCALLEXPRESSION,"num_vertices",main.java(134:24-134:40),"g.num_vertices()"
392,DECLAREDREFERENCEEXPRESSION,"num_vertices",main.java(134:26-134:38),"num_vertices"
393,DECLAREDREFERENCEEXPRESSION,"gt",main.java(141:10-141:12),"gt"
394,COMPOUNDSTATEMENT,"",main.java(135:47-140:4),"{
			for (Arco a : g.adjs_no(i)) {
				int w = a.extremo_final();
				gt.insert_new_arc(w, i, 0);
			}
		}"
395,DECLARATIONSTATEMENT,"",main.java(135:8-135:17),"int i = 1"
396,BINARYOPERATOR,"<=",main.java(135:19-135:40),"i <= g.num_vertices()"
397,UNARYOPERATOR,"++",main.java(135:42-135:45),"i++"
398,VARIABLEDECLARATION,"i",main.java(135:12-135:17),"i = 1"
399,DECLAREDREFERENCEEXPRESSION,"g",main.java(136:18-136:19),"g"
400,LITERAL,"",main.java(135:16-135:17),"1"
401,DECLAREDREFERENCEEXPRESSION,"i",main.java(135:19-135:20),"i"
402,MEMBERCALLEXPRESSION,"num_vertices",main.java(135:24-135:40),"g.num_vertices()"
403,DECLAREDREFERENCEEXPRESSION,"num_vertices",main.java(135:26-135:38),"num_vertices"
404,DECLAREDREFERENCEEXPRESSION,"g",main.java(135:24-135:25),"g"
405,DECLAREDREFERENCEEXPRESSION,"i",main.java(135:42-135:43),"i"
406,FOREACHSTATEMENT,"",main.java(136:4-139:5),"for (Arco a : g.adjs_no(i)) {
				int w = a.extremo_final();
				gt.insert_new_arc(w, i, 0);
			}"
407,DECLARATIONSTATEMENT,"",main.java(136:9-136:15),"Arco a"
408,MEMBERCALLEXPRESSION,"adjs_no",main.java(136:18-136:30),"g.adjs_no(i)"
409,COMPOUNDSTATEMENT,"",main.java(136:32-139:5),"{
				int w = a.extremo_final();
				gt.insert_new_arc(w, i, 0);
			}"
410,VARIABLEDECLARATION,"a",main.java(136:14-136:15),"a"
411,DECLAREDREFERENCEEXPRESSION,"a",main.java(137:13-137:14),"a"
412,DECLAREDREFERENCEEXPRESSION,"adjs_no",main.java(136:20-136:27),"adjs_no"
413,UNINITIALIZEDVALUE,"Uninitialized Value",,""
414,DECLAREDREFERENCEEXPRESSION,"i",main.java(136:28-136:29),"i"
415,DECLARATIONSTATEMENT,"",main.java(137:5-137:31),"int w = a.extremo_final();"
416,MEMBERCALLEXPRESSION,"insert_new_arc",main.java(138:5-138:32),"gt.insert_new_arc(w, i, 0);"
417,VARIABLEDECLARATION,"w",main.java(137:9-137:30),"w = a.extremo_final()"
418,MEMBERCALLEXPRESSION,"extremo_final",main.java(137:13-137:30),"a.extremo_final()"
419,DECLAREDREFERENCEEXPRESSION,"extremo_final",main.java(137:15-137:28),"extremo_final"
420,DECLAREDREFERENCEEXPRESSION,"gt",main.java(138:5-138:7),"gt"
421,DECLAREDREFERENCEEXPRESSION,"insert_new_arc",main.java(138:8-138:22),"insert_new_arc"
422,LITERAL,"",main.java(138:29-138:30),"0"
423,DECLAREDREFERENCEEXPRESSION,"i",main.java(138:26-138:27),"i"
424,DECLAREDREFERENCEEXPRESSION,"w",main.java(138:23-138:24),"w"
425,FIELDDECLARATION,"this",,""
426,FIELDDECLARATION,"verts",main.java(43:2-43:13),"verts"
427,FIELDDECLARATION,"nvs",main.java(44:2-44:18),"nvs"
428,METHODDECLARATION,"num_vertices",main.java(55:2-57:3),"public int num_vertices() {
		return nvs;
	}"
429,METHODDECLARATION,"num_arcos",main.java(59:2-61:3),"public int num_arcos() {
		return narcos;
	}"
430,METHODDECLARATION,"adjs_no",main.java(63:2-65:3),"public LinkedList<Arco> adjs_no(int i) {
		return verts[i].adjs;
	}"
431,METHODDECLARATION,"insert_new_arc",main.java(67:2-70:3),"public void insert_new_arc(int i, int j, int valor_ij) {
		verts[i].adjs.addFirst(new Arco(j, valor_ij));
		narcos++;
	}"
432,METHODDECLARATION,"find_arc",main.java(72:2-77:3),"public Arco find_arc(int i, int j) {
		for (Arco adj : adjs_no(i))
			if (adj.extremo_final() == j)
				return adj;
		return null;
	}"
433,CONSTRUCTORDECLARATION,"Grafo",main.java(46:2-53:3),"public Grafo(int n) {
		nvs = n;
		narcos = 0;
		verts = new No[n + 1];
		for (int i = 0; i <= n; i++)
			verts[i] = new No();
		// para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
	}"
434,VARIABLEDECLARATION,"this",,""
435,COMPOUNDSTATEMENT,"",main.java(72:37-77:3),"{
		for (Arco adj : adjs_no(i))
			if (adj.extremo_final() == j)
				return adj;
		return null;
	}"
436,PARAMVARIABLEDECLARATION,"i",main.java(72:23-72:28),"int i"
437,PARAMVARIABLEDECLARATION,"j",main.java(72:30-72:35),"int j"
438,DECLAREDREFERENCEEXPRESSION,"i",main.java(73:27-73:28),"i"
439,RETURNSTATEMENT,"",main.java(76:3-76:15),"return null;"
440,FOREACHSTATEMENT,"",main.java(73:3-75:16),"for (Arco adj : adjs_no(i))
			if (adj.extremo_final() == j)
				return adj;"
441,DECLARATIONSTATEMENT,"",main.java(73:8-73:16),"Arco adj"
442,CALLEXPRESSION,"adjs_no",main.java(73:19-73:29),"adjs_no(i)"
443,IFSTATEMENT,"",main.java(74:4-75:16),"if (adj.extremo_final() == j)
				return adj;"
444,VARIABLEDECLARATION,"adj",main.java(73:13-73:16),"adj"
445,DECLAREDREFERENCEEXPRESSION,"adj",main.java(74:8-74:11),"adj"
446,LITERAL,"",main.java(76:10-76:14),"null"
447,BINARYOPERATOR,"==",main.java(74:8-74:32),"adj.extremo_final() == j"
448,RETURNSTATEMENT,"",main.java(75:5-75:16),"return adj;"
449,DECLAREDREFERENCEEXPRESSION,"adj",main.java(75:12-75:15),"adj"
450,MEMBERCALLEXPRESSION,"extremo_final",main.java(74:8-74:27),"adj.extremo_final()"
451,DECLAREDREFERENCEEXPRESSION,"j",main.java(74:31-74:32),"j"
452,DECLAREDREFERENCEEXPRESSION,"extremo_final",main.java(74:12-74:25),"extremo_final"
453,UNINITIALIZEDVALUE,"Uninitialized Value",,""
454,COMPOUNDSTATEMENT,"",main.java(46:22-53:3),"{
		nvs = n;
		narcos = 0;
		verts = new No[n + 1];
		for (int i = 0; i <= n; i++)
			verts[i] = new No();
		// para vertices numerados de 1 a n (posicao 0 nao vai ser usada)
	}"
455,PARAMVARIABLEDECLARATION,"n",main.java(46:15-46:20),"int n"
456,DECLAREDREFERENCEEXPRESSION,"this",main.java(47:3-47:6),"this"
457,RETURNSTATEMENT,"",,""
458,BINARYOPERATOR,"=",main.java(47:3-47:11),"nvs = n;"
459,BINARYOPERATOR,"=",main.java(48:3-48:14),"narcos = 0;"
460,BINARYOPERATOR,"=",main.java(49:3-49:25),"verts = new No[n + 1];"
461,FORSTATEMENT,"",main.java(50:3-51:24),"for (int i = 0; i <= n; i++)
			verts[i] = new No();"
462,BINARYOPERATOR,"=",main.java(51:4-51:24),"verts[i] = new No();"
463,DECLARATIONSTATEMENT,"",main.java(50:8-50:17),"int i = 0"
464,BINARYOPERATOR,"<=",main.java(50:19-50:25),"i <= n"
465,UNARYOPERATOR,"++",main.java(50:27-50:30),"i++"
466,VARIABLEDECLARATION,"i",main.java(50:12-50:17),"i = 0"
467,DECLAREDREFERENCEEXPRESSION,"this",main.java(51:4-51:9),"this"
468,DECLAREDREFERENCEEXPRESSION,"i",main.java(50:19-50:20),"i"
469,DECLAREDREFERENCEEXPRESSION,"n",main.java(50:24-50:25),"n"
470,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(51:4-51:12),"verts[i]"
471,NEWEXPRESSION,"",main.java(51:15-51:23),"new No()"
472,DECLAREDREFERENCEEXPRESSION,"i",main.java(50:27-50:28),"i"
473,MEMBEREXPRESSION,"verts",main.java(51:4-51:9),"verts"
474,DECLAREDREFERENCEEXPRESSION,"i",main.java(51:10-51:11),"i"
475,CONSTRUCTEXPRESSION,"",main.java(51:15-51:23),"new No()"
476,CONSTRUCTORDECLARATION,"No",main.java(171:2-173:3),"No() {
		adjs = new LinkedList<Arco>();
	}"
477,LITERAL,"",main.java(50:16-50:17),"0"
478,MEMBEREXPRESSION,"narcos",main.java(48:3-48:9),"narcos"
479,LITERAL,"",main.java(48:12-48:13),"0"
480,DECLAREDREFERENCEEXPRESSION,"this",main.java(49:3-49:8),"this"
481,DECLAREDREFERENCEEXPRESSION,"this",main.java(48:3-48:9),"this"
482,MEMBEREXPRESSION,"verts",main.java(49:3-49:8),"verts"
483,ARRAYCREATIONEXPRESSION,"",main.java(49:11-49:24),"new No[n + 1]"
484,DECLAREDREFERENCEEXPRESSION,"n",main.java(49:18-49:19),"n"
485,BINARYOPERATOR,"+",main.java(49:18-49:23),"n + 1"
486,LITERAL,"",main.java(49:22-49:23),"1"
487,MEMBEREXPRESSION,"nvs",main.java(47:3-47:6),"nvs"
488,DECLAREDREFERENCEEXPRESSION,"n",main.java(47:9-47:10),"n"
489,VARIABLEDECLARATION,"this",,""
490,COMPOUNDSTATEMENT,"",main.java(67:57-70:3),"{
		verts[i].adjs.addFirst(new Arco(j, valor_ij));
		narcos++;
	}"
491,PARAMVARIABLEDECLARATION,"i",main.java(67:29-67:34),"int i"
492,PARAMVARIABLEDECLARATION,"j",main.java(67:36-67:41),"int j"
493,PARAMVARIABLEDECLARATION,"valor_ij",main.java(67:43-67:55),"int valor_ij"
494,DECLAREDREFERENCEEXPRESSION,"this",main.java(68:3-68:8),"this"
495,RETURNSTATEMENT,"",,""
496,MEMBERCALLEXPRESSION,"addFirst",main.java(68:3-68:49),"verts[i].adjs.addFirst(new Arco(j, valor_ij));"
497,UNARYOPERATOR,"++",main.java(69:3-69:12),"narcos++;"
498,MEMBEREXPRESSION,"narcos",main.java(69:3-69:9),"narcos"
499,DECLAREDREFERENCEEXPRESSION,"this",main.java(69:3-69:9),"this"
500,DECLAREDREFERENCEEXPRESSION,"addFirst",main.java(68:17-68:25),"addFirst"
501,NEWEXPRESSION,"",main.java(68:26-68:47),"new Arco(j, valor_ij)"
502,CONSTRUCTEXPRESSION,"",main.java(68:26-68:47),"new Arco(j, valor_ij)"
503,CONSTRUCTORDECLARATION,"Arco",main.java(153:2-156:3),"Arco(int fim, int v) {
		no_final = fim;
		valor = v;
	}"
504,DECLAREDREFERENCEEXPRESSION,"valor_ij",main.java(68:38-68:46),"valor_ij"
505,DECLAREDREFERENCEEXPRESSION,"j",main.java(68:35-68:36),"j"
506,PARAMVARIABLEDECLARATION,"fim",main.java(153:7-153:14),"int fim"
507,MEMBEREXPRESSION,"adjs",main.java(68:3-68:16),"verts[i].adjs"
508,PARAMVARIABLEDECLARATION,"v",main.java(153:16-153:21),"int v"
509,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(68:3-68:11),"verts[i]"
510,MEMBEREXPRESSION,"verts",main.java(68:3-68:8),"verts"
511,DECLAREDREFERENCEEXPRESSION,"i",main.java(68:9-68:10),"i"
512,VARIABLEDECLARATION,"this",,""
513,COMPOUNDSTATEMENT,"",main.java(63:41-65:3),"{
		return verts[i].adjs;
	}"
514,PARAMVARIABLEDECLARATION,"i",main.java(63:34-63:39),"int i"
515,DECLAREDREFERENCEEXPRESSION,"this",main.java(64:10-64:15),"this"
516,RETURNSTATEMENT,"",main.java(64:3-64:24),"return verts[i].adjs;"
517,MEMBEREXPRESSION,"adjs",main.java(64:10-64:23),"verts[i].adjs"
518,ARRAYSUBSCRIPTIONEXPRESSION,"",main.java(64:10-64:18),"verts[i]"
519,MEMBEREXPRESSION,"verts",main.java(64:10-64:15),"verts"
520,DECLAREDREFERENCEEXPRESSION,"i",main.java(64:16-64:17),"i"
521,VARIABLEDECLARATION,"this",,""
522,COMPOUNDSTATEMENT,"",main.java(55:28-57:3),"{
		return nvs;
	}"
523,DECLAREDREFERENCEEXPRESSION,"this",main.java(56:10-56:13),"this"
524,RETURNSTATEMENT,"",main.java(56:3-56:14),"return nvs;"
525,MEMBEREXPRESSION,"nvs",main.java(56:10-56:13),"nvs"
526,VARIABLEDECLARATION,"this",,""
527,COMPOUNDSTATEMENT,"",main.java(59:25-61:3),"{
		return narcos;
	}"
528,DECLAREDREFERENCEEXPRESSION,"this",main.java(60:10-60:16),"this"
529,RETURNSTATEMENT,"",main.java(60:3-60:17),"return narcos;"
530,MEMBEREXPRESSION,"narcos",main.java(60:10-60:16),"narcos"
531,FIELDDECLARATION,"this",,""
532,FIELDDECLARATION,"no_final",main.java(15:2-15:15),"no_final"
533,FIELDDECLARATION,"valor",main.java(16:2-16:12),"valor"
534,METHODDECLARATION,"extremo_final",main.java(23:2-25:3),"int extremo_final() {
		return no_final;
	}"
535,METHODDECLARATION,"valor_arco",main.java(27:2-29:3),"int valor_arco() {
		return valor;
	}"
536,CONSTRUCTORDECLARATION,"Arco",main.java(18:2-21:3),"Arco(int fim, int v) {
		no_final = fim;
		valor = v;
	}"
537,COMPOUNDSTATEMENT,"",main.java(18:23-21:3),"{
		no_final = fim;
		valor = v;
	}"
538,PARAMVARIABLEDECLARATION,"fim",main.java(18:7-18:14),"int fim"
539,PARAMVARIABLEDECLARATION,"v",main.java(18:16-18:21),"int v"
540,DECLAREDREFERENCEEXPRESSION,"this",main.java(19:3-19:11),"this"
541,RETURNSTATEMENT,"",,""
542,BINARYOPERATOR,"=",main.java(19:3-19:18),"no_final = fim;"
543,BINARYOPERATOR,"=",main.java(20:3-20:13),"valor = v;"
544,MEMBEREXPRESSION,"no_final",main.java(19:3-19:11),"no_final"
545,DECLAREDREFERENCEEXPRESSION,"fim",main.java(19:14-19:17),"fim"
546,DECLAREDREFERENCEEXPRESSION,"this",main.java(20:3-20:8),"this"
547,MEMBEREXPRESSION,"valor",main.java(20:3-20:8),"valor"
548,DECLAREDREFERENCEEXPRESSION,"v",main.java(20:11-20:12),"v"
549,VARIABLEDECLARATION,"this",,""
550,COMPOUNDSTATEMENT,"",main.java(23:22-25:3),"{
		return no_final;
	}"
551,DECLAREDREFERENCEEXPRESSION,"this",main.java(24:10-24:18),"this"
552,RETURNSTATEMENT,"",main.java(24:3-24:19),"return no_final;"
553,MEMBEREXPRESSION,"no_final",main.java(24:10-24:18),"no_final"
554,VARIABLEDECLARATION,"this",,""
555,COMPOUNDSTATEMENT,"",main.java(27:19-29:3),"{
		return valor;
	}"
556,DECLAREDREFERENCEEXPRESSION,"this",main.java(28:10-28:15),"this"
557,RETURNSTATEMENT,"",main.java(28:3-28:16),"return valor;"
558,MEMBEREXPRESSION,"valor",main.java(28:10-28:15),"valor"
