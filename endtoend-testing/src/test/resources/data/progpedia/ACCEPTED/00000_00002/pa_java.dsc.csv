id,type,token,location,code
1,TRANSLATIONUNITDECLARATION,"/data/00000019/submissions/00004047_Sociologia_c0807009/pa.java",,""
2,RECORDDECLARATION,"sol",pa.java(3:1-71:2),"class sol{
  Scanner kb;
  sol(Scanner kb){this.kb = kb;}
  int N;
  int count;
  boolean visited[];
  Deque<Integer> order = new LinkedList<Integer>();
  HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
  ArrayList<LinkedList<Integer>> adj = new ArrayList<LinkedList<Integer>>();
  ArrayList<LinkedList<Integer>> tadj = new ArrayList<LinkedList<Integer>>();
  int find_node(int u){
    if(map.containsKey(u)) return map.get(u);
    else{
      adj.add(new LinkedList<Integer>());
      tadj.add(new LinkedList<Integer>());
      int p = map.size();
      map.put(u,p);
      return p;
    }
  }
  void read(){
    N = kb.nextInt();
    map.clear();
    adj.clear();
    tadj.clear();
    for(int i = 0; i < N; i++){
      int u = kb.nextInt()-1;
      int c = kb.nextInt();
      int x = find_node(u);
      for(int k = 0; k < c; k++){
        int v = kb.nextInt()-1;
        int y = find_node(v);
        adj.get(x).add(y);
        tadj.get(y).add(x);
      }
    }
  }
  void dfs(int u){
    if(visited[u]) return;
    else visited[u] = true;
    for(int v : adj.get(u)){
      if(!visited[v]) dfs(v);
    }
    order.addFirst(u);
  }
  void flood_fill(int u){
    count++;
    visited[u] = true;
    for(int v : tadj.get(u)){
      if(!visited[v]) flood_fill(v);
    }
  }
  void solve(){
    order.clear();
    visited = new boolean[N];
    for(int i = 0; i < N; i++) dfs(i);
    for(int i = 0; i < N; i++) visited[i] = false;
    int A = 0, B = 0;
    for(int u : order){
      if(!visited[u]){
        count = 0;
        flood_fill(u);
        if(count>=4) A++;
        else B+=count;
      }
    }
    System.out.printf(""%d %d\n"",A,B);
  }
}"
3,RECORDDECLARATION,"pa",pa.java(73:1-84:2),"public class pa{
  public static void main(String args[]){
    Scanner kb = new Scanner(System.in);
    sol s = new sol(kb);
    int c = kb.nextInt();
    for(int i = 1; i <= c; i++){
      System.out.printf(""Caso #%d\n"",i);
      s.read();
      s.solve();
    }
  }
}"
4,INCLUDEDECLARATION,"java.util",,""
5,FIELDDECLARATION,"this",,""
6,METHODDECLARATION,"main",pa.java(74:3-83:4),"public static void main(String args[]){
    Scanner kb = new Scanner(System.in);
    sol s = new sol(kb);
    int c = kb.nextInt();
    for(int i = 1; i <= c; i++){
      System.out.printf(""Caso #%d\n"",i);
      s.read();
      s.solve();
    }
  }"
7,CONSTRUCTORDECLARATION,"pa",,""
8,VARIABLEDECLARATION,"this",,""
9,COMPOUNDSTATEMENT,"",pa.java(74:41-83:4),"{
    Scanner kb = new Scanner(System.in);
    sol s = new sol(kb);
    int c = kb.nextInt();
    for(int i = 1; i <= c; i++){
      System.out.printf(""Caso #%d\n"",i);
      s.read();
      s.solve();
    }
  }"
10,PARAMVARIABLEDECLARATION,"args",pa.java(74:27-74:40),"String args[]"
11,DECLAREDREFERENCEEXPRESSION,"System",pa.java(75:30-75:36),"System"
12,RETURNSTATEMENT,"",,""
13,DECLARATIONSTATEMENT,"",pa.java(75:5-75:41),"Scanner kb = new Scanner(System.in);"
14,DECLARATIONSTATEMENT,"",pa.java(76:5-76:25),"sol s = new sol(kb);"
15,DECLARATIONSTATEMENT,"",pa.java(77:5-77:26),"int c = kb.nextInt();"
16,FORSTATEMENT,"",pa.java(78:5-82:6),"for(int i = 1; i <= c; i++){
      System.out.printf(""Caso #%d\n"",i);
      s.read();
      s.solve();
    }"
17,VARIABLEDECLARATION,"kb",pa.java(75:13-75:40),"kb = new Scanner(System.in)"
18,VARIABLEDECLARATION,"s",pa.java(76:9-76:24),"s = new sol(kb)"
19,VARIABLEDECLARATION,"c",pa.java(77:9-77:25),"c = kb.nextInt()"
20,DECLAREDREFERENCEEXPRESSION,"kb",pa.java(76:21-76:23),"kb"
21,DECLAREDREFERENCEEXPRESSION,"kb",pa.java(77:13-77:15),"kb"
22,LITERAL,"",pa.java(78:17-78:18),"1"
23,NEWEXPRESSION,"",pa.java(76:13-76:24),"new sol(kb)"
24,CONSTRUCTEXPRESSION,"",pa.java(76:13-76:24),"new sol(kb)"
25,CONSTRUCTORDECLARATION,"sol",OrdemRara.java(16:3-16:31),"sol(Scanner kb){this.kb=kb;}"
26,PARAMVARIABLEDECLARATION,"kb",OrdemRara.java(16:7-16:17),"Scanner kb"
27,NEWEXPRESSION,"",pa.java(75:18-75:40),"new Scanner(System.in)"
28,CONSTRUCTEXPRESSION,"",pa.java(75:18-75:40),"new Scanner(System.in)"
29,MEMBEREXPRESSION,"in",pa.java(75:30-75:39),"System.in"
30,COMPOUNDSTATEMENT,"",pa.java(78:32-82:6),"{
      System.out.printf(""Caso #%d\n"",i);
      s.read();
      s.solve();
    }"
31,DECLARATIONSTATEMENT,"",pa.java(78:9-78:18),"int i = 1"
32,BINARYOPERATOR,"<=",pa.java(78:20-78:26),"i <= c"
33,UNARYOPERATOR,"++",pa.java(78:28-78:31),"i++"
34,VARIABLEDECLARATION,"i",pa.java(78:13-78:18),"i = 1"
35,DECLAREDREFERENCEEXPRESSION,"System",pa.java(79:7-79:13),"System"
36,DECLAREDREFERENCEEXPRESSION,"i",pa.java(78:20-78:21),"i"
37,DECLAREDREFERENCEEXPRESSION,"i",pa.java(78:28-78:29),"i"
38,DECLAREDREFERENCEEXPRESSION,"c",pa.java(78:25-78:26),"c"
39,MEMBERCALLEXPRESSION,"printf",pa.java(79:7-79:41),"System.out.printf(""Caso #%d\n"",i);"
40,MEMBERCALLEXPRESSION,"read",pa.java(80:7-80:16),"s.read();"
41,MEMBERCALLEXPRESSION,"solve",pa.java(81:7-81:17),"s.solve();"
42,DECLAREDREFERENCEEXPRESSION,"printf",pa.java(79:18-79:24),"printf"
43,DECLAREDREFERENCEEXPRESSION,"s",pa.java(80:7-80:8),"s"
44,DECLAREDREFERENCEEXPRESSION,"i",pa.java(79:38-79:39),"i"
45,LITERAL,"",pa.java(79:25-79:37),"""Caso #%d\n"""
46,MEMBEREXPRESSION,"out",pa.java(79:7-79:17),"System.out"
47,DECLAREDREFERENCEEXPRESSION,"solve",pa.java(81:9-81:14),"solve"
48,METHODDECLARATION,"solve",OrdemRara.java(21:3-46:4),"void solve(){
  	for(int i = 0; i < 26; i++) deg[i] = -1;
  	String last = kb.next();
  	deg[last.charAt(0)-'A'] = 0;
		while(true){
			String cur = kb.next();
			if(cur.equals(""#"")) break;
			int p = 0;
			int mlen = Math.min(cur.length(),last.length());
			while(p < mlen){
				if(cur.charAt(p)!=last.charAt(p)) break;
				p++;
			}
			if(p<mlen){
				int u = last.charAt(p)-'A';
				int v = cur.charAt(p)-'A';
				System.out.printf(""%c < %c\n"",last.charAt(p),cur.charAt(p));
				if(deg[u]<0) deg[u] = 0;
				if(deg[v]<0) deg[v] = 0;
				adj[u][deg[u]++] = v;
			}
			last = cur;
		}
		//print_graph();
		topologicalSort();
  }"
49,DECLAREDREFERENCEEXPRESSION,"s",pa.java(81:7-81:8),"s"
50,DECLAREDREFERENCEEXPRESSION,"read",pa.java(80:9-80:13),"read"
51,METHODDECLARATION,"read",,""
52,MEMBERCALLEXPRESSION,"nextInt",pa.java(77:13-77:25),"kb.nextInt()"
53,DECLAREDREFERENCEEXPRESSION,"nextInt",pa.java(77:16-77:23),"nextInt"
54,FIELDDECLARATION,"this",,""
55,FIELDDECLARATION,"kb",pa.java(4:3-4:14),"kb"
56,FIELDDECLARATION,"N",pa.java(6:3-6:9),"N"
57,FIELDDECLARATION,"count",pa.java(7:3-7:13),"count"
58,FIELDDECLARATION,"visited",pa.java(8:3-8:21),"visited"
59,FIELDDECLARATION,"order",pa.java(9:3-9:52),"order = new LinkedList<Integer>()"
60,FIELDDECLARATION,"map",pa.java(10:3-10:65),"map = new HashMap<Integer, Integer>()"
61,FIELDDECLARATION,"adj",pa.java(11:3-11:77),"adj = new ArrayList<LinkedList<Integer>>()"
62,FIELDDECLARATION,"tadj",pa.java(12:3-12:78),"tadj = new ArrayList<LinkedList<Integer>>()"
63,METHODDECLARATION,"find_node",pa.java(13:3-22:4),"int find_node(int u){
    if(map.containsKey(u)) return map.get(u);
    else{
      adj.add(new LinkedList<Integer>());
      tadj.add(new LinkedList<Integer>());
      int p = map.size();
      map.put(u,p);
      return p;
    }
  }"
64,METHODDECLARATION,"read",pa.java(23:3-39:4),"void read(){
    N = kb.nextInt();
    map.clear();
    adj.clear();
    tadj.clear();
    for(int i = 0; i < N; i++){
      int u = kb.nextInt()-1;
      int c = kb.nextInt();
      int x = find_node(u);
      for(int k = 0; k < c; k++){
        int v = kb.nextInt()-1;
        int y = find_node(v);
        adj.get(x).add(y);
        tadj.get(y).add(x);
      }
    }
  }"
65,METHODDECLARATION,"dfs",pa.java(40:3-47:4),"void dfs(int u){
    if(visited[u]) return;
    else visited[u] = true;
    for(int v : adj.get(u)){
      if(!visited[v]) dfs(v);
    }
    order.addFirst(u);
  }"
66,METHODDECLARATION,"flood_fill",pa.java(48:3-54:4),"void flood_fill(int u){
    count++;
    visited[u] = true;
    for(int v : tadj.get(u)){
      if(!visited[v]) flood_fill(v);
    }
  }"
67,METHODDECLARATION,"solve",pa.java(55:3-70:4),"void solve(){
    order.clear();
    visited = new boolean[N];
    for(int i = 0; i < N; i++) dfs(i);
    for(int i = 0; i < N; i++) visited[i] = false;
    int A = 0, B = 0;
    for(int u : order){
      if(!visited[u]){
        count = 0;
        flood_fill(u);
        if(count>=4) A++;
        else B+=count;
      }
    }
    System.out.printf(""%d %d\n"",A,B);
  }"
68,CONSTRUCTORDECLARATION,"sol",pa.java(5:3-5:33),"sol(Scanner kb){this.kb = kb;}"
69,VARIABLEDECLARATION,"this",,""
70,COMPOUNDSTATEMENT,"",pa.java(48:25-54:4),"{
    count++;
    visited[u] = true;
    for(int v : tadj.get(u)){
      if(!visited[v]) flood_fill(v);
    }
  }"
71,PARAMVARIABLEDECLARATION,"u",pa.java(48:19-48:24),"int u"
72,DECLAREDREFERENCEEXPRESSION,"this",pa.java(49:5-49:10),"this"
73,RETURNSTATEMENT,"",,""
74,UNARYOPERATOR,"++",pa.java(49:5-49:13),"count++;"
75,BINARYOPERATOR,"=",pa.java(50:5-50:23),"visited[u] = true;"
76,FOREACHSTATEMENT,"",pa.java(51:5-53:6),"for(int v : tadj.get(u)){
      if(!visited[v]) flood_fill(v);
    }"
77,MEMBEREXPRESSION,"count",pa.java(49:5-49:10),"count"
78,DECLAREDREFERENCEEXPRESSION,"this",pa.java(50:5-50:12),"this"
79,DECLARATIONSTATEMENT,"",pa.java(51:9-51:14),"int v"
80,MEMBERCALLEXPRESSION,"get",pa.java(51:17-51:28),"tadj.get(u)"
81,COMPOUNDSTATEMENT,"",pa.java(51:29-53:6),"{
      if(!visited[v]) flood_fill(v);
    }"
82,VARIABLEDECLARATION,"v",pa.java(51:13-51:14),"v"
83,DECLAREDREFERENCEEXPRESSION,"this",pa.java(52:11-52:18),"this"
84,IFSTATEMENT,"",pa.java(52:7-52:37),"if(!visited[v]) flood_fill(v);"
85,DECLAREDREFERENCEEXPRESSION,"this",pa.java(51:17-51:21),"this"
86,CALLEXPRESSION,"flood_fill",pa.java(52:23-52:37),"flood_fill(v);"
87,UNARYOPERATOR,"!",pa.java(52:10-52:21),"!visited[v]"
88,DECLAREDREFERENCEEXPRESSION,"v",pa.java(52:34-52:35),"v"
89,METHODDECLARATION,"flood_fill",,""
90,PARAMVARIABLEDECLARATION,"int0",,""
91,ARRAYSUBSCRIPTIONEXPRESSION,"",pa.java(52:11-52:21),"visited[v]"
92,MEMBEREXPRESSION,"visited",pa.java(52:11-52:18),"visited"
93,DECLAREDREFERENCEEXPRESSION,"v",pa.java(52:19-52:20),"v"
94,DECLAREDREFERENCEEXPRESSION,"get",pa.java(51:22-51:25),"get"
95,UNINITIALIZEDVALUE,"Uninitialized Value",,""
96,DECLAREDREFERENCEEXPRESSION,"u",pa.java(51:26-51:27),"u"
97,MEMBEREXPRESSION,"tadj",pa.java(51:17-51:21),"tadj"
98,ARRAYSUBSCRIPTIONEXPRESSION,"",pa.java(50:5-50:15),"visited[u]"
99,LITERAL,"",pa.java(50:18-50:22),"true"
100,MEMBEREXPRESSION,"visited",pa.java(50:5-50:12),"visited"
101,DECLAREDREFERENCEEXPRESSION,"u",pa.java(50:13-50:14),"u"
102,NEWEXPRESSION,"",pa.java(10:34-10:64),"new HashMap<Integer,Integer>()"
103,CONSTRUCTEXPRESSION,"",pa.java(10:34-10:64),"new HashMap<Integer,Integer>()"
104,VARIABLEDECLARATION,"this",,""
105,COMPOUNDSTATEMENT,"",pa.java(55:15-70:4),"{
    order.clear();
    visited = new boolean[N];
    for(int i = 0; i < N; i++) dfs(i);
    for(int i = 0; i < N; i++) visited[i] = false;
    int A = 0, B = 0;
    for(int u : order){
      if(!visited[u]){
        count = 0;
        flood_fill(u);
        if(count>=4) A++;
        else B+=count;
      }
    }
    System.out.printf(""%d %d\n"",A,B);
  }"
106,DECLAREDREFERENCEEXPRESSION,"this",pa.java(56:5-56:10),"this"
107,RETURNSTATEMENT,"",,""
108,MEMBERCALLEXPRESSION,"clear",pa.java(56:5-56:19),"order.clear();"
109,BINARYOPERATOR,"=",pa.java(57:5-57:30),"visited = new boolean[N];"
110,FORSTATEMENT,"",pa.java(58:5-58:39),"for(int i = 0; i < N; i++) dfs(i);"
111,FORSTATEMENT,"",pa.java(59:5-59:51),"for(int i = 0; i < N; i++) visited[i] = false;"
112,DECLARATIONSTATEMENT,"",pa.java(60:5-60:22),"int A = 0, B = 0;"
113,FOREACHSTATEMENT,"",pa.java(61:5-68:6),"for(int u : order){
      if(!visited[u]){
        count = 0;
        flood_fill(u);
        if(count>=4) A++;
        else B+=count;
      }
    }"
114,MEMBERCALLEXPRESSION,"printf",pa.java(69:5-69:38),"System.out.printf(""%d %d\n"",A,B);"
115,VARIABLEDECLARATION,"A",pa.java(60:9-60:14),"A = 0"
116,VARIABLEDECLARATION,"B",pa.java(60:16-60:21),"B = 0"
117,LITERAL,"",pa.java(60:20-60:21),"0"
118,MEMBEREXPRESSION,"visited",pa.java(57:5-57:12),"visited"
119,ARRAYCREATIONEXPRESSION,"",pa.java(57:15-57:29),"new boolean[N]"
120,LITERAL,"",pa.java(58:17-58:18),"0"
121,MEMBEREXPRESSION,"N",pa.java(57:27-57:28),"N"
122,DECLAREDREFERENCEEXPRESSION,"this",pa.java(57:27-57:28),"this"
123,DECLAREDREFERENCEEXPRESSION,"this",pa.java(57:5-57:12),"this"
124,DECLAREDREFERENCEEXPRESSION,"printf",pa.java(69:16-69:22),"printf"
125,DECLAREDREFERENCEEXPRESSION,"B",pa.java(69:35-69:36),"B"
126,LITERAL,"",pa.java(69:23-69:32),"""%d %d\n"""
127,DECLAREDREFERENCEEXPRESSION,"A",pa.java(69:33-69:34),"A"
128,MEMBEREXPRESSION,"out",pa.java(69:5-69:15),"System.out"
129,DECLAREDREFERENCEEXPRESSION,"System",pa.java(69:5-69:11),"System"
130,LITERAL,"",pa.java(60:13-60:14),"0"
131,BINARYOPERATOR,"=",pa.java(59:32-59:51),"visited[i] = false;"
132,DECLARATIONSTATEMENT,"",pa.java(59:9-59:18),"int i = 0"
133,BINARYOPERATOR,"<",pa.java(59:20-59:25),"i < N"
134,UNARYOPERATOR,"++",pa.java(59:27-59:30),"i++"
135,VARIABLEDECLARATION,"i",pa.java(59:13-59:18),"i = 0"
136,DECLAREDREFERENCEEXPRESSION,"this",pa.java(59:32-59:39),"this"
137,ARRAYSUBSCRIPTIONEXPRESSION,"",pa.java(59:32-59:42),"visited[i]"
138,LITERAL,"",pa.java(59:45-59:50),"false"
139,DECLAREDREFERENCEEXPRESSION,"i",pa.java(59:27-59:28),"i"
140,MEMBEREXPRESSION,"visited",pa.java(59:32-59:39),"visited"
141,DECLAREDREFERENCEEXPRESSION,"i",pa.java(59:40-59:41),"i"
142,DECLAREDREFERENCEEXPRESSION,"i",pa.java(59:20-59:21),"i"
143,MEMBEREXPRESSION,"N",pa.java(59:24-59:25),"N"
144,DECLAREDREFERENCEEXPRESSION,"this",pa.java(59:24-59:25),"this"
145,LITERAL,"",pa.java(59:17-59:18),"0"
146,CALLEXPRESSION,"dfs",pa.java(58:32-58:39),"dfs(i);"
147,DECLARATIONSTATEMENT,"",pa.java(58:9-58:18),"int i = 0"
148,BINARYOPERATOR,"<",pa.java(58:20-58:25),"i < N"
149,UNARYOPERATOR,"++",pa.java(58:27-58:30),"i++"
150,VARIABLEDECLARATION,"i",pa.java(58:13-58:18),"i = 0"
151,DECLAREDREFERENCEEXPRESSION,"i",pa.java(58:36-58:37),"i"
152,DECLAREDREFERENCEEXPRESSION,"i",pa.java(58:20-58:21),"i"
153,METHODDECLARATION,"dfs",OrdemRara.java(71:3-78:4),"void dfs(int u){
  	if(pos[u]>=0) return;
  	for(int i = 0; i < deg[u]; i++){
  		int v = adj[u][i];
  		dfs(v);
  	}
  	pos[u] = N++;
  }"
154,DECLAREDREFERENCEEXPRESSION,"i",pa.java(58:27-58:28),"i"
155,PARAMVARIABLEDECLARATION,"u",OrdemRara.java(71:12-71:17),"int u"
156,MEMBEREXPRESSION,"N",pa.java(58:24-58:25),"N"
157,DECLAREDREFERENCEEXPRESSION,"this",pa.java(58:24-58:25),"this"
158,DECLAREDREFERENCEEXPRESSION,"this",pa.java(61:17-61:22),"this"
159,DECLARATIONSTATEMENT,"",pa.java(61:9-61:14),"int u"
160,MEMBEREXPRESSION,"order",pa.java(61:17-61:22),"order"
161,COMPOUNDSTATEMENT,"",pa.java(61:23-68:6),"{
      if(!visited[u]){
        count = 0;
        flood_fill(u);
        if(count>=4) A++;
        else B+=count;
      }
    }"
162,VARIABLEDECLARATION,"u",pa.java(61:13-61:14),"u"
163,DECLAREDREFERENCEEXPRESSION,"this",pa.java(62:11-62:18),"this"
164,IFSTATEMENT,"",pa.java(62:7-67:8),"if(!visited[u]){
        count = 0;
        flood_fill(u);
        if(count>=4) A++;
        else B+=count;
      }"
165,COMPOUNDSTATEMENT,"",pa.java(62:22-67:8),"{
        count = 0;
        flood_fill(u);
        if(count>=4) A++;
        else B+=count;
      }"
166,UNARYOPERATOR,"!",pa.java(62:10-62:21),"!visited[u]"
167,DECLAREDREFERENCEEXPRESSION,"this",pa.java(63:9-63:14),"this"
168,ARRAYSUBSCRIPTIONEXPRESSION,"",pa.java(62:11-62:21),"visited[u]"
169,MEMBEREXPRESSION,"visited",pa.java(62:11-62:18),"visited"
170,DECLAREDREFERENCEEXPRESSION,"u",pa.java(62:19-62:20),"u"
171,BINARYOPERATOR,"=",pa.java(63:9-63:19),"count = 0;"
172,CALLEXPRESSION,"flood_fill",pa.java(64:9-64:23),"flood_fill(u);"
173,IFSTATEMENT,"",pa.java(65:9-66:23),"if(count>=4) A++;
        else B+=count;"
174,UNARYOPERATOR,"++",pa.java(65:22-65:26),"A++;"
175,BINARYOPERATOR,"+=",pa.java(66:14-66:23),"B+=count;"
176,MEMBEREXPRESSION,"count",pa.java(63:9-63:14),"count"
177,LITERAL,"",pa.java(63:17-63:18),"0"
178,DECLAREDREFERENCEEXPRESSION,"u",pa.java(64:20-64:21),"u"
179,DECLAREDREFERENCEEXPRESSION,"this",pa.java(65:12-65:17),"this"
180,BINARYOPERATOR,">=",pa.java(65:12-65:20),"count>=4"
181,DECLAREDREFERENCEEXPRESSION,"A",pa.java(65:22-65:23),"A"
182,DECLAREDREFERENCEEXPRESSION,"B",pa.java(66:14-66:15),"B"
183,MEMBEREXPRESSION,"count",pa.java(66:17-66:22),"count"
184,DECLAREDREFERENCEEXPRESSION,"this",pa.java(66:17-66:22),"this"
185,MEMBEREXPRESSION,"count",pa.java(65:12-65:17),"count"
186,LITERAL,"",pa.java(65:19-65:20),"4"
187,UNINITIALIZEDVALUE,"Uninitialized Value",,""
188,DECLAREDREFERENCEEXPRESSION,"clear",pa.java(56:11-56:16),"clear"
189,MEMBEREXPRESSION,"order",pa.java(56:5-56:10),"order"
190,NEWEXPRESSION,"",pa.java(9:26-9:51),"new LinkedList<Integer>()"
191,CONSTRUCTEXPRESSION,"",pa.java(9:26-9:51),"new LinkedList<Integer>()"
192,VARIABLEDECLARATION,"this",,""
193,COMPOUNDSTATEMENT,"",pa.java(23:14-39:4),"{
    N = kb.nextInt();
    map.clear();
    adj.clear();
    tadj.clear();
    for(int i = 0; i < N; i++){
      int u = kb.nextInt()-1;
      int c = kb.nextInt();
      int x = find_node(u);
      for(int k = 0; k < c; k++){
        int v = kb.nextInt()-1;
        int y = find_node(v);
        adj.get(x).add(y);
        tadj.get(y).add(x);
      }
    }
  }"
194,DECLAREDREFERENCEEXPRESSION,"this",pa.java(24:5-24:6),"this"
195,RETURNSTATEMENT,"",,""
196,BINARYOPERATOR,"=",pa.java(24:5-24:22),"N = kb.nextInt();"
197,MEMBERCALLEXPRESSION,"clear",pa.java(25:5-25:17),"map.clear();"
198,MEMBERCALLEXPRESSION,"clear",pa.java(26:5-26:17),"adj.clear();"
199,MEMBERCALLEXPRESSION,"clear",pa.java(27:5-27:18),"tadj.clear();"
200,FORSTATEMENT,"",pa.java(28:5-38:6),"for(int i = 0; i < N; i++){
      int u = kb.nextInt()-1;
      int c = kb.nextInt();
      int x = find_node(u);
      for(int k = 0; k < c; k++){
        int v = kb.nextInt()-1;
        int y = find_node(v);
        adj.get(x).add(y);
        tadj.get(y).add(x);
      }
    }"
201,DECLAREDREFERENCEEXPRESSION,"clear",pa.java(25:9-25:14),"clear"
202,DECLAREDREFERENCEEXPRESSION,"this",pa.java(26:5-26:8),"this"
203,MEMBEREXPRESSION,"map",pa.java(25:5-25:8),"map"
204,DECLAREDREFERENCEEXPRESSION,"this",pa.java(25:5-25:8),"this"
205,MEMBEREXPRESSION,"N",pa.java(24:5-24:6),"N"
206,MEMBERCALLEXPRESSION,"nextInt",pa.java(24:9-24:21),"kb.nextInt()"
207,DECLAREDREFERENCEEXPRESSION,"this",pa.java(24:9-24:11),"this"
208,DECLAREDREFERENCEEXPRESSION,"nextInt",pa.java(24:12-24:19),"nextInt"
209,MEMBEREXPRESSION,"kb",pa.java(24:9-24:11),"kb"
210,COMPOUNDSTATEMENT,"",pa.java(28:31-38:6),"{
      int u = kb.nextInt()-1;
      int c = kb.nextInt();
      int x = find_node(u);
      for(int k = 0; k < c; k++){
        int v = kb.nextInt()-1;
        int y = find_node(v);
        adj.get(x).add(y);
        tadj.get(y).add(x);
      }
    }"
211,DECLARATIONSTATEMENT,"",pa.java(28:9-28:18),"int i = 0"
212,BINARYOPERATOR,"<",pa.java(28:20-28:25),"i < N"
213,UNARYOPERATOR,"++",pa.java(28:27-28:30),"i++"
214,VARIABLEDECLARATION,"i",pa.java(28:13-28:18),"i = 0"
215,DECLAREDREFERENCEEXPRESSION,"this",pa.java(29:15-29:17),"this"
216,DECLAREDREFERENCEEXPRESSION,"i",pa.java(28:20-28:21),"i"
217,MEMBEREXPRESSION,"N",pa.java(28:24-28:25),"N"
218,DECLAREDREFERENCEEXPRESSION,"this",pa.java(28:24-28:25),"this"
219,LITERAL,"",pa.java(28:17-28:18),"0"
220,DECLAREDREFERENCEEXPRESSION,"i",pa.java(28:27-28:28),"i"
221,DECLARATIONSTATEMENT,"",pa.java(29:7-29:30),"int u = kb.nextInt()-1;"
222,DECLARATIONSTATEMENT,"",pa.java(30:7-30:28),"int c = kb.nextInt();"
223,DECLARATIONSTATEMENT,"",pa.java(31:7-31:28),"int x = find_node(u);"
224,FORSTATEMENT,"",pa.java(32:7-37:8),"for(int k = 0; k < c; k++){
        int v = kb.nextInt()-1;
        int y = find_node(v);
        adj.get(x).add(y);
        tadj.get(y).add(x);
      }"
225,VARIABLEDECLARATION,"u",pa.java(29:11-29:29),"u = kb.nextInt()-1"
226,VARIABLEDECLARATION,"c",pa.java(30:11-30:27),"c = kb.nextInt()"
227,VARIABLEDECLARATION,"x",pa.java(31:11-31:27),"x = find_node(u)"
228,COMPOUNDSTATEMENT,"",pa.java(32:33-37:8),"{
        int v = kb.nextInt()-1;
        int y = find_node(v);
        adj.get(x).add(y);
        tadj.get(y).add(x);
      }"
229,DECLARATIONSTATEMENT,"",pa.java(32:11-32:20),"int k = 0"
230,BINARYOPERATOR,"<",pa.java(32:22-32:27),"k < c"
231,UNARYOPERATOR,"++",pa.java(32:29-32:32),"k++"
232,VARIABLEDECLARATION,"k",pa.java(32:15-32:20),"k = 0"
233,DECLAREDREFERENCEEXPRESSION,"this",pa.java(33:17-33:19),"this"
234,DECLAREDREFERENCEEXPRESSION,"k",pa.java(32:22-32:23),"k"
235,LITERAL,"",pa.java(32:19-32:20),"0"
236,DECLARATIONSTATEMENT,"",pa.java(33:9-33:32),"int v = kb.nextInt()-1;"
237,DECLARATIONSTATEMENT,"",pa.java(34:9-34:30),"int y = find_node(v);"
238,MEMBERCALLEXPRESSION,"add",pa.java(35:9-35:27),"adj.get(x).add(y);"
239,MEMBERCALLEXPRESSION,"add",pa.java(36:9-36:28),"tadj.get(y).add(x);"
240,VARIABLEDECLARATION,"v",pa.java(33:13-33:31),"v = kb.nextInt()-1"
241,VARIABLEDECLARATION,"y",pa.java(34:13-34:29),"y = find_node(v)"
242,DECLAREDREFERENCEEXPRESSION,"k",pa.java(32:29-32:30),"k"
243,CALLEXPRESSION,"find_node",pa.java(34:17-34:29),"find_node(v)"
244,METHODDECLARATION,"find_node",,""
245,DECLAREDREFERENCEEXPRESSION,"v",pa.java(34:27-34:28),"v"
246,PARAMVARIABLEDECLARATION,"int0",,""
247,BINARYOPERATOR,"-",pa.java(33:17-33:31),"kb.nextInt()-1"
248,MEMBERCALLEXPRESSION,"nextInt",pa.java(33:17-33:29),"kb.nextInt()"
249,LITERAL,"",pa.java(33:30-33:31),"1"
250,DECLAREDREFERENCEEXPRESSION,"nextInt",pa.java(33:20-33:27),"nextInt"
251,MEMBEREXPRESSION,"kb",pa.java(33:17-33:19),"kb"
252,DECLAREDREFERENCEEXPRESSION,"add",pa.java(36:21-36:24),"add"
253,DECLAREDREFERENCEEXPRESSION,"x",pa.java(36:25-36:26),"x"
254,MEMBERCALLEXPRESSION,"get",pa.java(36:9-36:20),"tadj.get(y)"
255,DECLAREDREFERENCEEXPRESSION,"get",pa.java(36:14-36:17),"get"
256,DECLAREDREFERENCEEXPRESSION,"y",pa.java(36:18-36:19),"y"
257,MEMBEREXPRESSION,"tadj",pa.java(36:9-36:13),"tadj"
258,DECLAREDREFERENCEEXPRESSION,"this",pa.java(36:9-36:13),"this"
259,DECLAREDREFERENCEEXPRESSION,"add",pa.java(35:20-35:23),"add"
260,DECLAREDREFERENCEEXPRESSION,"y",pa.java(35:24-35:25),"y"
261,MEMBERCALLEXPRESSION,"get",pa.java(35:9-35:19),"adj.get(x)"
262,DECLAREDREFERENCEEXPRESSION,"get",pa.java(35:13-35:16),"get"
263,DECLAREDREFERENCEEXPRESSION,"x",pa.java(35:17-35:18),"x"
264,MEMBEREXPRESSION,"adj",pa.java(35:9-35:12),"adj"
265,DECLAREDREFERENCEEXPRESSION,"this",pa.java(35:9-35:12),"this"
266,DECLAREDREFERENCEEXPRESSION,"c",pa.java(32:26-32:27),"c"
267,MEMBERCALLEXPRESSION,"nextInt",pa.java(30:15-30:27),"kb.nextInt()"
268,DECLAREDREFERENCEEXPRESSION,"nextInt",pa.java(30:18-30:25),"nextInt"
269,MEMBEREXPRESSION,"kb",pa.java(30:15-30:17),"kb"
270,DECLAREDREFERENCEEXPRESSION,"this",pa.java(30:15-30:17),"this"
271,BINARYOPERATOR,"-",pa.java(29:15-29:29),"kb.nextInt()-1"
272,MEMBERCALLEXPRESSION,"nextInt",pa.java(29:15-29:27),"kb.nextInt()"
273,LITERAL,"",pa.java(29:28-29:29),"1"
274,DECLAREDREFERENCEEXPRESSION,"nextInt",pa.java(29:18-29:25),"nextInt"
275,MEMBEREXPRESSION,"kb",pa.java(29:15-29:17),"kb"
276,DECLAREDREFERENCEEXPRESSION,"u",pa.java(31:25-31:26),"u"
277,CALLEXPRESSION,"find_node",pa.java(31:15-31:27),"find_node(u)"
278,DECLAREDREFERENCEEXPRESSION,"clear",pa.java(26:9-26:14),"clear"
279,DECLAREDREFERENCEEXPRESSION,"this",pa.java(27:5-27:9),"this"
280,MEMBEREXPRESSION,"adj",pa.java(26:5-26:8),"adj"
281,DECLAREDREFERENCEEXPRESSION,"clear",pa.java(27:10-27:15),"clear"
282,MEMBEREXPRESSION,"tadj",pa.java(27:5-27:9),"tadj"
283,VARIABLEDECLARATION,"this",,""
284,COMPOUNDSTATEMENT,"",pa.java(13:23-22:4),"{
    if(map.containsKey(u)) return map.get(u);
    else{
      adj.add(new LinkedList<Integer>());
      tadj.add(new LinkedList<Integer>());
      int p = map.size();
      map.put(u,p);
      return p;
    }
  }"
285,PARAMVARIABLEDECLARATION,"u",pa.java(13:17-13:22),"int u"
286,DECLAREDREFERENCEEXPRESSION,"this",pa.java(14:8-14:11),"this"
287,RETURNSTATEMENT,"",,""
288,IFSTATEMENT,"",pa.java(14:5-21:6),"if(map.containsKey(u)) return map.get(u);
    else{
      adj.add(new LinkedList<Integer>());
      tadj.add(new LinkedList<Integer>());
      int p = map.size();
      map.put(u,p);
      return p;
    }"
289,MEMBERCALLEXPRESSION,"containsKey",pa.java(14:8-14:26),"map.containsKey(u)"
290,RETURNSTATEMENT,"",pa.java(14:28-14:46),"return map.get(u);"
291,COMPOUNDSTATEMENT,"",pa.java(15:9-21:6),"{
      adj.add(new LinkedList<Integer>());
      tadj.add(new LinkedList<Integer>());
      int p = map.size();
      map.put(u,p);
      return p;
    }"
292,DECLAREDREFERENCEEXPRESSION,"this",pa.java(14:35-14:38),"this"
293,DECLAREDREFERENCEEXPRESSION,"this",pa.java(16:7-16:10),"this"
294,DECLAREDREFERENCEEXPRESSION,"containsKey",pa.java(14:12-14:23),"containsKey"
295,DECLAREDREFERENCEEXPRESSION,"u",pa.java(14:24-14:25),"u"
296,MEMBEREXPRESSION,"map",pa.java(14:8-14:11),"map"
297,MEMBERCALLEXPRESSION,"get",pa.java(14:35-14:45),"map.get(u)"
298,DECLAREDREFERENCEEXPRESSION,"get",pa.java(14:39-14:42),"get"
299,DECLAREDREFERENCEEXPRESSION,"u",pa.java(14:43-14:44),"u"
300,MEMBEREXPRESSION,"map",pa.java(14:35-14:38),"map"
301,MEMBERCALLEXPRESSION,"add",pa.java(16:7-16:42),"adj.add(new LinkedList<Integer>());"
302,MEMBERCALLEXPRESSION,"add",pa.java(17:7-17:43),"tadj.add(new LinkedList<Integer>());"
303,DECLARATIONSTATEMENT,"",pa.java(18:7-18:26),"int p = map.size();"
304,MEMBERCALLEXPRESSION,"put",pa.java(19:7-19:20),"map.put(u,p);"
305,RETURNSTATEMENT,"",pa.java(20:7-20:16),"return p;"
306,VARIABLEDECLARATION,"p",pa.java(18:11-18:25),"p = map.size()"
307,DECLAREDREFERENCEEXPRESSION,"p",pa.java(20:14-20:15),"p"
308,DECLAREDREFERENCEEXPRESSION,"add",pa.java(16:11-16:14),"add"
309,DECLAREDREFERENCEEXPRESSION,"this",pa.java(17:7-17:11),"this"
310,NEWEXPRESSION,"",pa.java(16:15-16:40),"new LinkedList<Integer>()"
311,CONSTRUCTEXPRESSION,"",pa.java(16:15-16:40),"new LinkedList<Integer>()"
312,MEMBEREXPRESSION,"adj",pa.java(16:7-16:10),"adj"
313,DECLAREDREFERENCEEXPRESSION,"add",pa.java(17:12-17:15),"add"
314,DECLAREDREFERENCEEXPRESSION,"this",pa.java(18:15-18:18),"this"
315,NEWEXPRESSION,"",pa.java(17:16-17:41),"new LinkedList<Integer>()"
316,CONSTRUCTEXPRESSION,"",pa.java(17:16-17:41),"new LinkedList<Integer>()"
317,MEMBEREXPRESSION,"tadj",pa.java(17:7-17:11),"tadj"
318,DECLAREDREFERENCEEXPRESSION,"this",pa.java(19:7-19:10),"this"
319,DECLAREDREFERENCEEXPRESSION,"put",pa.java(19:11-19:14),"put"
320,DECLAREDREFERENCEEXPRESSION,"p",pa.java(19:17-19:18),"p"
321,DECLAREDREFERENCEEXPRESSION,"u",pa.java(19:15-19:16),"u"
322,MEMBEREXPRESSION,"map",pa.java(19:7-19:10),"map"
323,MEMBERCALLEXPRESSION,"size",pa.java(18:15-18:25),"map.size()"
324,DECLAREDREFERENCEEXPRESSION,"size",pa.java(18:19-18:23),"size"
325,MEMBEREXPRESSION,"map",pa.java(18:15-18:18),"map"
326,NEWEXPRESSION,"",pa.java(11:40-11:76),"new ArrayList<LinkedList<Integer>>()"
327,CONSTRUCTEXPRESSION,"",pa.java(11:40-11:76),"new ArrayList<LinkedList<Integer>>()"
328,VARIABLEDECLARATION,"this",,""
329,COMPOUNDSTATEMENT,"",pa.java(40:18-47:4),"{
    if(visited[u]) return;
    else visited[u] = true;
    for(int v : adj.get(u)){
      if(!visited[v]) dfs(v);
    }
    order.addFirst(u);
  }"
330,PARAMVARIABLEDECLARATION,"u",pa.java(40:12-40:17),"int u"
331,DECLAREDREFERENCEEXPRESSION,"this",pa.java(41:8-41:15),"this"
332,RETURNSTATEMENT,"",,""
333,IFSTATEMENT,"",pa.java(41:5-42:28),"if(visited[u]) return;
    else visited[u] = true;"
334,FOREACHSTATEMENT,"",pa.java(43:5-45:6),"for(int v : adj.get(u)){
      if(!visited[v]) dfs(v);
    }"
335,MEMBERCALLEXPRESSION,"addFirst",pa.java(46:5-46:23),"order.addFirst(u);"
336,DECLARATIONSTATEMENT,"",pa.java(43:9-43:14),"int v"
337,MEMBERCALLEXPRESSION,"get",pa.java(43:17-43:27),"adj.get(u)"
338,COMPOUNDSTATEMENT,"",pa.java(43:28-45:6),"{
      if(!visited[v]) dfs(v);
    }"
339,VARIABLEDECLARATION,"v",pa.java(43:13-43:14),"v"
340,DECLAREDREFERENCEEXPRESSION,"this",pa.java(44:11-44:18),"this"
341,DECLAREDREFERENCEEXPRESSION,"this",pa.java(46:5-46:10),"this"
342,UNINITIALIZEDVALUE,"Uninitialized Value",,""
343,IFSTATEMENT,"",pa.java(44:7-44:30),"if(!visited[v]) dfs(v);"
344,DECLAREDREFERENCEEXPRESSION,"this",pa.java(43:17-43:20),"this"
345,CALLEXPRESSION,"dfs",pa.java(44:23-44:30),"dfs(v);"
346,UNARYOPERATOR,"!",pa.java(44:10-44:21),"!visited[v]"
347,DECLAREDREFERENCEEXPRESSION,"v",pa.java(44:27-44:28),"v"
348,ARRAYSUBSCRIPTIONEXPRESSION,"",pa.java(44:11-44:21),"visited[v]"
349,MEMBEREXPRESSION,"visited",pa.java(44:11-44:18),"visited"
350,DECLAREDREFERENCEEXPRESSION,"v",pa.java(44:19-44:20),"v"
351,DECLAREDREFERENCEEXPRESSION,"get",pa.java(43:21-43:24),"get"
352,DECLAREDREFERENCEEXPRESSION,"u",pa.java(43:25-43:26),"u"
353,MEMBEREXPRESSION,"adj",pa.java(43:17-43:20),"adj"
354,BINARYOPERATOR,"=",pa.java(42:10-42:28),"visited[u] = true;"
355,DECLAREDREFERENCEEXPRESSION,"addFirst",pa.java(46:11-46:19),"addFirst"
356,DECLAREDREFERENCEEXPRESSION,"u",pa.java(46:20-46:21),"u"
357,MEMBEREXPRESSION,"order",pa.java(46:5-46:10),"order"
358,ARRAYSUBSCRIPTIONEXPRESSION,"",pa.java(41:8-41:18),"visited[u]"
359,RETURNSTATEMENT,"",pa.java(41:20-41:27),"return;"
360,DECLAREDREFERENCEEXPRESSION,"this",pa.java(42:10-42:17),"this"
361,ARRAYSUBSCRIPTIONEXPRESSION,"",pa.java(42:10-42:20),"visited[u]"
362,LITERAL,"",pa.java(42:23-42:27),"true"
363,MEMBEREXPRESSION,"visited",pa.java(42:10-42:17),"visited"
364,DECLAREDREFERENCEEXPRESSION,"u",pa.java(42:18-42:19),"u"
365,MEMBEREXPRESSION,"visited",pa.java(41:8-41:15),"visited"
366,DECLAREDREFERENCEEXPRESSION,"u",pa.java(41:16-41:17),"u"
367,NEWEXPRESSION,"",pa.java(12:41-12:77),"new ArrayList<LinkedList<Integer>>()"
368,CONSTRUCTEXPRESSION,"",pa.java(12:41-12:77),"new ArrayList<LinkedList<Integer>>()"
369,COMPOUNDSTATEMENT,"",pa.java(5:18-5:33),"{this.kb = kb;}"
370,PARAMVARIABLEDECLARATION,"kb",pa.java(5:7-5:17),"Scanner kb"
371,DECLAREDREFERENCEEXPRESSION,"this",pa.java(5:19-5:23),"this"
372,RETURNSTATEMENT,"",,""
373,BINARYOPERATOR,"=",pa.java(5:19-5:32),"this.kb = kb;"
374,MEMBEREXPRESSION,"kb",pa.java(5:19-5:26),"this.kb"
375,DECLAREDREFERENCEEXPRESSION,"kb",pa.java(5:29-5:31),"kb"
