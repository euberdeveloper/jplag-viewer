package de.jplag.llvmir;

import static de.jplag.llvmir.LLVMIRTokenType.*;
import static de.jplag.llvmir.grammar.LLVMIRParser.AShrExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AShrInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AddExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AddInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AddrSpaceCastExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AddrSpaceCastInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AllocaInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AndExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AndInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ArrayConstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AtomicOrderingContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.AtomicRMWInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.BasicBlockContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.BitCastExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.BitCastInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.BrTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CallBrTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CallInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.Case_Context;
import static de.jplag.llvmir.grammar.LLVMIRParser.CatchPadInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CatchRetTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CatchSwitchTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ClauseContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CleanupPadInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CleanupRetTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CmpXchgInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.CondBrTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ExtractElementExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ExtractElementInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ExtractValueInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FAddInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FCmpExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FCmpInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FDivInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FMulInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FRemInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FSubInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FenceInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpExtExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpExtInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpToSiExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpToSiInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpToUiExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpToUiInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpTruncExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FpTruncInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FuncBodyContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FuncDeclContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.FuncDefContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.GetElementPtrExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.GetElementPtrInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.GlobalDeclContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.GlobalDefContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ICmpExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ICmpInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.IndirectBrTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.InlineAsmContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.InsertElementExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.InsertElementInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.InsertValueInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.IntToPtrExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.IntToPtrInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.InvokeTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.LShrExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.LShrInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.LandingPadInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.LoadInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ModuleAsmContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.MulExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.MulInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.OrExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.OrInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.PhiInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.PtrToIntExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.PtrToIntInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ResumeTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.RetTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SDivInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SExtExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SExtInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SRemInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SelectExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SelectInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ShlExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ShlInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ShuffleVectorExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ShuffleVectorInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SiToFpExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SiToFpInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SourceFilenameContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.StoreInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.StructConstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SubExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SubInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.SwitchTermContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.TruncExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.TruncInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.TypeDefContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.UDivInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.URemInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.UiToFpExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.UiToFpInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.VaargInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.VectorConstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.XorExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.XorInstContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ZExtExprContext;
import static de.jplag.llvmir.grammar.LLVMIRParser.ZExtInstContext;

import java.io.File;

import de.jplag.antlr.AbstractAntlrListener;
import de.jplag.antlr.TokenCollector;

/**
 * Extracts tokens from the ANTLR parse tree. The token abstraction includes nesting tokens for functions and basic
 * blocks and separate tokens for different elements. These include binary and bitwise instructions, memory operations,
 * terminator instructions, conversions, global variables, type definitions, constants, and others.
 */
public class LLVMIRListener extends AbstractAntlrListener {

    /**
     * New instance
     * @param collector The token collector the token will be added to
     * @param currentFile The currently processed file
     */
    public LLVMIRListener(TokenCollector collector, File currentFile) {
        super(collector, currentFile);

        this.mapEnter(SourceFilenameContext.class, FILENAME);
        this.mapRange(ModuleAsmContext.class, ASSEMBLY);
        this.mapEnter(TypeDefContext.class, TYPE_DEFINITION);
        this.mapRange(GlobalDeclContext.class, GLOBAL_VARIABLE);
        this.mapRange(GlobalDefContext.class, GLOBAL_VARIABLE);
        this.mapRange(FuncDeclContext.class, FUNCTION_DECLARATION);
        this.mapRange(FuncDefContext.class, FUNCTION_DEFINITION);
        this.mapEnterExit(FuncBodyContext.class, FUNCTION_BODY_BEGIN, FUNCTION_BODY_END);
        this.mapEnterExit(BasicBlockContext.class, BASIC_BLOCK_BEGIN, BASIC_BLOCK_END);
        this.mapRange(RetTermContext.class, RETURN);
        this.mapRange(BrTermContext.class, BRANCH);
        this.mapRange(CondBrTermContext.class, CONDITIONAL_BRANCH);
        this.mapRange(SwitchTermContext.class, SWITCH);
        this.mapRange(IndirectBrTermContext.class, BRANCH);
        this.mapRange(ResumeTermContext.class, RESUME);
        this.mapRange(CatchRetTermContext.class, CATCH_RETURN);
        this.mapRange(CleanupRetTermContext.class, CLEAN_UP_RETURN);
        this.mapRange(InvokeTermContext.class, INVOKE);
        this.mapRange(CallBrTermContext.class, CALL_BRANCH);
        this.mapRange(CatchSwitchTermContext.class, CATCH_SWITCH);
        this.mapRange(Case_Context.class, CASE);
        this.mapRange(StructConstContext.class, STRUCTURE);
        this.mapRange(ArrayConstContext.class, ARRAY);
        this.mapRange(VectorConstContext.class, VECTOR);
        this.mapRange(InlineAsmContext.class, ASSEMBLY);
        this.mapRange(BitCastExprContext.class, BITCAST);
        this.mapRange(GetElementPtrExprContext.class, GET_ELEMENT_POINTER);
        this.mapEnter(AddrSpaceCastExprContext.class, CONVERSION);
        this.mapEnter(IntToPtrExprContext.class, CONVERSION);
        this.mapRange(ICmpExprContext.class, COMPARISON);
        this.mapRange(FCmpExprContext.class, COMPARISON);
        this.mapRange(SelectExprContext.class, SELECT);
        this.mapEnter(TruncExprContext.class, CONVERSION);
        this.mapEnter(ZExtExprContext.class, CONVERSION);
        this.mapEnter(SExtExprContext.class, CONVERSION);
        this.mapEnter(FpTruncExprContext.class, CONVERSION);
        this.mapEnter(FpExtExprContext.class, CONVERSION);
        this.mapEnter(FpToUiExprContext.class, CONVERSION);
        this.mapEnter(FpToSiExprContext.class, CONVERSION);
        this.mapEnter(UiToFpExprContext.class, CONVERSION);
        this.mapEnter(SiToFpExprContext.class, CONVERSION);
        this.mapEnter(PtrToIntExprContext.class, CONVERSION);
        this.mapEnter(ExtractElementExprContext.class, EXTRACT_ELEMENT);
        this.mapEnter(InsertElementExprContext.class, INSERT_ELEMENT);
        this.mapEnter(ShuffleVectorExprContext.class, SHUFFLE_VECTOR);
        this.mapRange(ShlExprContext.class, SHIFT);
        this.mapRange(LShrExprContext.class, SHIFT);
        this.mapRange(AShrExprContext.class, SHIFT);
        this.mapRange(AndExprContext.class, AND);
        this.mapRange(OrExprContext.class, OR);
        this.mapRange(XorExprContext.class, XOR);
        this.mapRange(AddExprContext.class, ADDITION);
        this.mapRange(SubExprContext.class, SUBTRACTION);
        this.mapRange(MulExprContext.class, MULTIPLICATION);
        this.mapRange(StoreInstContext.class, STORE);
        this.mapRange(FenceInstContext.class, FENCE);
        this.mapRange(AddInstContext.class, ADDITION);
        this.mapRange(FAddInstContext.class, ADDITION);
        this.mapRange(SubInstContext.class, SUBTRACTION);
        this.mapRange(FSubInstContext.class, SUBTRACTION);
        this.mapRange(MulInstContext.class, MULTIPLICATION);
        this.mapRange(FMulInstContext.class, MULTIPLICATION);
        this.mapRange(UDivInstContext.class, DIVISION);
        this.mapRange(SDivInstContext.class, DIVISION);
        this.mapRange(FDivInstContext.class, DIVISION);
        this.mapRange(URemInstContext.class, REMAINDER);
        this.mapRange(SRemInstContext.class, REMAINDER);
        this.mapRange(FRemInstContext.class, REMAINDER);
        this.mapRange(ShlInstContext.class, SHIFT);
        this.mapRange(LShrInstContext.class, SHIFT);
        this.mapRange(AShrInstContext.class, SHIFT);
        this.mapRange(AndInstContext.class, AND);
        this.mapRange(OrInstContext.class, OR);
        this.mapRange(XorInstContext.class, XOR);
        this.mapEnter(ExtractElementInstContext.class, EXTRACT_ELEMENT);
        this.mapEnter(InsertElementInstContext.class, INSERT_ELEMENT);
        this.mapEnter(ShuffleVectorInstContext.class, SHUFFLE_VECTOR);
        this.mapRange(ExtractValueInstContext.class, EXTRACT_VALUE);
        this.mapRange(InsertValueInstContext.class, INSERT_VALUE);
        this.mapRange(AllocaInstContext.class, ALLOCATION);
        this.mapRange(LoadInstContext.class, LOAD);
        this.mapRange(CmpXchgInstContext.class, COMPARE_EXCHANGE);
        this.mapRange(AtomicRMWInstContext.class, ATOMIC_READ_MODIFY_WRITE);
        this.mapRange(GetElementPtrInstContext.class, GET_ELEMENT_POINTER);
        this.mapEnter(TruncInstContext.class, CONVERSION);
        this.mapEnter(ZExtInstContext.class, CONVERSION);
        this.mapEnter(SExtInstContext.class, CONVERSION);
        this.mapEnter(FpTruncInstContext.class, CONVERSION);
        this.mapEnter(FpExtInstContext.class, CONVERSION);
        this.mapEnter(FpToUiInstContext.class, CONVERSION);
        this.mapEnter(FpToSiInstContext.class, CONVERSION);
        this.mapEnter(UiToFpInstContext.class, CONVERSION);
        this.mapEnter(SiToFpInstContext.class, CONVERSION);
        this.mapEnter(PtrToIntInstContext.class, CONVERSION);
        this.mapEnter(IntToPtrInstContext.class, CONVERSION);
        this.mapRange(BitCastInstContext.class, BITCAST);
        this.mapEnter(AddrSpaceCastInstContext.class, CONVERSION);
        this.mapRange(ICmpInstContext.class, COMPARISON);
        this.mapRange(FCmpInstContext.class, COMPARISON);
        this.mapRange(PhiInstContext.class, PHI);
        this.mapRange(SelectInstContext.class, SELECT);
        this.mapRange(CallInstContext.class, CALL);
        this.mapRange(VaargInstContext.class, VARIABLE_ARGUMENT);
        this.mapRange(LandingPadInstContext.class, LANDING_PAD);
        this.mapRange(CatchPadInstContext.class, CATCH_PAD);
        this.mapRange(CleanupPadInstContext.class, CLEAN_UP_PAD);
        this.mapRange(ClauseContext.class, CLAUSE);
        this.mapRange(AtomicOrderingContext.class, ATOMIC_ORDERING);
    }
}
